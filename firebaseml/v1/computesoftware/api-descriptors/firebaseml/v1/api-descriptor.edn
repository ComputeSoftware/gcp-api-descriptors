#:compute.gcp.descriptor{:name "firebaseml", :title "Firebase ML API", :api-version "v1", :revision "20200716", :endpoint #:compute.gcp.descriptor{:url "https://firebaseml.googleapis.com/", :batch-path "batch", :service-path ""}, :parameters {"callback" {"location" "query", "description" "JSONP", "type" "string"}, "uploadType" {"type" "string", "description" "Legacy upload protocol for media (e.g. \"media\", \"multipart\").", "location" "query"}, "key" {"location" "query", "type" "string", "description" "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."}, "access_token" {"type" "string", "description" "OAuth access token.", "location" "query"}, "oauth_token" {"type" "string", "description" "OAuth 2.0 token for the current user.", "location" "query"}, "prettyPrint" {"type" "boolean", "location" "query", "description" "Returns response with indentations and line breaks.", "default" "true"}, "alt" {"type" "string", "location" "query", "default" "json", "enum" ["json" "media" "proto"], "enumDescriptions" ["Responses with Content-Type of application/json" "Media download with context-dependent Content-Type" "Responses with Content-Type of application/x-protobuf"], "description" "Data format for response."}, "$.xgafv" {"location" "query", "description" "V1 error format.", "enumDescriptions" ["v1 error format" "v2 error format"], "type" "string", "enum" ["1" "2"]}, "fields" {"type" "string", "location" "query", "description" "Selector specifying which fields to include in a partial response."}, "upload_protocol" {"description" "Upload protocol for media (e.g. \"raw\", \"multipart\").", "type" "string", "location" "query"}, "quotaUser" {"description" "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.", "location" "query", "type" "string"}}, :op->info {"firebaseml.operations.cancel" #:compute.gcp.descriptor{:http-method :post, :path "v1/{+name}:cancel", :request {"$ref" "CancelOperationRequest"}, :response {"$ref" "Empty"}, :parameters {"name" {"location" "path", "description" "The name of the operation resource to be cancelled.", "required" true, "type" "string", "pattern" "^operations/.*$"}}, :description "Starts asynchronous cancellation on a long-running operation.  The server\nmakes a best effort to cancel the operation, but success is not\nguaranteed.  If the server doesn't support this method, it returns\n`google.rpc.Code.UNIMPLEMENTED`.  Clients can use\nOperations.GetOperation or\nother methods to check whether the cancellation succeeded or whether the\noperation completed despite cancellation. On successful cancellation,\nthe operation is not deleted; instead, it becomes an operation with\nan Operation.error value with a google.rpc.Status.code of 1,\ncorresponding to `Code.CANCELLED`."}, "firebaseml.operations.list" #:compute.gcp.descriptor{:http-method :get, :path "v1/{+name}", :response {"$ref" "ListOperationsResponse"}, :parameters {"pageSize" {"description" "The standard list page size.", "type" "integer", "format" "int32", "location" "query"}, "name" {"location" "path", "description" "The name of the operation's parent resource.", "type" "string", "pattern" "^operations$", "required" true}, "pageToken" {"description" "The standard list page token.", "location" "query", "type" "string"}, "filter" {"location" "query", "description" "The standard list filter.", "type" "string"}}, :description "Lists operations that match the specified filter in the request. If the\nserver doesn't support this method, it returns `UNIMPLEMENTED`.\n\nNOTE: the `name` binding allows API services to override the binding\nto use different resource name schemes, such as `users/*/operations`. To\noverride the binding, API services can add a binding such as\n`\"/v1/{name=users/*}/operations\"` to their service configuration.\nFor backwards compatibility, the default name includes the operations\ncollection id, however overriding users must ensure the name binding\nis the parent resource, without the operations collection id."}, "firebaseml.operations.delete" #:compute.gcp.descriptor{:http-method :delete, :path "v1/{+name}", :response {"$ref" "Empty"}, :parameters {"name" {"required" true, "location" "path", "type" "string", "pattern" "^operations/.*$", "description" "The name of the operation resource to be deleted."}}, :description "Deletes a long-running operation. This method indicates that the client is\nno longer interested in the operation result. It does not cancel the\noperation. If the server doesn't support this method, it returns\n`google.rpc.Code.UNIMPLEMENTED`."}}, :schemas {"Empty" {"properties" {}, "description" "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.", "type" "object", "id" "Empty"}, "Operation" {"type" "object", "description" "This resource represents a long-running operation that is the result of a\nnetwork API call.", "properties" {"done" {"type" "boolean", "description" "If the value is `false`, it means the operation is still in progress.\nIf `true`, the operation is completed, and either `error` or `response` is\navailable."}, "metadata" {"type" "object", "description" "Service-specific metadata associated with the operation.  It typically\ncontains progress information and common metadata such as create time.\nSome services might not provide such metadata.  Any method that returns a\nlong-running operation should document the metadata type, if any.", "additionalProperties" {"type" "any", "description" "Properties of the object. Contains field @type with type URL."}}, "name" {"description" "The server-assigned name, which is only unique within the same service that\noriginally returns it. If you use the default HTTP mapping, the\n`name` should be a resource name ending with `operations/{unique_id}`.", "type" "string"}, "error" {"$ref" "Status", "description" "The error result of the operation in case of failure or cancellation."}, "response" {"type" "object", "description" "The normal response of the operation in case of success.  If the original\nmethod returns no data on success, such as `Delete`, the response is\n`google.protobuf.Empty`.  If the original method is standard\n`Get`/`Create`/`Update`, the response should be the resource.  For other\nmethods, the response should have the type `XxxResponse`, where `Xxx`\nis the original method name.  For example, if the original method name\nis `TakeSnapshot()`, the inferred response type is\n`TakeSnapshotResponse`.", "additionalProperties" {"type" "any", "description" "Properties of the object. Contains field @type with type URL."}}}, "id" "Operation"}, "ModelOperationMetadata" {"description" "This is returned in the longrunning operations\nfor create/update.", "type" "object", "id" "ModelOperationMetadata", "properties" {"basicOperationStatus" {"enumDescriptions" ["The status is unspecified" "The model file is being uploaded" "The model file is being verified"], "type" "string", "enum" ["BASIC_OPERATION_STATUS_UNSPECIFIED" "BASIC_OPERATION_STATUS_UPLOADING" "BASIC_OPERATION_STATUS_VERIFYING"]}, "name" {"type" "string", "description" "The name of the model we are creating/updating\nThe name must have the form `projects/{project_id}/models/{model_id}`"}}}, "CancelOperationRequest" {"id" "CancelOperationRequest", "properties" {}, "description" "The request message for Operations.CancelOperation.", "type" "object"}, "ListOperationsResponse" {"type" "object", "id" "ListOperationsResponse", "description" "The response message for Operations.ListOperations.", "properties" {"nextPageToken" {"description" "The standard List next-page token.", "type" "string"}, "operations" {"items" {"$ref" "Operation"}, "type" "array", "description" "A list of operations that matches the specified filter in the request."}}}, "Status" {"id" "Status", "type" "object", "properties" {"details" {"type" "array", "description" "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use.", "items" {"additionalProperties" {"type" "any", "description" "Properties of the object. Contains field @type with type URL."}, "type" "object"}}, "message" {"description" "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.", "type" "string"}, "code" {"description" "The status code, which should be an enum value of google.rpc.Code.", "type" "integer", "format" "int32"}}, "description" "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors)."}}}