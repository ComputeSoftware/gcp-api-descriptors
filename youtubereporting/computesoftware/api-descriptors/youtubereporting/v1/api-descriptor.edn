#:compute.api-descriptor{:endpoint {:schemes ["https"], :host "youtubereporting.googleapis.com", :base-path "/"}, :op->spec {"youtubereporting.jobs.list" {:description "Lists jobs.", :responses {"200" {:description "Successful response", :schema {"$ref" "#/definitions/ListJobsResponse"}}}, :parameters [{:description "If set to true, also system-managed jobs will be returned; otherwise only\nuser-created jobs will be returned. System-managed jobs can neither be\nmodified nor deleted.", :in "query", :name "includeSystemManaged", :type "boolean"} {:description "The content owner's external ID on which behalf the user is acting on. If\nnot set, the user is acting for himself (his own channel).", :in "query", :name "onBehalfOfContentOwner", :type "string"} {:description "Requested page size. Server may return fewer jobs than requested.\nIf unspecified, server will pick an appropriate default.", :in "query", :name "pageSize", :type "integer"} {:description "A token identifying a page of results the server should return. Typically,\nthis is the value of\nListReportTypesResponse.next_page_token\nreturned in response to the previous call to the `ListJobs` method.", :in "query", :name "pageToken", :type "string"}], :operationId "youtubereporting.jobs.list", :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/v1/jobs", :compute.gcp.impl.descriptor/path-parameters [{"$ref" "#/parameters/$.xgafv"} {"$ref" "#/parameters/access_token"} {"$ref" "#/parameters/alt"} {"$ref" "#/parameters/callback"} {"$ref" "#/parameters/fields"} {"$ref" "#/parameters/key"} {"$ref" "#/parameters/oauth_token"} {"$ref" "#/parameters/prettyPrint"} {"$ref" "#/parameters/quotaUser"} {"$ref" "#/parameters/uploadType"} {"$ref" "#/parameters/upload_protocol"}]}, "youtubereporting.jobs.create" {:description "Creates a job and returns it.", :responses {"200" {:description "Successful response", :schema {"$ref" "#/definitions/Job"}}}, :parameters [{:in "body", :name "body", :schema {"$ref" "#/definitions/Job"}} {:description "The content owner's external ID on which behalf the user is acting on. If\nnot set, the user is acting for himself (his own channel).", :in "query", :name "onBehalfOfContentOwner", :type "string"}], :operationId "youtubereporting.jobs.create", :compute.gcp.impl.descriptor/http-method :post, :compute.gcp.impl.descriptor/http-path "/v1/jobs", :compute.gcp.impl.descriptor/path-parameters [{"$ref" "#/parameters/$.xgafv"} {"$ref" "#/parameters/access_token"} {"$ref" "#/parameters/alt"} {"$ref" "#/parameters/callback"} {"$ref" "#/parameters/fields"} {"$ref" "#/parameters/key"} {"$ref" "#/parameters/oauth_token"} {"$ref" "#/parameters/prettyPrint"} {"$ref" "#/parameters/quotaUser"} {"$ref" "#/parameters/uploadType"} {"$ref" "#/parameters/upload_protocol"}]}, "youtubereporting.jobs.delete" {:description "Deletes a job.", :responses {"200" {:description "Successful response", :schema {"$ref" "#/definitions/Empty"}}}, :parameters [{:description "The ID of the job to delete.", :in "path", :name "jobId", :required true, :type "string"} {:description "The content owner's external ID on which behalf the user is acting on. If\nnot set, the user is acting for himself (his own channel).", :in "query", :name "onBehalfOfContentOwner", :type "string"}], :operationId "youtubereporting.jobs.delete", :compute.gcp.impl.descriptor/http-method :delete, :compute.gcp.impl.descriptor/http-path "/v1/jobs/{jobId}", :compute.gcp.impl.descriptor/path-parameters [{"$ref" "#/parameters/$.xgafv"} {"$ref" "#/parameters/access_token"} {"$ref" "#/parameters/alt"} {"$ref" "#/parameters/callback"} {"$ref" "#/parameters/fields"} {"$ref" "#/parameters/key"} {"$ref" "#/parameters/oauth_token"} {"$ref" "#/parameters/prettyPrint"} {"$ref" "#/parameters/quotaUser"} {"$ref" "#/parameters/uploadType"} {"$ref" "#/parameters/upload_protocol"}]}, "youtubereporting.jobs.get" {:description "Gets a job.", :responses {"200" {:description "Successful response", :schema {"$ref" "#/definitions/Job"}}}, :parameters [{:description "The ID of the job to retrieve.", :in "path", :name "jobId", :required true, :type "string"} {:description "The content owner's external ID on which behalf the user is acting on. If\nnot set, the user is acting for himself (his own channel).", :in "query", :name "onBehalfOfContentOwner", :type "string"}], :operationId "youtubereporting.jobs.get", :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/v1/jobs/{jobId}", :compute.gcp.impl.descriptor/path-parameters [{"$ref" "#/parameters/$.xgafv"} {"$ref" "#/parameters/access_token"} {"$ref" "#/parameters/alt"} {"$ref" "#/parameters/callback"} {"$ref" "#/parameters/fields"} {"$ref" "#/parameters/key"} {"$ref" "#/parameters/oauth_token"} {"$ref" "#/parameters/prettyPrint"} {"$ref" "#/parameters/quotaUser"} {"$ref" "#/parameters/uploadType"} {"$ref" "#/parameters/upload_protocol"}]}, "youtubereporting.jobs.reports.list" {:description "Lists reports created by a specific job.\nReturns NOT_FOUND if the job does not exist.", :responses {"200" {:description "Successful response", :schema {"$ref" "#/definitions/ListReportsResponse"}}}, :parameters [{:description "If set, only reports created after the specified date/time are returned.", :in "query", :name "createdAfter", :type "string"} {:description "The ID of the job.", :in "path", :name "jobId", :required true, :type "string"} {:description "The content owner's external ID on which behalf the user is acting on. If\nnot set, the user is acting for himself (his own channel).", :in "query", :name "onBehalfOfContentOwner", :type "string"} {:description "Requested page size. Server may return fewer report types than requested.\nIf unspecified, server will pick an appropriate default.", :in "query", :name "pageSize", :type "integer"} {:description "A token identifying a page of results the server should return. Typically,\nthis is the value of\nListReportsResponse.next_page_token\nreturned in response to the previous call to the `ListReports` method.", :in "query", :name "pageToken", :type "string"} {:description "If set, only reports whose start time is greater than or equal the\nspecified date/time are returned.", :in "query", :name "startTimeAtOrAfter", :type "string"} {:description "If set, only reports whose start time is smaller than the specified\ndate/time are returned.", :in "query", :name "startTimeBefore", :type "string"}], :operationId "youtubereporting.jobs.reports.list", :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/v1/jobs/{jobId}/reports", :compute.gcp.impl.descriptor/path-parameters [{"$ref" "#/parameters/$.xgafv"} {"$ref" "#/parameters/access_token"} {"$ref" "#/parameters/alt"} {"$ref" "#/parameters/callback"} {"$ref" "#/parameters/fields"} {"$ref" "#/parameters/key"} {"$ref" "#/parameters/oauth_token"} {"$ref" "#/parameters/prettyPrint"} {"$ref" "#/parameters/quotaUser"} {"$ref" "#/parameters/uploadType"} {"$ref" "#/parameters/upload_protocol"}]}, "youtubereporting.jobs.reports.get" {:description "Gets the metadata of a specific report.", :responses {"200" {:description "Successful response", :schema {"$ref" "#/definitions/Report"}}}, :parameters [{:description "The ID of the job.", :in "path", :name "jobId", :required true, :type "string"} {:description "The content owner's external ID on which behalf the user is acting on. If\nnot set, the user is acting for himself (his own channel).", :in "query", :name "onBehalfOfContentOwner", :type "string"} {:description "The ID of the report to retrieve.", :in "path", :name "reportId", :required true, :type "string"}], :operationId "youtubereporting.jobs.reports.get", :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/v1/jobs/{jobId}/reports/{reportId}", :compute.gcp.impl.descriptor/path-parameters [{"$ref" "#/parameters/$.xgafv"} {"$ref" "#/parameters/access_token"} {"$ref" "#/parameters/alt"} {"$ref" "#/parameters/callback"} {"$ref" "#/parameters/fields"} {"$ref" "#/parameters/key"} {"$ref" "#/parameters/oauth_token"} {"$ref" "#/parameters/prettyPrint"} {"$ref" "#/parameters/quotaUser"} {"$ref" "#/parameters/uploadType"} {"$ref" "#/parameters/upload_protocol"}]}, "youtubereporting.media.download" {:description "Method for media download. Download is supported\non the URI `/v1/media/{+name}?alt=media`.", :responses {"200" {:description "Successful response", :schema {"$ref" "#/definitions/GdataMedia"}}}, :parameters [{:description "Name of the media that is being downloaded.", :in "path", :name "resourceName", :required true, :type "string", :x-reservedExpansion true}], :operationId "youtubereporting.media.download", :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/v1/media/{resourceName}", :compute.gcp.impl.descriptor/path-parameters [{"$ref" "#/parameters/$.xgafv"} {"$ref" "#/parameters/access_token"} {"$ref" "#/parameters/alt"} {"$ref" "#/parameters/callback"} {"$ref" "#/parameters/fields"} {"$ref" "#/parameters/key"} {"$ref" "#/parameters/oauth_token"} {"$ref" "#/parameters/prettyPrint"} {"$ref" "#/parameters/quotaUser"} {"$ref" "#/parameters/uploadType"} {"$ref" "#/parameters/upload_protocol"}]}, "youtubereporting.reportTypes.list" {:description "Lists report types.", :responses {"200" {:description "Successful response", :schema {"$ref" "#/definitions/ListReportTypesResponse"}}}, :parameters [{:description "If set to true, also system-managed report types will be returned;\notherwise only the report types that can be used to create new reporting\njobs will be returned.", :in "query", :name "includeSystemManaged", :type "boolean"} {:description "The content owner's external ID on which behalf the user is acting on. If\nnot set, the user is acting for himself (his own channel).", :in "query", :name "onBehalfOfContentOwner", :type "string"} {:description "Requested page size. Server may return fewer report types than requested.\nIf unspecified, server will pick an appropriate default.", :in "query", :name "pageSize", :type "integer"} {:description "A token identifying a page of results the server should return. Typically,\nthis is the value of\nListReportTypesResponse.next_page_token\nreturned in response to the previous call to the `ListReportTypes` method.", :in "query", :name "pageToken", :type "string"}], :operationId "youtubereporting.reportTypes.list", :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/v1/reportTypes", :compute.gcp.impl.descriptor/path-parameters [{"$ref" "#/parameters/$.xgafv"} {"$ref" "#/parameters/access_token"} {"$ref" "#/parameters/alt"} {"$ref" "#/parameters/callback"} {"$ref" "#/parameters/fields"} {"$ref" "#/parameters/key"} {"$ref" "#/parameters/oauth_token"} {"$ref" "#/parameters/prettyPrint"} {"$ref" "#/parameters/quotaUser"} {"$ref" "#/parameters/uploadType"} {"$ref" "#/parameters/upload_protocol"}]}}, :parameters {:quotaUser {:description "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.", :in "query", :name "quotaUser", :type "string"}, :key {:description "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.", :in "query", :name "key", :type "string"}, :alt {:default "json", :description "Data format for response.", :enum ["json" "media" "proto"], :in "query", :name "alt", :type "string"}, :access_token {:description "OAuth access token.", :in "query", :name "access_token", :type "string"}, :fields {:description "Selector specifying which fields to include in a partial response.", :in "query", :name "fields", :type "string"}, :upload_protocol {:description "Upload protocol for media (e.g. \"raw\", \"multipart\").", :in "query", :name "upload_protocol", :type "string"}, :uploadType {:description "Legacy upload protocol for media (e.g. \"media\", \"multipart\").", :in "query", :name "uploadType", :type "string"}, :oauth_token {:description "OAuth 2.0 token for the current user.", :in "query", :name "oauth_token", :type "string"}, :prettyPrint {:default true, :description "Returns response with indentations and line breaks.", :in "query", :name "prettyPrint", :type "boolean"}, "$.xgafv" {:description "V1 error format.", :enum ["1" "2"], :in "query", :name "$.xgafv", :type "string"}, :callback {:description "JSONP", :in "query", :name "callback", :type "string"}}, :definitions {:ListJobsResponse {:description "Response message for ReportingService.ListJobs.", :properties {:jobs {:description "The list of jobs.", :items {"$ref" "#/definitions/Job"}, :type "array"}, :nextPageToken {:description "A token to retrieve next page of results.\nPass this value in the\nListJobsRequest.page_token\nfield in the subsequent call to `ListJobs` method to retrieve the next\npage of results.", :type "string"}}, :type "object"}, :ReportType {:description "A report type.", :properties {:deprecateTime {:description "The date/time when this report type was/will be deprecated.", :format "google-datetime", :type "string"}, :id {:description "The ID of the report type (max. 100 characters).", :type "string"}, :name {:description "The name of the report type (max. 100 characters).", :type "string"}, :systemManaged {:description "True if this a system-managed report type; otherwise false. Reporting jobs\nfor system-managed report types are created automatically and can thus not\nbe used in the `CreateJob` method.", :type "boolean"}}, :type "object"}, :GdataDiffVersionResponse {:description "gdata", :properties {:objectSizeBytes {:description "gdata", :format "int64", :type "string"}, :objectVersion {:description "gdata", :type "string"}}, :type "object"}, :GdataContentTypeInfo {:description "gdata", :properties {:bestGuess {:description "gdata", :type "string"}, :fromBytes {:description "gdata", :type "string"}, :fromFileName {:description "gdata", :type "string"}, :fromHeader {:description "gdata", :type "string"}, :fromUrlPath {:description "gdata", :type "string"}}, :type "object"}, :GdataMedia {:description "gdata", :properties {:path {:description "gdata", :type "string"}, :sha256Hash {:description "gdata", :format "byte", :type "string"}, :algorithm {:description "gdata", :type "string"}, :hash {:description "gdata", :type "string"}, :contentTypeInfo {"$ref" "#/definitions/GdataContentTypeInfo", :description "gdata"}, :diffChecksumsResponse {"$ref" "#/definitions/GdataDiffChecksumsResponse", :description "gdata"}, :objectId {"$ref" "#/definitions/GdataObjectId", :description "gdata"}, :crc32cHash {:description "gdata", :format "uint32", :type "integer"}, :isPotentialRetry {:description "gdata", :type "boolean"}, :diffVersionResponse {"$ref" "#/definitions/GdataDiffVersionResponse", :description "gdata"}, :blobRef {:description "gdata", :format "byte", :type "string"}, :bigstoreObjectRef {:description "gdata", :format "byte", :type "string"}, :cosmoBinaryReference {:description "gdata", :format "byte", :type "string"}, :md5Hash {:description "gdata", :format "byte", :type "string"}, :token {:description "gdata", :type "string"}, :filename {:description "gdata", :type "string"}, :diffUploadResponse {"$ref" "#/definitions/GdataDiffUploadResponse", :description "gdata"}, :sha1Hash {:description "gdata", :format "byte", :type "string"}, :diffDownloadResponse {"$ref" "#/definitions/GdataDiffDownloadResponse", :description "gdata"}, :compositeMedia {:description "gdata", :items {"$ref" "#/definitions/GdataCompositeMedia"}, :type "array"}, :referenceType {:description "gdata", :enum ["PATH" "BLOB_REF" "INLINE" "GET_MEDIA" "COMPOSITE_MEDIA" "BIGSTORE_REF" "DIFF_VERSION_RESPONSE" "DIFF_CHECKSUMS_RESPONSE" "DIFF_DOWNLOAD_RESPONSE" "DIFF_UPLOAD_REQUEST" "DIFF_UPLOAD_RESPONSE" "COSMO_BINARY_REFERENCE" "ARBITRARY_BYTES"], :type "string"}, :length {:description "gdata", :format "int64", :type "string"}, :downloadParameters {"$ref" "#/definitions/GdataDownloadParameters", :description "gdata"}, :blobstore2Info {"$ref" "#/definitions/GdataBlobstore2Info", :description "gdata"}, :hashVerified {:description "gdata", :type "boolean"}, :contentType {:description "gdata", :type "string"}, :diffUploadRequest {"$ref" "#/definitions/GdataDiffUploadRequest", :description "gdata"}, :timestamp {:description "gdata", :format "uint64", :type "string"}, :inline {:description "gdata", :format "byte", :type "string"}, :mediaId {:description "gdata", :format "byte", :type "string"}}, :type "object"}, :Report {:description "A report's metadata including the URL from which the report itself can be\ndownloaded.", :properties {:createTime {:description "The date/time when this report was created.", :format "google-datetime", :type "string"}, :downloadUrl {:description "The URL from which the report can be downloaded (max. 1000 characters).", :type "string"}, :endTime {:description "The end of the time period that the report instance covers. The value is\nexclusive.", :format "google-datetime", :type "string"}, :id {:description "The server-generated ID of the report.", :type "string"}, :jobExpireTime {:description "The date/time when the job this report belongs to will expire/expired.", :format "google-datetime", :type "string"}, :jobId {:description "The ID of the job that created this report.", :type "string"}, :startTime {:description "The start of the time period that the report instance covers. The value is\ninclusive.", :format "google-datetime", :type "string"}}, :type "object"}, :GdataDiffChecksumsResponse {:description "gdata", :properties {:checksumsLocation {"$ref" "#/definitions/GdataCompositeMedia", :description "gdata"}, :chunkSizeBytes {:description "gdata", :format "int64", :type "string"}, :objectLocation {"$ref" "#/definitions/GdataCompositeMedia", :description "gdata"}, :objectSizeBytes {:description "gdata", :format "int64", :type "string"}, :objectVersion {:description "gdata", :type "string"}}, :type "object"}, :GdataObjectId {:description "gdata", :properties {:bucketName {:description "gdata", :type "string"}, :generation {:description "gdata", :format "int64", :type "string"}, :objectName {:description "gdata", :type "string"}}, :type "object"}, :GdataDiffUploadResponse {:description "gdata", :properties {:objectVersion {:description "gdata", :type "string"}, :originalObject {"$ref" "#/definitions/GdataCompositeMedia", :description "gdata"}}, :type "object"}, :GdataDiffUploadRequest {:description "gdata", :properties {:checksumsInfo {"$ref" "#/definitions/GdataCompositeMedia", :description "gdata"}, :objectInfo {"$ref" "#/definitions/GdataCompositeMedia", :description "gdata"}, :objectVersion {:description "gdata", :type "string"}}, :type "object"}, :GdataDownloadParameters {:description "gdata", :properties {:allowGzipCompression {:description "gdata", :type "boolean"}, :ignoreRange {:description "gdata", :type "boolean"}}, :type "object"}, :GdataCompositeMedia {:description "gdata", :properties {:path {:description "gdata", :type "string"}, :objectId {"$ref" "#/definitions/GdataObjectId", :description "gdata"}, :crc32cHash {:description "gdata", :format "uint32", :type "integer"}, :blobRef {:description "gdata", :format "byte", :type "string"}, :cosmoBinaryReference {:description "gdata", :format "byte", :type "string"}, :md5Hash {:description "gdata", :format "byte", :type "string"}, :sha1Hash {:description "gdata", :format "byte", :type "string"}, :referenceType {:description "gdata", :enum ["PATH" "BLOB_REF" "INLINE" "BIGSTORE_REF" "COSMO_BINARY_REFERENCE"], :type "string"}, :length {:description "gdata", :format "int64", :type "string"}, :blobstore2Info {"$ref" "#/definitions/GdataBlobstore2Info", :description "gdata"}, :inline {:description "gdata", :format "byte", :type "string"}}, :type "object"}, :ListReportsResponse {:description "Response message for ReportingService.ListReports.", :properties {:nextPageToken {:description "A token to retrieve next page of results.\nPass this value in the\nListReportsRequest.page_token\nfield in the subsequent call to `ListReports` method to retrieve the next\npage of results.", :type "string"}, :reports {:description "The list of report types.", :items {"$ref" "#/definitions/Report"}, :type "array"}}, :type "object"}, :Empty {:description "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.", :properties {}, :type "object"}, :GdataDiffDownloadResponse {:description "gdata", :properties {:objectLocation {"$ref" "#/definitions/GdataCompositeMedia", :description "gdata"}}, :type "object"}, :Job {:description "A job creating reports of a specific type.", :properties {:createTime {:description "The creation date/time of the job.", :format "google-datetime", :type "string"}, :expireTime {:description "The date/time when this job will expire/expired. After a job expired, no\nnew reports are generated.", :format "google-datetime", :type "string"}, :id {:description "The server-generated ID of the job (max. 40 characters).", :type "string"}, :name {:description "The name of the job (max. 100 characters).", :type "string"}, :reportTypeId {:description "The type of reports this job creates. Corresponds to the ID of a\nReportType.", :type "string"}, :systemManaged {:description "True if this a system-managed job that cannot be modified by the user;\notherwise false.", :type "boolean"}}, :type "object"}, :GdataBlobstore2Info {:description "gdata", :properties {:blobGeneration {:description "gdata", :format "int64", :type "string"}, :blobId {:description "gdata", :type "string"}, :downloadReadHandle {:description "gdata", :format "byte", :type "string"}, :readToken {:description "gdata", :type "string"}, :uploadMetadataContainer {:description "gdata", :format "byte", :type "string"}}, :type "object"}, :ListReportTypesResponse {:description "Response message for ReportingService.ListReportTypes.", :properties {:nextPageToken {:description "A token to retrieve next page of results.\nPass this value in the\nListReportTypesRequest.page_token\nfield in the subsequent call to `ListReportTypes` method to retrieve the\nnext page of results.", :type "string"}, :reportTypes {:description "The list of report types.", :items {"$ref" "#/definitions/ReportType"}, :type "array"}}, :type "object"}}}