#:compute.gcp.descriptor{:name "domainsrdap", :title "Domains RDAP API", :api-version "v1", :revision "20200409", :endpoint #:compute.gcp.descriptor{:url "https://domainsrdap.googleapis.com/", :batch-path "batch", :service-path ""}, :parameters {"callback" {"type" "string", "location" "query", "description" "JSONP"}, "uploadType" {"description" "Legacy upload protocol for media (e.g. \"media\", \"multipart\").", "type" "string", "location" "query"}, "key" {"description" "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.", "type" "string", "location" "query"}, "access_token" {"location" "query", "description" "OAuth access token.", "type" "string"}, "oauth_token" {"location" "query", "description" "OAuth 2.0 token for the current user.", "type" "string"}, "prettyPrint" {"location" "query", "description" "Returns response with indentations and line breaks.", "type" "boolean", "default" "true"}, "alt" {"default" "json", "enum" ["json" "media" "proto"], "type" "string", "enumDescriptions" ["Responses with Content-Type of application/json" "Media download with context-dependent Content-Type" "Responses with Content-Type of application/x-protobuf"], "location" "query", "description" "Data format for response."}, "$.xgafv" {"enumDescriptions" ["v1 error format" "v2 error format"], "location" "query", "enum" ["1" "2"], "description" "V1 error format.", "type" "string"}, "fields" {"location" "query", "description" "Selector specifying which fields to include in a partial response.", "type" "string"}, "upload_protocol" {"location" "query", "description" "Upload protocol for media (e.g. \"raw\", \"multipart\").", "type" "string"}, "quotaUser" {"description" "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.", "type" "string", "location" "query"}}, :op->info {"domainsrdap.getHelp" #:compute.gcp.descriptor{:http-method :get, :path "v1/help", :response {"$ref" "HttpBody"}, :parameters {}, :description "Get help information for the RDAP API, including links to documentation."}, "domainsrdap.getIp" #:compute.gcp.descriptor{:http-method :get, :path "v1/ip", :response {"$ref" "HttpBody"}, :parameters {}, :description "The RDAP API recognizes this command from the RDAP specification but\ndoes not support it. The response is a formatted 501 error."}, "domainsrdap.domain.get" #:compute.gcp.descriptor{:http-method :get, :path "v1/domain/{domainId}", :response {"$ref" "HttpBody"}, :parameters {"domainName" {"pattern" "^[^/]+$", "location" "path", "description" "Full domain name to look up. Example: \"example.com\"", "required" true, "type" "string"}}, :description "Look up RDAP information for a domain by name."}, "domainsrdap.nameserver.get" #:compute.gcp.descriptor{:http-method :get, :path "v1/nameserver/{nameserverId}", :response {"$ref" "RdapResponse"}, :parameters {"nameserverId" {"required" true, "type" "string", "location" "path"}}, :description "The RDAP API recognizes this command from the RDAP specification but\ndoes not support it. The response is a formatted 501 error."}, "domainsrdap.entity.get" #:compute.gcp.descriptor{:http-method :get, :path "v1/entity/{entityId}", :response {"$ref" "RdapResponse"}, :parameters {"entityId" {"location" "path", "required" true, "type" "string"}}, :description "The RDAP API recognizes this command from the RDAP specification but\ndoes not support it. The response is a formatted 501 error."}, "domainsrdap.ip.get" #:compute.gcp.descriptor{:http-method :get, :path "v1/ip/{ipId}/{ipId1}", :response {"$ref" "RdapResponse"}, :parameters {"ipId1" {"location" "path", "required" true, "type" "string"}, "ipId" {"required" true, "type" "string", "location" "path"}}, :description "The RDAP API recognizes this command from the RDAP specification but\ndoes not support it. The response is a formatted 501 error."}, "domainsrdap.getDomains" #:compute.gcp.descriptor{:http-method :get, :path "v1/domains", :response {"$ref" "RdapResponse"}, :parameters {}, :description "The RDAP API recognizes this command from the RDAP specification but\ndoes not support it. The response is a formatted 501 error."}, "domainsrdap.getNameservers" #:compute.gcp.descriptor{:http-method :get, :path "v1/nameservers", :response {"$ref" "RdapResponse"}, :parameters {}, :description "The RDAP API recognizes this command from the RDAP specification but\ndoes not support it. The response is a formatted 501 error."}, "domainsrdap.getEntities" #:compute.gcp.descriptor{:http-method :get, :path "v1/entities", :response {"$ref" "RdapResponse"}, :parameters {}, :description "The RDAP API recognizes this command from the RDAP specification but\ndoes not support it. The response is a formatted 501 error."}, "domainsrdap.autnum.get" #:compute.gcp.descriptor{:http-method :get, :path "v1/autnum/{autnumId}", :response {"$ref" "RdapResponse"}, :parameters {"autnumId" {"location" "path", "required" true, "type" "string"}}, :description "The RDAP API recognizes this command from the RDAP specification but\ndoes not support it. The response is a formatted 501 error."}}, :schemas {"Notice" {"description" "Notices object defined in [section 4.3 of RFC\n7483](https://tools.ietf.org/html/rfc7483#section-4.3).", "type" "object", "properties" {"title" {"type" "string", "description" "Title of a notice. Example: \"Terms of Service\"."}, "description" {"type" "array", "items" {"type" "string"}, "description" "Description of the notice."}, "type" {"type" "string", "description" "Type values defined in [section 10.2.1 of RFC\n7483](https://tools.ietf.org/html/rfc7483#section-10.2.1) specific to a\nwhole response: \"result set truncated due to authorization\", \"result set\ntruncated due to excessive load\", \"result set truncated due to\nunexplainable reasons\"."}, "links" {"description" "Link to a document containing more information.", "type" "array", "items" {"$ref" "Link"}}}, "id" "Notice"}, "Link" {"id" "Link", "description" "Links object defined in [section 4.2 of RFC\n7483](https://tools.ietf.org/html/rfc7483#section-4.2).", "type" "object", "properties" {"media" {"type" "string", "description" "Media type of the link destination. Example: \"screen\"."}, "type" {"description" "Content type of the link. Example: \"application/json\".", "type" "string"}, "value" {"description" "URL giving context for the link. Example: \"http://example.com/current\".", "type" "string"}, "rel" {"description" "Relation type of a link. Example: \"previous\".", "type" "string"}, "href" {"description" "Target URL of a link. Example: \"http://example.com/previous\".", "type" "string"}, "title" {"description" "Title of this link. Example: \"title\".", "type" "string"}, "hreflang" {"description" "Language code of a link. Example: \"en\".", "type" "string"}}}, "RdapResponse" {"description" "Response to a general RDAP query.", "type" "object", "properties" {"description" {"description" "Error description.", "type" "array", "items" {"type" "string"}}, "rdapConformance" {"description" "RDAP conformance level.", "type" "array", "items" {"type" "string"}}, "jsonResponse" {"$ref" "HttpBody", "description" "HTTP response with content type set to \"application/json+rdap\"."}, "lang" {"type" "string", "description" "Error language code. Error response info fields are defined in [section 6\nof RFC 7483](https://tools.ietf.org/html/rfc7483#section-6)."}, "errorCode" {"description" "Error HTTP code. Example: \"501\".", "format" "int32", "type" "integer"}, "title" {"description" "Error title.", "type" "string"}, "notices" {"description" "Notices applying to this response.", "type" "array", "items" {"$ref" "Notice"}}}, "id" "RdapResponse"}, "HttpBody" {"type" "object", "properties" {"extensions" {"description" "Application specific response metadata. Must be set in the first response\nfor streaming APIs.", "type" "array", "items" {"additionalProperties" {"description" "Properties of the object. Contains field @type with type URL.", "type" "any"}, "type" "object"}}, "data" {"description" "The HTTP request/response body as raw binary.", "format" "byte", "type" "string"}, "contentType" {"type" "string", "description" "The HTTP Content-Type header value specifying the content type of the body."}}, "id" "HttpBody", "description" "Message that represents an arbitrary HTTP body. It should only be used for\npayload formats that can't be represented as JSON, such as raw binary or\nan HTML page.\n\n\nThis message can be used both in streaming and non-streaming API methods in\nthe request as well as the response.\n\nIt can be used as a top-level request field, which is convenient if one\nwants to extract parameters from either the URL or HTTP template into the\nrequest fields and also want access to the raw HTTP body.\n\nExample:\n\n    message GetResourceRequest {\n      // A unique request id.\n      string request_id = 1;\n\n      // The raw HTTP body is bound to this field.\n      google.api.HttpBody http_body = 2;\n    }\n\n    service ResourceService {\n      rpc GetResource(GetResourceRequest) returns (google.api.HttpBody);\n      rpc UpdateResource(google.api.HttpBody) returns\n      (google.protobuf.Empty);\n    }\n\nExample with streaming methods:\n\n    service CaldavService {\n      rpc GetCalendar(stream google.api.HttpBody)\n        returns (stream google.api.HttpBody);\n      rpc UpdateCalendar(stream google.api.HttpBody)\n        returns (stream google.api.HttpBody);\n    }\n\nUse of this type only changes how the request and response bodies are\nhandled, all other features will continue to work unchanged."}}}