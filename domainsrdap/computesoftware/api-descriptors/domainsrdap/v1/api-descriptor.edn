#:compute.api-descriptor{:endpoint {:schemes ["https"], :host "domainsrdap.googleapis.com", :base-path "/"}, :op->spec {"domainsrdap.getHelp" {:description "Get help information for the RDAP API, including links to documentation.", :responses {"200" {:description "Successful response", :schema {:$ref "#/definitions/HttpBody"}}}, :operationId "domainsrdap.getHelp", :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/v1/help", :compute.gcp.impl.descriptor/path-parameters [{:$ref "#/parameters/$.xgafv"} {:$ref "#/parameters/access_token"} {:$ref "#/parameters/alt"} {:$ref "#/parameters/callback"} {:$ref "#/parameters/fields"} {:$ref "#/parameters/key"} {:$ref "#/parameters/oauth_token"} {:$ref "#/parameters/prettyPrint"} {:$ref "#/parameters/quotaUser"} {:$ref "#/parameters/uploadType"} {:$ref "#/parameters/upload_protocol"}]}, "domainsrdap.getIp" {:description "The RDAP API recognizes this command from the RDAP specification but\ndoes not support it. The response is a formatted 501 error.", :responses {"200" {:description "Successful response", :schema {:$ref "#/definitions/HttpBody"}}}, :operationId "domainsrdap.getIp", :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/v1/ip", :compute.gcp.impl.descriptor/path-parameters [{:$ref "#/parameters/$.xgafv"} {:$ref "#/parameters/access_token"} {:$ref "#/parameters/alt"} {:$ref "#/parameters/callback"} {:$ref "#/parameters/fields"} {:$ref "#/parameters/key"} {:$ref "#/parameters/oauth_token"} {:$ref "#/parameters/prettyPrint"} {:$ref "#/parameters/quotaUser"} {:$ref "#/parameters/uploadType"} {:$ref "#/parameters/upload_protocol"}]}, "domainsrdap.domain.get" {:description "Look up RDAP information for a domain by name.", :responses {"200" {:description "Successful response", :schema {:$ref "#/definitions/HttpBody"}}}, :parameters [{:description "Full domain name to look up. Example: \"example.com\"", :in "path", :name "domainName", :required true, :type "string", :x-reservedExpansion true}], :operationId "domainsrdap.domain.get", :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/v1/domain/{domainName}", :compute.gcp.impl.descriptor/path-parameters [{:$ref "#/parameters/$.xgafv"} {:$ref "#/parameters/access_token"} {:$ref "#/parameters/alt"} {:$ref "#/parameters/callback"} {:$ref "#/parameters/fields"} {:$ref "#/parameters/key"} {:$ref "#/parameters/oauth_token"} {:$ref "#/parameters/prettyPrint"} {:$ref "#/parameters/quotaUser"} {:$ref "#/parameters/uploadType"} {:$ref "#/parameters/upload_protocol"}]}, "domainsrdap.nameserver.get" {:description "The RDAP API recognizes this command from the RDAP specification but\ndoes not support it. The response is a formatted 501 error.", :responses {"200" {:description "Successful response", :schema {:$ref "#/definitions/RdapResponse"}}}, :parameters [{:in "path", :name "nameserverId", :required true, :type "string"}], :operationId "domainsrdap.nameserver.get", :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/v1/nameserver/{nameserverId}", :compute.gcp.impl.descriptor/path-parameters [{:$ref "#/parameters/$.xgafv"} {:$ref "#/parameters/access_token"} {:$ref "#/parameters/alt"} {:$ref "#/parameters/callback"} {:$ref "#/parameters/fields"} {:$ref "#/parameters/key"} {:$ref "#/parameters/oauth_token"} {:$ref "#/parameters/prettyPrint"} {:$ref "#/parameters/quotaUser"} {:$ref "#/parameters/uploadType"} {:$ref "#/parameters/upload_protocol"}]}, "domainsrdap.entity.get" {:description "The RDAP API recognizes this command from the RDAP specification but\ndoes not support it. The response is a formatted 501 error.", :responses {"200" {:description "Successful response", :schema {:$ref "#/definitions/RdapResponse"}}}, :parameters [{:in "path", :name "entityId", :required true, :type "string"}], :operationId "domainsrdap.entity.get", :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/v1/entity/{entityId}", :compute.gcp.impl.descriptor/path-parameters [{:$ref "#/parameters/$.xgafv"} {:$ref "#/parameters/access_token"} {:$ref "#/parameters/alt"} {:$ref "#/parameters/callback"} {:$ref "#/parameters/fields"} {:$ref "#/parameters/key"} {:$ref "#/parameters/oauth_token"} {:$ref "#/parameters/prettyPrint"} {:$ref "#/parameters/quotaUser"} {:$ref "#/parameters/uploadType"} {:$ref "#/parameters/upload_protocol"}]}, "domainsrdap.ip.get" {:description "The RDAP API recognizes this command from the RDAP specification but\ndoes not support it. The response is a formatted 501 error.", :responses {"200" {:description "Successful response", :schema {:$ref "#/definitions/RdapResponse"}}}, :parameters [{:in "path", :name "ipId", :required true, :type "string"} {:in "path", :name "ipId1", :required true, :type "string"}], :operationId "domainsrdap.ip.get", :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/v1/ip/{ipId}/{ipId1}", :compute.gcp.impl.descriptor/path-parameters [{:$ref "#/parameters/$.xgafv"} {:$ref "#/parameters/access_token"} {:$ref "#/parameters/alt"} {:$ref "#/parameters/callback"} {:$ref "#/parameters/fields"} {:$ref "#/parameters/key"} {:$ref "#/parameters/oauth_token"} {:$ref "#/parameters/prettyPrint"} {:$ref "#/parameters/quotaUser"} {:$ref "#/parameters/uploadType"} {:$ref "#/parameters/upload_protocol"}]}, "domainsrdap.getDomains" {:description "The RDAP API recognizes this command from the RDAP specification but\ndoes not support it. The response is a formatted 501 error.", :responses {"200" {:description "Successful response", :schema {:$ref "#/definitions/RdapResponse"}}}, :operationId "domainsrdap.getDomains", :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/v1/domains", :compute.gcp.impl.descriptor/path-parameters [{:$ref "#/parameters/$.xgafv"} {:$ref "#/parameters/access_token"} {:$ref "#/parameters/alt"} {:$ref "#/parameters/callback"} {:$ref "#/parameters/fields"} {:$ref "#/parameters/key"} {:$ref "#/parameters/oauth_token"} {:$ref "#/parameters/prettyPrint"} {:$ref "#/parameters/quotaUser"} {:$ref "#/parameters/uploadType"} {:$ref "#/parameters/upload_protocol"}]}, "domainsrdap.getNameservers" {:description "The RDAP API recognizes this command from the RDAP specification but\ndoes not support it. The response is a formatted 501 error.", :responses {"200" {:description "Successful response", :schema {:$ref "#/definitions/RdapResponse"}}}, :operationId "domainsrdap.getNameservers", :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/v1/nameservers", :compute.gcp.impl.descriptor/path-parameters [{:$ref "#/parameters/$.xgafv"} {:$ref "#/parameters/access_token"} {:$ref "#/parameters/alt"} {:$ref "#/parameters/callback"} {:$ref "#/parameters/fields"} {:$ref "#/parameters/key"} {:$ref "#/parameters/oauth_token"} {:$ref "#/parameters/prettyPrint"} {:$ref "#/parameters/quotaUser"} {:$ref "#/parameters/uploadType"} {:$ref "#/parameters/upload_protocol"}]}, "domainsrdap.getEntities" {:description "The RDAP API recognizes this command from the RDAP specification but\ndoes not support it. The response is a formatted 501 error.", :responses {"200" {:description "Successful response", :schema {:$ref "#/definitions/RdapResponse"}}}, :operationId "domainsrdap.getEntities", :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/v1/entities", :compute.gcp.impl.descriptor/path-parameters [{:$ref "#/parameters/$.xgafv"} {:$ref "#/parameters/access_token"} {:$ref "#/parameters/alt"} {:$ref "#/parameters/callback"} {:$ref "#/parameters/fields"} {:$ref "#/parameters/key"} {:$ref "#/parameters/oauth_token"} {:$ref "#/parameters/prettyPrint"} {:$ref "#/parameters/quotaUser"} {:$ref "#/parameters/uploadType"} {:$ref "#/parameters/upload_protocol"}]}, "domainsrdap.autnum.get" {:description "The RDAP API recognizes this command from the RDAP specification but\ndoes not support it. The response is a formatted 501 error.", :responses {"200" {:description "Successful response", :schema {:$ref "#/definitions/RdapResponse"}}}, :parameters [{:in "path", :name "autnumId", :required true, :type "string"}], :operationId "domainsrdap.autnum.get", :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/v1/autnum/{autnumId}", :compute.gcp.impl.descriptor/path-parameters [{:$ref "#/parameters/$.xgafv"} {:$ref "#/parameters/access_token"} {:$ref "#/parameters/alt"} {:$ref "#/parameters/callback"} {:$ref "#/parameters/fields"} {:$ref "#/parameters/key"} {:$ref "#/parameters/oauth_token"} {:$ref "#/parameters/prettyPrint"} {:$ref "#/parameters/quotaUser"} {:$ref "#/parameters/uploadType"} {:$ref "#/parameters/upload_protocol"}]}}, :parameters {:quotaUser {:description "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.", :in "query", :name "quotaUser", :type "string"}, :key {:description "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.", :in "query", :name "key", :type "string"}, :alt {:default "json", :description "Data format for response.", :enum ["json" "media" "proto"], :in "query", :name "alt", :type "string"}, :access_token {:description "OAuth access token.", :in "query", :name "access_token", :type "string"}, :fields {:description "Selector specifying which fields to include in a partial response.", :in "query", :name "fields", :type "string"}, :upload_protocol {:description "Upload protocol for media (e.g. \"raw\", \"multipart\").", :in "query", :name "upload_protocol", :type "string"}, :uploadType {:description "Legacy upload protocol for media (e.g. \"media\", \"multipart\").", :in "query", :name "uploadType", :type "string"}, :oauth_token {:description "OAuth 2.0 token for the current user.", :in "query", :name "oauth_token", :type "string"}, :prettyPrint {:default true, :description "Returns response with indentations and line breaks.", :in "query", :name "prettyPrint", :type "boolean"}, "$.xgafv" {:description "V1 error format.", :enum ["1" "2"], :in "query", :name "$.xgafv", :type "string"}, :callback {:description "JSONP", :in "query", :name "callback", :type "string"}}, :definitions {:HttpBody {:description "Message that represents an arbitrary HTTP body. It should only be used for\npayload formats that can't be represented as JSON, such as raw binary or\nan HTML page.\n\n\nThis message can be used both in streaming and non-streaming API methods in\nthe request as well as the response.\n\nIt can be used as a top-level request field, which is convenient if one\nwants to extract parameters from either the URL or HTTP template into the\nrequest fields and also want access to the raw HTTP body.\n\nExample:\n\n    message GetResourceRequest {\n      // A unique request id.\n      string request_id = 1;\n\n      // The raw HTTP body is bound to this field.\n      google.api.HttpBody http_body = 2;\n    }\n\n    service ResourceService {\n      rpc GetResource(GetResourceRequest) returns (google.api.HttpBody);\n      rpc UpdateResource(google.api.HttpBody) returns\n      (google.protobuf.Empty);\n    }\n\nExample with streaming methods:\n\n    service CaldavService {\n      rpc GetCalendar(stream google.api.HttpBody)\n        returns (stream google.api.HttpBody);\n      rpc UpdateCalendar(stream google.api.HttpBody)\n        returns (stream google.api.HttpBody);\n    }\n\nUse of this type only changes how the request and response bodies are\nhandled, all other features will continue to work unchanged.", :properties {:contentType {:description "The HTTP Content-Type header value specifying the content type of the body.", :type "string"}, :data {:description "The HTTP request/response body as raw binary.", :format "byte", :type "string"}, :extensions {:description "Application specific response metadata. Must be set in the first response\nfor streaming APIs.", :items {:additionalProperties {:description "Properties of the object. Contains field @type with type URL."}, :type "object"}, :type "array"}}, :type "object"}, :Link {:description "Links object defined in [section 4.2 of RFC\n7483](https://tools.ietf.org/html/rfc7483#section-4.2).", :properties {:href {:description "Target URL of a link. Example: \"http://example.com/previous\".", :type "string"}, :hreflang {:description "Language code of a link. Example: \"en\".", :type "string"}, :media {:description "Media type of the link destination. Example: \"screen\".", :type "string"}, :rel {:description "Relation type of a link. Example: \"previous\".", :type "string"}, :title {:description "Title of this link. Example: \"title\".", :type "string"}, :type {:description "Content type of the link. Example: \"application/json\".", :type "string"}, :value {:description "URL giving context for the link. Example: \"http://example.com/current\".", :type "string"}}, :type "object"}, :Notice {:description "Notices object defined in [section 4.3 of RFC\n7483](https://tools.ietf.org/html/rfc7483#section-4.3).", :properties {:description {:description "Description of the notice.", :items {:type "string"}, :type "array"}, :links {:description "Link to a document containing more information.", :items {:$ref "#/definitions/Link"}, :type "array"}, :title {:description "Title of a notice. Example: \"Terms of Service\".", :type "string"}, :type {:description "Type values defined in [section 10.2.1 of RFC\n7483](https://tools.ietf.org/html/rfc7483#section-10.2.1) specific to a\nwhole response: \"result set truncated due to authorization\", \"result set\ntruncated due to excessive load\", \"result set truncated due to\nunexplainable reasons\".", :type "string"}}, :type "object"}, :RdapResponse {:description "Response to a general RDAP query.", :properties {:description {:description "Error description.", :items {:type "string"}, :type "array"}, :errorCode {:description "Error HTTP code. Example: \"501\".", :format "int32", :type "integer"}, :jsonResponse {:$ref "#/definitions/HttpBody", :description "HTTP response with content type set to \"application/json+rdap\"."}, :lang {:description "Error language code. Error response info fields are defined in [section 6\nof RFC 7483](https://tools.ietf.org/html/rfc7483#section-6).", :type "string"}, :notices {:description "Notices applying to this response.", :items {:$ref "#/definitions/Notice"}, :type "array"}, :rdapConformance {:description "RDAP conformance level.", :items {:type "string"}, :type "array"}, :title {:description "Error title.", :type "string"}}, :type "object"}}}