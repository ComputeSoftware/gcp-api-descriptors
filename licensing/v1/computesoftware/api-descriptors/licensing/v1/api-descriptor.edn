#:compute.gcp.descriptor{:name "licensing", :title "Enterprise License Manager API", :api-version "v1", :revision "20210301", :endpoint #:compute.gcp.descriptor{:url "https://licensing.googleapis.com/", :batch-path "batch", :service-path ""}, :parameters {"callback" {"location" "query", "description" "JSONP", "type" "string"}, "uploadType" {"location" "query", "description" "Legacy upload protocol for media (e.g. \"media\", \"multipart\").", "type" "string"}, "key" {"description" "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.", "location" "query", "type" "string"}, "access_token" {"type" "string", "location" "query", "description" "OAuth access token."}, "oauth_token" {"type" "string", "description" "OAuth 2.0 token for the current user.", "location" "query"}, "prettyPrint" {"default" "true", "description" "Returns response with indentations and line breaks.", "type" "boolean", "location" "query"}, "alt" {"description" "Data format for response.", "enumDescriptions" ["Responses with Content-Type of application/json" "Media download with context-dependent Content-Type" "Responses with Content-Type of application/x-protobuf"], "location" "query", "default" "json", "enum" ["json" "media" "proto"], "type" "string"}, "$.xgafv" {"enum" ["1" "2"], "location" "query", "type" "string", "enumDescriptions" ["v1 error format" "v2 error format"], "description" "V1 error format."}, "fields" {"description" "Selector specifying which fields to include in a partial response.", "type" "string", "location" "query"}, "upload_protocol" {"location" "query", "type" "string", "description" "Upload protocol for media (e.g. \"raw\", \"multipart\")."}, "quotaUser" {"description" "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.", "location" "query", "type" "string"}}, :op->info {"licensing.licenseAssignments.insert" #:compute.gcp.descriptor{:http-method :post, :path "apps/licensing/v1/product/{productId}/sku/{skuId}/user", :request {"$ref" "LicenseAssignmentInsert"}, :response {"$ref" "LicenseAssignment"}, :parameters {"skuId" {"description" "A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs.", "required" true, "location" "path", "type" "string"}, "productId" {"type" "string", "location" "path", "description" "A product's unique identifier. For more information about products in this version of the API, see Products and SKUs.", "required" true}}, :description "Assign a license."}, "licensing.licenseAssignments.listForProduct" #:compute.gcp.descriptor{:http-method :get, :path "apps/licensing/v1/product/{productId}/users", :response {"$ref" "LicenseAssignmentList"}, :parameters {"pageToken" {"description" "Token to fetch the next page of data. The `maxResults` query string is related to the `pageToken` since `maxResults` determines how many entries are returned on each page. This is an optional query string. If not specified, the server returns the first page.", "default" "", "type" "string", "location" "query"}, "maxResults" {"format" "uint32", "maximum" "1000", "location" "query", "description" "The `maxResults` query string determines how many entries are returned on each page of a large response. This is an optional parameter. The value must be a positive number.", "minimum" "1", "type" "integer", "default" "100"}, "customerId" {"description" "Customer's `customerId`. A previous version of this API accepted the primary domain name as a value for this field. If the customer is suspended, the server returns an error.", "required" true, "location" "query", "type" "string"}, "productId" {"description" "A product's unique identifier. For more information about products in this version of the API, see Products and SKUs.", "location" "path", "required" true, "type" "string"}}, :description "List all users assigned licenses for a specific product SKU."}, "licensing.licenseAssignments.get" #:compute.gcp.descriptor{:http-method :get, :path "apps/licensing/v1/product/{productId}/sku/{skuId}/user/{userId}", :response {"$ref" "LicenseAssignment"}, :parameters {"userId" {"description" "The user's current primary email address. If the user's email address changes, use the new email address in your API requests. Since a `userId` is subject to change, do not use a `userId` value as a key for persistent data. This key could break if the current user's email address changes. If the `userId` is suspended, the license status changes.", "location" "path", "required" true, "type" "string"}, "skuId" {"location" "path", "required" true, "description" "A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs.", "type" "string"}, "productId" {"required" true, "type" "string", "location" "path", "description" "A product's unique identifier. For more information about products in this version of the API, see Products and SKUs."}}, :description "Get a specific user's license by product SKU."}, "licensing.licenseAssignments.listForProductAndSku" #:compute.gcp.descriptor{:http-method :get, :path "apps/licensing/v1/product/{productId}/sku/{skuId}/users", :response {"$ref" "LicenseAssignmentList"}, :parameters {"pageToken" {"description" "Token to fetch the next page of data. The `maxResults` query string is related to the `pageToken` since `maxResults` determines how many entries are returned on each page. This is an optional query string. If not specified, the server returns the first page.", "type" "string", "location" "query", "default" ""}, "productId" {"location" "path", "description" "A product's unique identifier. For more information about products in this version of the API, see Products and SKUs.", "type" "string", "required" true}, "maxResults" {"minimum" "1", "description" "The `maxResults` query string determines how many entries are returned on each page of a large response. This is an optional parameter. The value must be a positive number.", "location" "query", "type" "integer", "maximum" "1000", "format" "uint32", "default" "100"}, "customerId" {"type" "string", "required" true, "location" "query", "description" "Customer's `customerId`. A previous version of this API accepted the primary domain name as a value for this field. If the customer is suspended, the server returns an error."}, "skuId" {"description" "A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs.", "required" true, "type" "string", "location" "path"}}, :description "List all users assigned licenses for a specific product SKU."}, "licensing.licenseAssignments.delete" #:compute.gcp.descriptor{:http-method :delete, :path "apps/licensing/v1/product/{productId}/sku/{skuId}/user/{userId}", :response {"$ref" "Empty"}, :parameters {"productId" {"location" "path", "required" true, "type" "string", "description" "A product's unique identifier. For more information about products in this version of the API, see Products and SKUs."}, "skuId" {"description" "A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs.", "location" "path", "required" true, "type" "string"}, "userId" {"required" true, "description" "The user's current primary email address. If the user's email address changes, use the new email address in your API requests. Since a `userId` is subject to change, do not use a `userId` value as a key for persistent data. This key could break if the current user's email address changes. If the `userId` is suspended, the license status changes.", "location" "path", "type" "string"}}, :description "Revoke a license."}, "licensing.licenseAssignments.patch" #:compute.gcp.descriptor{:http-method :patch, :path "apps/licensing/v1/product/{productId}/sku/{skuId}/user/{userId}", :request {"$ref" "LicenseAssignment"}, :response {"$ref" "LicenseAssignment"}, :parameters {"skuId" {"location" "path", "description" "A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs.", "type" "string", "required" true}, "productId" {"required" true, "location" "path", "description" "A product's unique identifier. For more information about products in this version of the API, see Products and SKUs.", "type" "string"}, "userId" {"type" "string", "required" true, "description" "The user's current primary email address. If the user's email address changes, use the new email address in your API requests. Since a `userId` is subject to change, do not use a `userId` value as a key for persistent data. This key could break if the current user's email address changes. If the `userId` is suspended, the license status changes.", "location" "path"}}, :description "Reassign a user's product SKU with a different SKU in the same product. This method supports patch semantics."}, "licensing.licenseAssignments.update" #:compute.gcp.descriptor{:http-method :put, :path "apps/licensing/v1/product/{productId}/sku/{skuId}/user/{userId}", :request {"$ref" "LicenseAssignment"}, :response {"$ref" "LicenseAssignment"}, :parameters {"productId" {"location" "path", "type" "string", "description" "A product's unique identifier. For more information about products in this version of the API, see Products and SKUs.", "required" true}, "skuId" {"description" "A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs.", "type" "string", "location" "path", "required" true}, "userId" {"type" "string", "required" true, "location" "path", "description" "The user's current primary email address. If the user's email address changes, use the new email address in your API requests. Since a `userId` is subject to change, do not use a `userId` value as a key for persistent data. This key could break if the current user's email address changes. If the `userId` is suspended, the license status changes."}}, :description "Reassign a user's product SKU with a different SKU in the same product."}}, :schemas {"LicenseAssignmentList" {"id" "LicenseAssignmentList", "type" "object", "properties" {"etag" {"type" "string", "description" "ETag of the resource."}, "items" {"type" "array", "description" "The LicenseAssignments in this page of results.", "items" {"$ref" "LicenseAssignment"}}, "kind" {"default" "licensing#licenseAssignmentList", "description" "Identifies the resource as a collection of LicenseAssignments.", "type" "string"}, "nextPageToken" {"description" "The token that you must submit in a subsequent request to retrieve additional license results matching your query parameters. The `maxResults` query string is related to the `nextPageToken` since `maxResults` determines how many entries are returned on each next page.", "type" "string"}}}, "LicenseAssignmentInsert" {"properties" {"userId" {"description" "Email id of the user", "annotations" {"required" ["licensing.licenseAssignments.insert"]}, "type" "string"}}, "type" "object", "description" "Representation of a license assignment.", "id" "LicenseAssignmentInsert"}, "Empty" {"id" "Empty", "properties" {}, "type" "object", "description" "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."}, "LicenseAssignment" {"properties" {"productName" {"type" "string", "description" "Display Name of the product."}, "kind" {"description" "Identifies the resource as a LicenseAssignment, which is `licensing#licenseAssignment`.", "type" "string", "default" "licensing#licenseAssignment"}, "userId" {"description" "The user's current primary email address. If the user's email address changes, use the new email address in your API requests. Since a `userId` is subject to change, do not use a `userId` value as a key for persistent data. This key could break if the current user's email address changes. If the `userId` is suspended, the license status changes.", "type" "string", "annotations" {"required" ["licensing.licenseAssignments.update"]}}, "skuName" {"type" "string", "description" "Display Name of the sku of the product."}, "productId" {"annotations" {"required" ["licensing.licenseAssignments.update"]}, "description" "A product's unique identifier. For more information about products in this version of the API, see Product and SKU IDs.", "type" "string"}, "etags" {"description" "ETag of the resource.", "type" "string"}, "skuId" {"type" "string", "annotations" {"required" ["licensing.licenseAssignments.update"]}, "description" "A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs."}, "selfLink" {"type" "string", "description" "Link to this page."}}, "id" "LicenseAssignment", "description" "Representation of a license assignment.", "type" "object"}}}