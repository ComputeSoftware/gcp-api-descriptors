#:compute.gcp.descriptor{:name "datastore", :title "Cloud Datastore API", :api-version "v1beta1", :revision "20201003", :endpoint #:compute.gcp.descriptor{:url "https://datastore.googleapis.com/", :batch-path "batch", :service-path ""}, :parameters {"callback" {"type" "string", "location" "query", "description" "JSONP"}, "uploadType" {"type" "string", "location" "query", "description" "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."}, "key" {"location" "query", "description" "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.", "type" "string"}, "access_token" {"description" "OAuth access token.", "type" "string", "location" "query"}, "oauth_token" {"location" "query", "type" "string", "description" "OAuth 2.0 token for the current user."}, "prettyPrint" {"type" "boolean", "location" "query", "default" "true", "description" "Returns response with indentations and line breaks."}, "alt" {"default" "json", "location" "query", "description" "Data format for response.", "enum" ["json" "media" "proto"], "type" "string", "enumDescriptions" ["Responses with Content-Type of application/json" "Media download with context-dependent Content-Type" "Responses with Content-Type of application/x-protobuf"]}, "$.xgafv" {"location" "query", "description" "V1 error format.", "type" "string", "enum" ["1" "2"], "enumDescriptions" ["v1 error format" "v2 error format"]}, "fields" {"description" "Selector specifying which fields to include in a partial response.", "location" "query", "type" "string"}, "upload_protocol" {"description" "Upload protocol for media (e.g. \"raw\", \"multipart\").", "type" "string", "location" "query"}, "quotaUser" {"location" "query", "type" "string", "description" "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."}}, :op->info {"datastore.projects.import" #:compute.gcp.descriptor{:http-method :post, :path "v1beta1/projects/{projectId}:import", :request {"$ref" "GoogleDatastoreAdminV1beta1ImportEntitiesRequest"}, :response {"$ref" "GoogleLongrunningOperation"}, :parameters {"projectId" {"location" "path", "type" "string", "required" true, "description" "Project ID against which to make the request."}}, :description "Imports entities into Google Cloud Datastore. Existing entities with the same key are overwritten. The import occurs in the background and its progress can be monitored and managed via the Operation resource that is created. If an ImportEntities operation is cancelled, it is possible that a subset of the data has already been imported to Cloud Datastore."}, "datastore.projects.export" #:compute.gcp.descriptor{:http-method :post, :path "v1beta1/projects/{projectId}:export", :request {"$ref" "GoogleDatastoreAdminV1beta1ExportEntitiesRequest"}, :response {"$ref" "GoogleLongrunningOperation"}, :parameters {"projectId" {"description" "Project ID against which to make the request.", "required" true, "type" "string", "location" "path"}}, :description "Exports a copy of all or a subset of entities from Google Cloud Datastore to another storage system, such as Google Cloud Storage. Recent updates to entities may not be reflected in the export. The export occurs in the background and its progress can be monitored and managed via the Operation resource that is created. The output of an export may only be used once the associated operation is done. If an export operation is cancelled before completion it may leave partial data behind in Google Cloud Storage."}}, :schemas {"GoogleDatastoreAdminV1beta1ImportEntitiesRequest" {"type" "object", "properties" {"entityFilter" {"description" "Optionally specify which kinds/namespaces are to be imported. If provided, the list must be a subset of the EntityFilter used in creating the export, otherwise a FAILED_PRECONDITION error will be returned. If no filter is specified then all entities from the export are imported.", "$ref" "GoogleDatastoreAdminV1beta1EntityFilter"}, "labels" {"additionalProperties" {"type" "string"}, "description" "Client-assigned labels.", "type" "object"}, "inputUrl" {"description" "The full resource URL of the external storage location. Currently, only Google Cloud Storage is supported. So input_url should be of the form: `gs://BUCKET_NAME[/NAMESPACE_PATH]/OVERALL_EXPORT_METADATA_FILE`, where `BUCKET_NAME` is the name of the Cloud Storage bucket, `NAMESPACE_PATH` is an optional Cloud Storage namespace path (this is not a Cloud Datastore namespace), and `OVERALL_EXPORT_METADATA_FILE` is the metadata file written by the ExportEntities operation. For more information about Cloud Storage namespace paths, see [Object name considerations](https://cloud.google.com/storage/docs/naming#object-considerations). For more information, see google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url.", "type" "string"}}, "id" "GoogleDatastoreAdminV1beta1ImportEntitiesRequest", "description" "The request for google.datastore.admin.v1beta1.DatastoreAdmin.ImportEntities."}, "GoogleDatastoreAdminV1beta1ExportEntitiesRequest" {"description" "The request for google.datastore.admin.v1beta1.DatastoreAdmin.ExportEntities.", "properties" {"entityFilter" {"description" "Description of what data from the project is included in the export.", "$ref" "GoogleDatastoreAdminV1beta1EntityFilter"}, "outputUrlPrefix" {"type" "string", "description" "Location for the export metadata and data files. The full resource URL of the external storage location. Currently, only Google Cloud Storage is supported. So output_url_prefix should be of the form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name of the Cloud Storage bucket and `NAMESPACE_PATH` is an optional Cloud Storage namespace path (this is not a Cloud Datastore namespace). For more information about Cloud Storage namespace paths, see [Object name considerations](https://cloud.google.com/storage/docs/naming#object-considerations). The resulting files will be nested deeper than the specified URL prefix. The final output URL will be provided in the google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url field. That value should be used for subsequent ImportEntities operations. By nesting the data files deeper, the same Cloud Storage bucket can be used in multiple ExportEntities operations without conflict."}, "labels" {"description" "Client-assigned labels.", "type" "object", "additionalProperties" {"type" "string"}}}, "type" "object", "id" "GoogleDatastoreAdminV1beta1ExportEntitiesRequest"}, "GoogleDatastoreAdminV1CommonMetadata" {"type" "object", "properties" {"operationType" {"enum" ["OPERATION_TYPE_UNSPECIFIED" "EXPORT_ENTITIES" "IMPORT_ENTITIES" "CREATE_INDEX" "DELETE_INDEX"], "enumDescriptions" ["Unspecified." "ExportEntities." "ImportEntities." "CreateIndex." "DeleteIndex."], "type" "string", "description" "The type of the operation. Can be used as a filter in ListOperationsRequest."}, "endTime" {"type" "string", "format" "google-datetime", "description" "The time the operation ended, either successfully or otherwise."}, "startTime" {"format" "google-datetime", "description" "The time that work began on the operation.", "type" "string"}, "state" {"description" "The current state of the Operation.", "enum" ["STATE_UNSPECIFIED" "INITIALIZING" "PROCESSING" "CANCELLING" "FINALIZING" "SUCCESSFUL" "FAILED" "CANCELLED"], "type" "string", "enumDescriptions" ["Unspecified." "Request is being prepared for processing." "Request is actively being processed." "Request is in the process of being cancelled after user called google.longrunning.Operations.CancelOperation on the operation." "Request has been processed and is in its finalization stage." "Request has completed successfully." "Request has finished being processed, but encountered an error." "Request has finished being cancelled after user called google.longrunning.Operations.CancelOperation."]}, "labels" {"description" "The client-assigned labels which were provided when the operation was created. May also include additional labels.", "additionalProperties" {"type" "string"}, "type" "object"}}, "description" "Metadata common to all Datastore Admin operations.", "id" "GoogleDatastoreAdminV1CommonMetadata"}, "GoogleDatastoreAdminV1Progress" {"properties" {"workEstimated" {"type" "string", "description" "An estimate of how much work needs to be performed. May be zero if the work estimate is unavailable.", "format" "int64"}, "workCompleted" {"description" "The amount of work that has been completed. Note that this may be greater than work_estimated.", "format" "int64", "type" "string"}}, "id" "GoogleDatastoreAdminV1Progress", "type" "object", "description" "Measures the progress of a particular metric."}, "GoogleDatastoreAdminV1beta1ExportEntitiesMetadata" {"type" "object", "description" "Metadata for ExportEntities operations.", "id" "GoogleDatastoreAdminV1beta1ExportEntitiesMetadata", "properties" {"common" {"description" "Metadata common to all Datastore Admin operations.", "$ref" "GoogleDatastoreAdminV1beta1CommonMetadata"}, "progressBytes" {"description" "An estimate of the number of bytes processed.", "$ref" "GoogleDatastoreAdminV1beta1Progress"}, "outputUrlPrefix" {"type" "string", "description" "Location for the export metadata and data files. This will be the same value as the google.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix field. The final output location is provided in google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url."}, "entityFilter" {"description" "Description of which entities are being exported.", "$ref" "GoogleDatastoreAdminV1beta1EntityFilter"}, "progressEntities" {"$ref" "GoogleDatastoreAdminV1beta1Progress", "description" "An estimate of the number of entities processed."}}}, "GoogleDatastoreAdminV1beta1ExportEntitiesResponse" {"description" "The response for google.datastore.admin.v1beta1.DatastoreAdmin.ExportEntities.", "id" "GoogleDatastoreAdminV1beta1ExportEntitiesResponse", "type" "object", "properties" {"outputUrl" {"type" "string", "description" "Location of the output metadata file. This can be used to begin an import into Cloud Datastore (this project or another project). See google.datastore.admin.v1beta1.ImportEntitiesRequest.input_url. Only present if the operation completed successfully."}}}, "GoogleDatastoreAdminV1ExportEntitiesMetadata" {"id" "GoogleDatastoreAdminV1ExportEntitiesMetadata", "description" "Metadata for ExportEntities operations.", "properties" {"common" {"$ref" "GoogleDatastoreAdminV1CommonMetadata", "description" "Metadata common to all Datastore Admin operations."}, "progressEntities" {"description" "An estimate of the number of entities processed.", "$ref" "GoogleDatastoreAdminV1Progress"}, "entityFilter" {"description" "Description of which entities are being exported.", "$ref" "GoogleDatastoreAdminV1EntityFilter"}, "outputUrlPrefix" {"description" "Location for the export metadata and data files. This will be the same value as the google.datastore.admin.v1.ExportEntitiesRequest.output_url_prefix field. The final output location is provided in google.datastore.admin.v1.ExportEntitiesResponse.output_url.", "type" "string"}, "progressBytes" {"$ref" "GoogleDatastoreAdminV1Progress", "description" "An estimate of the number of bytes processed."}}, "type" "object"}, "GoogleDatastoreAdminV1EntityFilter" {"properties" {"namespaceIds" {"type" "array", "description" "An empty list represents all namespaces. This is the preferred usage for projects that don't use namespaces. An empty string element represents the default namespace. This should be used if the project has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique.", "items" {"type" "string"}}, "kinds" {"description" "If empty, then this represents all kinds.", "type" "array", "items" {"type" "string"}}}, "type" "object", "id" "GoogleDatastoreAdminV1EntityFilter", "description" "Identifies a subset of entities in a project. This is specified as combinations of kinds and namespaces (either or both of which may be all, as described in the following examples). Example usage: Entire project: kinds=[], namespace_ids=[] Kinds Foo and Bar in all namespaces: kinds=['Foo', 'Bar'], namespace_ids=[] Kinds Foo and Bar only in the default namespace: kinds=['Foo', 'Bar'], namespace_ids=[''] Kinds Foo and Bar in both the default and Baz namespaces: kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz'] The entire Baz namespace: kinds=[], namespace_ids=['Baz']"}, "Status" {"id" "Status", "description" "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).", "type" "object", "properties" {"message" {"description" "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.", "type" "string"}, "details" {"description" "A list of messages that carry the error details. There is a common set of message types for APIs to use.", "type" "array", "items" {"type" "object", "additionalProperties" {"description" "Properties of the object. Contains field @type with type URL.", "type" "any"}}}, "code" {"type" "integer", "format" "int32", "description" "The status code, which should be an enum value of google.rpc.Code."}}}, "GoogleLongrunningOperation" {"description" "This resource represents a long-running operation that is the result of a network API call.", "id" "GoogleLongrunningOperation", "type" "object", "properties" {"metadata" {"type" "object", "additionalProperties" {"description" "Properties of the object. Contains field @type with type URL.", "type" "any"}, "description" "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any."}, "name" {"description" "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.", "type" "string"}, "error" {"$ref" "Status", "description" "The error result of the operation in case of failure or cancellation."}, "response" {"additionalProperties" {"type" "any", "description" "Properties of the object. Contains field @type with type URL."}, "type" "object", "description" "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."}, "done" {"description" "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.", "type" "boolean"}}}, "GoogleDatastoreAdminV1ExportEntitiesResponse" {"type" "object", "id" "GoogleDatastoreAdminV1ExportEntitiesResponse", "properties" {"outputUrl" {"description" "Location of the output metadata file. This can be used to begin an import into Cloud Datastore (this project or another project). See google.datastore.admin.v1.ImportEntitiesRequest.input_url. Only present if the operation completed successfully.", "type" "string"}}, "description" "The response for google.datastore.admin.v1.DatastoreAdmin.ExportEntities."}, "GoogleDatastoreAdminV1ImportEntitiesMetadata" {"type" "object", "properties" {"entityFilter" {"description" "Description of which entities are being imported.", "$ref" "GoogleDatastoreAdminV1EntityFilter"}, "common" {"description" "Metadata common to all Datastore Admin operations.", "$ref" "GoogleDatastoreAdminV1CommonMetadata"}, "progressBytes" {"description" "An estimate of the number of bytes processed.", "$ref" "GoogleDatastoreAdminV1Progress"}, "progressEntities" {"description" "An estimate of the number of entities processed.", "$ref" "GoogleDatastoreAdminV1Progress"}, "inputUrl" {"type" "string", "description" "The location of the import metadata file. This will be the same value as the google.datastore.admin.v1.ExportEntitiesResponse.output_url field."}}, "description" "Metadata for ImportEntities operations.", "id" "GoogleDatastoreAdminV1ImportEntitiesMetadata"}, "GoogleDatastoreAdminV1beta1EntityFilter" {"description" "Identifies a subset of entities in a project. This is specified as combinations of kinds and namespaces (either or both of which may be all, as described in the following examples). Example usage: Entire project: kinds=[], namespace_ids=[] Kinds Foo and Bar in all namespaces: kinds=['Foo', 'Bar'], namespace_ids=[] Kinds Foo and Bar only in the default namespace: kinds=['Foo', 'Bar'], namespace_ids=[''] Kinds Foo and Bar in both the default and Baz namespaces: kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz'] The entire Baz namespace: kinds=[], namespace_ids=['Baz']", "id" "GoogleDatastoreAdminV1beta1EntityFilter", "properties" {"namespaceIds" {"description" "An empty list represents all namespaces. This is the preferred usage for projects that don't use namespaces. An empty string element represents the default namespace. This should be used if the project has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique.", "type" "array", "items" {"type" "string"}}, "kinds" {"type" "array", "description" "If empty, then this represents all kinds.", "items" {"type" "string"}}}, "type" "object"}, "GoogleDatastoreAdminV1beta1Progress" {"id" "GoogleDatastoreAdminV1beta1Progress", "properties" {"workCompleted" {"description" "The amount of work that has been completed. Note that this may be greater than work_estimated.", "type" "string", "format" "int64"}, "workEstimated" {"type" "string", "description" "An estimate of how much work needs to be performed. May be zero if the work estimate is unavailable.", "format" "int64"}}, "type" "object", "description" "Measures the progress of a particular metric."}, "GoogleDatastoreAdminV1IndexOperationMetadata" {"properties" {"indexId" {"description" "The index resource ID that this operation is acting on.", "type" "string"}, "progressEntities" {"$ref" "GoogleDatastoreAdminV1Progress", "description" "An estimate of the number of entities processed."}, "common" {"description" "Metadata common to all Datastore Admin operations.", "$ref" "GoogleDatastoreAdminV1CommonMetadata"}}, "description" "Metadata for Index operations.", "type" "object", "id" "GoogleDatastoreAdminV1IndexOperationMetadata"}, "GoogleDatastoreAdminV1beta1CommonMetadata" {"description" "Metadata common to all Datastore Admin operations.", "properties" {"startTime" {"format" "google-datetime", "description" "The time that work began on the operation.", "type" "string"}, "labels" {"additionalProperties" {"type" "string"}, "description" "The client-assigned labels which were provided when the operation was created. May also include additional labels.", "type" "object"}, "operationType" {"enumDescriptions" ["Unspecified." "ExportEntities." "ImportEntities."], "enum" ["OPERATION_TYPE_UNSPECIFIED" "EXPORT_ENTITIES" "IMPORT_ENTITIES"], "description" "The type of the operation. Can be used as a filter in ListOperationsRequest.", "type" "string"}, "state" {"enum" ["STATE_UNSPECIFIED" "INITIALIZING" "PROCESSING" "CANCELLING" "FINALIZING" "SUCCESSFUL" "FAILED" "CANCELLED"], "type" "string", "description" "The current state of the Operation.", "enumDescriptions" ["Unspecified." "Request is being prepared for processing." "Request is actively being processed." "Request is in the process of being cancelled after user called google.longrunning.Operations.CancelOperation on the operation." "Request has been processed and is in its finalization stage." "Request has completed successfully." "Request has finished being processed, but encountered an error." "Request has finished being cancelled after user called google.longrunning.Operations.CancelOperation."]}, "endTime" {"type" "string", "format" "google-datetime", "description" "The time the operation ended, either successfully or otherwise."}}, "type" "object", "id" "GoogleDatastoreAdminV1beta1CommonMetadata"}, "GoogleDatastoreAdminV1beta1ImportEntitiesMetadata" {"id" "GoogleDatastoreAdminV1beta1ImportEntitiesMetadata", "description" "Metadata for ImportEntities operations.", "properties" {"progressEntities" {"$ref" "GoogleDatastoreAdminV1beta1Progress", "description" "An estimate of the number of entities processed."}, "common" {"description" "Metadata common to all Datastore Admin operations.", "$ref" "GoogleDatastoreAdminV1beta1CommonMetadata"}, "entityFilter" {"$ref" "GoogleDatastoreAdminV1beta1EntityFilter", "description" "Description of which entities are being imported."}, "progressBytes" {"description" "An estimate of the number of bytes processed.", "$ref" "GoogleDatastoreAdminV1beta1Progress"}, "inputUrl" {"description" "The location of the import metadata file. This will be the same value as the google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url field.", "type" "string"}}, "type" "object"}}}