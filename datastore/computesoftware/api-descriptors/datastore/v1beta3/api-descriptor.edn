#:compute.api-descriptor{:endpoint #:compute.gcp.impl.descriptor{:url "https://datastore.googleapis.com/"}, :op->spec {"datastore.projects.allocateIds" {:operationId "datastore.projects.allocateIds", :description "Allocates IDs for the given keys, which is useful for referencing an entity\nbefore it is inserted.", :parameters [{:description "Required. The ID of the project against which to make the request.", :in "path", :name "projectId", :required true, :schema {:type "string"}}], :requestBody {:content {"application/json" {:schema {:$ref "#/components/schemas/AllocateIdsRequest"}}}}, :compute.gcp.impl.descriptor/http-method :post, :compute.gcp.impl.descriptor/http-path "/v1beta3/projects/{projectId}:allocateIds"}, "datastore.projects.beginTransaction" {:operationId "datastore.projects.beginTransaction", :description "Begins a new transaction.", :parameters [{:description "Required. The ID of the project against which to make the request.", :in "path", :name "projectId", :required true, :schema {:type "string"}}], :requestBody {:content {"application/json" {:schema {:$ref "#/components/schemas/BeginTransactionRequest"}}}}, :compute.gcp.impl.descriptor/http-method :post, :compute.gcp.impl.descriptor/http-path "/v1beta3/projects/{projectId}:beginTransaction"}, "datastore.projects.commit" {:operationId "datastore.projects.commit", :description "Commits a transaction, optionally creating, deleting or modifying some\nentities.", :parameters [{:description "Required. The ID of the project against which to make the request.", :in "path", :name "projectId", :required true, :schema {:type "string"}}], :requestBody {:content {"application/json" {:schema {:$ref "#/components/schemas/CommitRequest"}}}}, :compute.gcp.impl.descriptor/http-method :post, :compute.gcp.impl.descriptor/http-path "/v1beta3/projects/{projectId}:commit"}, "datastore.projects.lookup" {:operationId "datastore.projects.lookup", :description "Looks up entities by key.", :parameters [{:description "Required. The ID of the project against which to make the request.", :in "path", :name "projectId", :required true, :schema {:type "string"}}], :requestBody {:content {"application/json" {:schema {:$ref "#/components/schemas/LookupRequest"}}}}, :compute.gcp.impl.descriptor/http-method :post, :compute.gcp.impl.descriptor/http-path "/v1beta3/projects/{projectId}:lookup"}, "datastore.projects.reserveIds" {:operationId "datastore.projects.reserveIds", :description "Prevents the supplied keys' IDs from being auto-allocated by Cloud\nDatastore.", :parameters [{:description "Required. The ID of the project against which to make the request.", :in "path", :name "projectId", :required true, :schema {:type "string"}}], :requestBody {:content {"application/json" {:schema {:$ref "#/components/schemas/ReserveIdsRequest"}}}}, :compute.gcp.impl.descriptor/http-method :post, :compute.gcp.impl.descriptor/http-path "/v1beta3/projects/{projectId}:reserveIds"}, "datastore.projects.rollback" {:operationId "datastore.projects.rollback", :description "Rolls back a transaction.", :parameters [{:description "Required. The ID of the project against which to make the request.", :in "path", :name "projectId", :required true, :schema {:type "string"}}], :requestBody {:content {"application/json" {:schema {:$ref "#/components/schemas/RollbackRequest"}}}}, :compute.gcp.impl.descriptor/http-method :post, :compute.gcp.impl.descriptor/http-path "/v1beta3/projects/{projectId}:rollback"}, "datastore.projects.runQuery" {:operationId "datastore.projects.runQuery", :description "Queries for entities.", :parameters [{:description "Required. The ID of the project against which to make the request.", :in "path", :name "projectId", :required true, :schema {:type "string"}}], :requestBody {:content {"application/json" {:schema {:$ref "#/components/schemas/RunQueryRequest"}}}}, :compute.gcp.impl.descriptor/http-method :post, :compute.gcp.impl.descriptor/http-path "/v1beta3/projects/{projectId}:runQuery"}}, :resolve {:components {:parameters {:quotaUser {:description "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.", :in "query", :name "quotaUser", :schema {:type "string"}}, :key {:description "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.", :in "query", :name "key", :schema {:type "string"}}, :alt {:description "Data format for response.", :in "query", :name "alt", :schema {:default "json", :enum ["json" "media" "proto"], :type "string"}}, :access_token {:description "OAuth access token.", :in "query", :name "access_token", :schema {:type "string"}}, :fields {:description "Selector specifying which fields to include in a partial response.", :in "query", :name "fields", :schema {:type "string"}}, :upload_protocol {:description "Upload protocol for media (e.g. \"raw\", \"multipart\").", :in "query", :name "upload_protocol", :schema {:type "string"}}, :uploadType {:description "Legacy upload protocol for media (e.g. \"media\", \"multipart\").", :in "query", :name "uploadType", :schema {:type "string"}}, :oauth_token {:description "OAuth 2.0 token for the current user.", :in "query", :name "oauth_token", :schema {:type "string"}}, "_.xgafv" {:description "V1 error format.", :in "query", :name "$.xgafv", :schema {:enum ["1" "2"], :type "string"}}, :prettyPrint {:description "Returns response with indentations and line breaks.", :in "query", :name "prettyPrint", :schema {:default true, :type "boolean"}}, :callback {:description "JSONP", :in "query", :name "callback", :schema {:type "string"}}}, :schemas {:TransactionOptions {:description "Options for beginning a new transaction.\n\nTransactions can be created explicitly with calls to\nDatastore.BeginTransaction or implicitly by setting\nReadOptions.new_transaction in read requests.", :properties {:readOnly {:$ref "#/components/schemas/ReadOnly", :description "The transaction should only allow reads."}, :readWrite {:$ref "#/components/schemas/ReadWrite", :description "The transaction should allow both reads and writes."}}, :type "object"}, :PathElement {:description "A (kind, ID/name) pair used to construct a key path.\n\nIf either name or ID is set, the element is complete.\nIf neither is set, the element is incomplete.", :properties {:id {:description "The auto-allocated ID of the entity.\nNever equal to zero. Values less than zero are discouraged and may not\nbe supported in the future.", :format "int64", :type "string"}, :kind {:description "The kind of the entity.\nA kind matching regex `__.*__` is reserved/read-only.\nA kind must not contain more than 1500 bytes when UTF-8 encoded.\nCannot be `\"\"`.", :type "string"}, :name {:description "The name of the entity.\nA name matching regex `__.*__` is reserved/read-only.\nA name must not be more than 1500 bytes when UTF-8 encoded.\nCannot be `\"\"`.", :type "string"}}, :type "object"}, :CompositeFilter {:description "A filter that merges multiple other filters using the given operator.", :properties {:filters {:description "The list of filters to combine.\nMust contain at least one filter.", :items {:$ref "#/components/schemas/Filter"}, :type "array"}, :op {:description "The operator for combining multiple filters.", :enum ["OPERATOR_UNSPECIFIED" "AND"], :type "string"}}, :type "object"}, :GoogleDatastoreAdminV1CommonMetadata {:description "Metadata common to all Datastore Admin operations.", :properties {:endTime {:description "The time the operation ended, either successfully or otherwise.", :format "google-datetime", :type "string"}, :labels {:additionalProperties {:type "string"}, :description "The client-assigned labels which were provided when the operation was\ncreated. May also include additional labels.", :type "object"}, :operationType {:description "The type of the operation. Can be used as a filter in\nListOperationsRequest.", :enum ["OPERATION_TYPE_UNSPECIFIED" "EXPORT_ENTITIES" "IMPORT_ENTITIES" "CREATE_INDEX" "DELETE_INDEX"], :type "string"}, :startTime {:description "The time that work began on the operation.", :format "google-datetime", :type "string"}, :state {:description "The current state of the Operation.", :enum ["STATE_UNSPECIFIED" "INITIALIZING" "PROCESSING" "CANCELLING" "FINALIZING" "SUCCESSFUL" "FAILED" "CANCELLED"], :type "string"}}, :type "object"}, :ReadWrite {:description "Options specific to read / write transactions.", :properties {:previousTransaction {:description "The transaction identifier of the transaction being retried.", :format "byte", :type "string"}}, :type "object"}, :PartitionId {:description "A partition ID identifies a grouping of entities. The grouping is always\nby project and namespace, however the namespace ID may be empty.\n\nA partition ID contains several dimensions:\nproject ID and namespace ID.\n\nPartition dimensions:\n\n- May be `\"\"`.\n- Must be valid UTF-8 bytes.\n- Must have values that match regex `[A-Za-z\\d\\.\\-_]{1,100}`\nIf the value of any dimension matches regex `__.*__`, the partition is\nreserved/read-only.\nA reserved/read-only partition ID is forbidden in certain documented\ncontexts.\n\nForeign partition IDs (in which the project ID does\nnot match the context project ID ) are discouraged.\nReads and writes of foreign partition IDs may fail if the project is not in an active state.", :properties {:namespaceId {:description "If not empty, the ID of the namespace to which the entities belong.", :type "string"}, :projectId {:description "The ID of the project to which the entities belong.", :type "string"}}, :type "object"}, :GoogleDatastoreAdminV1EntityFilter {:description "Identifies a subset of entities in a project. This is specified as\ncombinations of kinds and namespaces (either or both of which may be all, as\ndescribed in the following examples).\nExample usage:\n\nEntire project:\n  kinds=[], namespace_ids=[]\n\nKinds Foo and Bar in all namespaces:\n  kinds=['Foo', 'Bar'], namespace_ids=[]\n\nKinds Foo and Bar only in the default namespace:\n  kinds=['Foo', 'Bar'], namespace_ids=['']\n\nKinds Foo and Bar in both the default and Baz namespaces:\n  kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz']\n\nThe entire Baz namespace:\n  kinds=[], namespace_ids=['Baz']", :properties {:kinds {:description "If empty, then this represents all kinds.", :items {:type "string"}, :type "array"}, :namespaceIds {:description "An empty list represents all namespaces. This is the preferred\nusage for projects that don't use namespaces.\n\nAn empty string element represents the default namespace. This should be\nused if the project has data in non-default namespaces, but doesn't want to\ninclude them.\nEach namespace in this list must be unique.", :items {:type "string"}, :type "array"}}, :type "object"}, :KindExpression {:description "A representation of a kind.", :properties {:name {:description "The name of the kind.", :type "string"}}, :type "object"}, :ReserveIdsRequest {:description "The request for Datastore.ReserveIds.", :properties {:databaseId {:description "If not empty, the ID of the database against which to make the request.", :type "string"}, :keys {:description "Required. A list of keys with complete key paths whose numeric IDs should not be\nauto-allocated.", :items {:$ref "#/components/schemas/Key"}, :type "array"}}, :type "object"}, :Mutation {:description "A mutation to apply to an entity.", :properties {:baseVersion {:description "The version of the entity that this mutation is being applied to. If this\ndoes not match the current version on the server, the mutation conflicts.", :format "int64", :type "string"}, :delete {:$ref "#/components/schemas/Key", :description "The key of the entity to delete. The entity may or may not already exist.\nMust have a complete key path and must not be reserved/read-only."}, :insert {:$ref "#/components/schemas/Entity", :description "The entity to insert. The entity must not already exist.\nThe entity key's final path element may be incomplete."}, :update {:$ref "#/components/schemas/Entity", :description "The entity to update. The entity must already exist.\nMust have a complete key path."}, :upsert {:$ref "#/components/schemas/Entity", :description "The entity to upsert. The entity may or may not already exist.\nThe entity key's final path element may be incomplete."}}, :type "object"}, :PropertyReference {:description "A reference to a property relative to the kind expressions.", :properties {:name {:description "The name of the property.\nIf name includes \".\"s, it may be interpreted as a property name path.", :type "string"}}, :type "object"}, :Filter {:description "A holder for any type of filter.", :properties {:compositeFilter {:$ref "#/components/schemas/CompositeFilter", :description "A composite filter."}, :propertyFilter {:$ref "#/components/schemas/PropertyFilter", :description "A filter on a property."}}, :type "object"}, :LookupResponse {:description "The response for Datastore.Lookup.", :properties {:deferred {:description "A list of keys that were not looked up due to resource constraints. The\norder of results in this field is undefined and has no relation to the\norder of the keys in the input.", :items {:$ref "#/components/schemas/Key"}, :type "array"}, :found {:description "Entities found as `ResultType.FULL` entities. The order of results in this\nfield is undefined and has no relation to the order of the keys in the\ninput.", :items {:$ref "#/components/schemas/EntityResult"}, :type "array"}, :missing {:description "Entities not found as `ResultType.KEY_ONLY` entities. The order of results\nin this field is undefined and has no relation to the order of the keys\nin the input.", :items {:$ref "#/components/schemas/EntityResult"}, :type "array"}}, :type "object"}, :PropertyOrder {:description "The desired order for a specific property.", :properties {:direction {:description "The direction to order by. Defaults to `ASCENDING`.", :enum ["DIRECTION_UNSPECIFIED" "ASCENDING" "DESCENDING"], :type "string"}, :property {:$ref "#/components/schemas/PropertyReference", :description "The property to order by."}}, :type "object"}, :PropertyFilter {:description "A filter on a specific property.", :properties {:op {:description "The operator to filter by.", :enum ["OPERATOR_UNSPECIFIED" "LESS_THAN" "LESS_THAN_OR_EQUAL" "GREATER_THAN" "GREATER_THAN_OR_EQUAL" "EQUAL" "HAS_ANCESTOR"], :type "string"}, :property {:$ref "#/components/schemas/PropertyReference", :description "The property to filter by."}, :value {:$ref "#/components/schemas/Value", :description "The value to compare the property to."}}, :type "object"}, :GoogleDatastoreAdminV1beta1Progress {:description "Measures the progress of a particular metric.", :properties {:workCompleted {:description "The amount of work that has been completed. Note that this may be greater\nthan work_estimated.", :format "int64", :type "string"}, :workEstimated {:description "An estimate of how much work needs to be performed. May be zero if the\nwork estimate is unavailable.", :format "int64", :type "string"}}, :type "object"}, :Key {:description "A unique identifier for an entity.\nIf a key's partition ID or any of its path kinds or names are\nreserved/read-only, the key is reserved/read-only.\nA reserved/read-only key is forbidden in certain documented contexts.", :properties {:partitionId {:$ref "#/components/schemas/PartitionId", :description "Entities are partitioned into subsets, currently identified by a project\nID and namespace ID.\nQueries are scoped to a single partition."}, :path {:description "The entity path.\nAn entity path consists of one or more elements composed of a kind and a\nstring or numerical identifier, which identify entities. The first\nelement identifies a _root entity_, the second element identifies\na _child_ of the root entity, the third element identifies a child of the\nsecond entity, and so forth. The entities identified by all prefixes of\nthe path are called the element's _ancestors_.\n\nAn entity path is always fully complete: *all* of the entity's ancestors\nare required to be in the path along with the entity identifier itself.\nThe only exception is that in some documented cases, the identifier in the\nlast path element (for the entity) itself may be omitted. For example,\nthe last path element of the key of `Mutation.insert` may have no\nidentifier.\n\nA path can never be empty, and a path can have at most 100 elements.", :items {:$ref "#/components/schemas/PathElement"}, :type "array"}}, :type "object"}, :AllocateIdsResponse {:description "The response for Datastore.AllocateIds.", :properties {:keys {:description "The keys specified in the request (in the same order), each with\nits key path completed with a newly allocated ID.", :items {:$ref "#/components/schemas/Key"}, :type "array"}}, :type "object"}, :GoogleDatastoreAdminV1ExportEntitiesMetadata {:description "Metadata for ExportEntities operations.", :properties {:common {:$ref "#/components/schemas/GoogleDatastoreAdminV1CommonMetadata", :description "Metadata common to all Datastore Admin operations."}, :entityFilter {:$ref "#/components/schemas/GoogleDatastoreAdminV1EntityFilter", :description "Description of which entities are being exported."}, :outputUrlPrefix {:description "Location for the export metadata and data files. This will be the same\nvalue as the\ngoogle.datastore.admin.v1.ExportEntitiesRequest.output_url_prefix\nfield. The final output location is provided in\ngoogle.datastore.admin.v1.ExportEntitiesResponse.output_url.", :type "string"}, :progressBytes {:$ref "#/components/schemas/GoogleDatastoreAdminV1Progress", :description "An estimate of the number of bytes processed."}, :progressEntities {:$ref "#/components/schemas/GoogleDatastoreAdminV1Progress", :description "An estimate of the number of entities processed."}}, :type "object"}, :QueryResultBatch {:description "A batch of results produced by a query.", :properties {:endCursor {:description "A cursor that points to the position after the last result in the batch.", :format "byte", :type "string"}, :entityResultType {:description "The result type for every entity in `entity_results`.", :enum ["RESULT_TYPE_UNSPECIFIED" "FULL" "PROJECTION" "KEY_ONLY"], :type "string"}, :entityResults {:description "The results for this batch.", :items {:$ref "#/components/schemas/EntityResult"}, :type "array"}, :moreResults {:description "The state of the query after the current batch.", :enum ["MORE_RESULTS_TYPE_UNSPECIFIED" "NOT_FINISHED" "MORE_RESULTS_AFTER_LIMIT" "MORE_RESULTS_AFTER_CURSOR" "NO_MORE_RESULTS"], :type "string"}, :skippedCursor {:description "A cursor that points to the position after the last skipped result.\nWill be set when `skipped_results` != 0.", :format "byte", :type "string"}, :skippedResults {:description "The number of results skipped, typically because of an offset.", :format "int32", :type "integer"}, :snapshotVersion {:description "The version number of the snapshot this batch was returned from.\nThis applies to the range of results from the query's `start_cursor` (or\nthe beginning of the query if no cursor was given) to this batch's\n`end_cursor` (not the query's `end_cursor`).\n\nIn a single transaction, subsequent query result batches for the same query\ncan have a greater snapshot version number. Each batch's snapshot version\nis valid for all preceding batches.\nThe value will be zero for eventually consistent queries.", :format "int64", :type "string"}}, :type "object"}, :ReadOnly {:description "Options specific to read-only transactions.", :properties {}, :type "object"}, :CommitRequest {:description "The request for Datastore.Commit.", :properties {:mode {:description "The type of commit to perform. Defaults to `TRANSACTIONAL`.", :enum ["MODE_UNSPECIFIED" "TRANSACTIONAL" "NON_TRANSACTIONAL"], :type "string"}, :mutations {:description "The mutations to perform.\n\nWhen mode is `TRANSACTIONAL`, mutations affecting a single entity are\napplied in order. The following sequences of mutations affecting a single\nentity are not permitted in a single `Commit` request:\n\n- `insert` followed by `insert`\n- `update` followed by `insert`\n- `upsert` followed by `insert`\n- `delete` followed by `update`\n\nWhen mode is `NON_TRANSACTIONAL`, no two mutations may affect a single\nentity.", :items {:$ref "#/components/schemas/Mutation"}, :type "array"}, :transaction {:description "The identifier of the transaction associated with the commit. A\ntransaction identifier is returned by a call to\nDatastore.BeginTransaction.", :format "byte", :type "string"}}, :type "object"}, :EntityResult {:description "The result of fetching an entity from Datastore.", :properties {:cursor {:description "A cursor that points to the position after the result entity.\nSet only when the `EntityResult` is part of a `QueryResultBatch` message.", :format "byte", :type "string"}, :entity {:$ref "#/components/schemas/Entity", :description "The resulting entity."}, :version {:description "The version of the entity, a strictly positive number that monotonically\nincreases with changes to the entity.\n\nThis field is set for `FULL` entity\nresults.\n\nFor missing entities in `LookupResponse`, this\nis the version of the snapshot that was used to look up the entity, and it\nis always set except for eventually consistent reads.", :format "int64", :type "string"}}, :type "object"}, :RunQueryRequest {:description "The request for Datastore.RunQuery.", :properties {:gqlQuery {:$ref "#/components/schemas/GqlQuery", :description "The GQL query to run."}, :partitionId {:$ref "#/components/schemas/PartitionId", :description "Entities are partitioned into subsets, identified by a partition ID.\nQueries are scoped to a single partition.\nThis partition ID is normalized with the standard default context\npartition ID."}, :query {:$ref "#/components/schemas/Query", :description "The query to run."}, :readOptions {:$ref "#/components/schemas/ReadOptions", :description "The options for this query."}}, :type "object"}, :ReserveIdsResponse {:description "The response for Datastore.ReserveIds.", :properties {}, :type "object"}, :CommitResponse {:description "The response for Datastore.Commit.", :properties {:indexUpdates {:description "The number of index entries updated during the commit, or zero if none were\nupdated.", :format "int32", :type "integer"}, :mutationResults {:description "The result of performing the mutations.\nThe i-th mutation result corresponds to the i-th mutation in the request.", :items {:$ref "#/components/schemas/MutationResult"}, :type "array"}}, :type "object"}, :GoogleDatastoreAdminV1beta1ExportEntitiesResponse {:description "The response for\ngoogle.datastore.admin.v1beta1.DatastoreAdmin.ExportEntities.", :properties {:outputUrl {:description "Location of the output metadata file. This can be used to begin an import\ninto Cloud Datastore (this project or another project). See\ngoogle.datastore.admin.v1beta1.ImportEntitiesRequest.input_url.\nOnly present if the operation completed successfully.", :type "string"}}, :type "object"}, :AllocateIdsRequest {:description "The request for Datastore.AllocateIds.", :properties {:keys {:description "Required. A list of keys with incomplete key paths for which to allocate IDs.\nNo key may be reserved/read-only.", :items {:$ref "#/components/schemas/Key"}, :type "array"}}, :type "object"}, :BeginTransactionResponse {:description "The response for Datastore.BeginTransaction.", :properties {:transaction {:description "The transaction identifier (always present).", :format "byte", :type "string"}}, :type "object"}, :GoogleDatastoreAdminV1ImportEntitiesMetadata {:description "Metadata for ImportEntities operations.", :properties {:common {:$ref "#/components/schemas/GoogleDatastoreAdminV1CommonMetadata", :description "Metadata common to all Datastore Admin operations."}, :entityFilter {:$ref "#/components/schemas/GoogleDatastoreAdminV1EntityFilter", :description "Description of which entities are being imported."}, :inputUrl {:description "The location of the import metadata file. This will be the same value as\nthe google.datastore.admin.v1.ExportEntitiesResponse.output_url field.", :type "string"}, :progressBytes {:$ref "#/components/schemas/GoogleDatastoreAdminV1Progress", :description "An estimate of the number of bytes processed."}, :progressEntities {:$ref "#/components/schemas/GoogleDatastoreAdminV1Progress", :description "An estimate of the number of entities processed."}}, :type "object"}, :GqlQueryParameter {:description "A binding parameter for a GQL query.", :properties {:cursor {:description "A query cursor. Query cursors are returned in query\nresult batches.", :format "byte", :type "string"}, :value {:$ref "#/components/schemas/Value", :description "A value parameter."}}, :type "object"}, :LatLng {:description "An object representing a latitude/longitude pair. This is expressed as a pair\nof doubles representing degrees latitude and degrees longitude. Unless\nspecified otherwise, this must conform to the\n<a href=\"http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf\">WGS84\nstandard</a>. Values must be within normalized ranges.", :properties {:latitude {:description "The latitude in degrees. It must be in the range [-90.0, +90.0].", :format "double", :type "number"}, :longitude {:description "The longitude in degrees. It must be in the range [-180.0, +180.0].", :format "double", :type "number"}}, :type "object"}, :MutationResult {:description "The result of applying a mutation.", :properties {:conflictDetected {:description "Whether a conflict was detected for this mutation. Always false when a\nconflict detection strategy field is not set in the mutation.", :type "boolean"}, :key {:$ref "#/components/schemas/Key", :description "The automatically allocated key.\nSet only when the mutation allocated a key."}, :version {:description "The version of the entity on the server after processing the mutation. If\nthe mutation doesn't change anything on the server, then the version will\nbe the version of the current entity or, if no entity is present, a version\nthat is strictly greater than the version of any previous entity and less\nthan the version of any possible future entity.", :format "int64", :type "string"}}, :type "object"}, :GoogleDatastoreAdminV1beta1ImportEntitiesMetadata {:description "Metadata for ImportEntities operations.", :properties {:common {:$ref "#/components/schemas/GoogleDatastoreAdminV1beta1CommonMetadata", :description "Metadata common to all Datastore Admin operations."}, :entityFilter {:$ref "#/components/schemas/GoogleDatastoreAdminV1beta1EntityFilter", :description "Description of which entities are being imported."}, :inputUrl {:description "The location of the import metadata file. This will be the same value as\nthe google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url\nfield.", :type "string"}, :progressBytes {:$ref "#/components/schemas/GoogleDatastoreAdminV1beta1Progress", :description "An estimate of the number of bytes processed."}, :progressEntities {:$ref "#/components/schemas/GoogleDatastoreAdminV1beta1Progress", :description "An estimate of the number of entities processed."}}, :type "object"}, :GoogleDatastoreAdminV1IndexOperationMetadata {:description "Metadata for Index operations.", :properties {:common {:$ref "#/components/schemas/GoogleDatastoreAdminV1CommonMetadata", :description "Metadata common to all Datastore Admin operations."}, :indexId {:description "The index resource ID that this operation is acting on.", :type "string"}, :progressEntities {:$ref "#/components/schemas/GoogleDatastoreAdminV1Progress", :description "An estimate of the number of entities processed."}}, :type "object"}, :GoogleDatastoreAdminV1ExportEntitiesResponse {:description "The response for\ngoogle.datastore.admin.v1.DatastoreAdmin.ExportEntities.", :properties {:outputUrl {:description "Location of the output metadata file. This can be used to begin an import\ninto Cloud Datastore (this project or another project). See\ngoogle.datastore.admin.v1.ImportEntitiesRequest.input_url.\nOnly present if the operation completed successfully.", :type "string"}}, :type "object"}, :BeginTransactionRequest {:description "The request for Datastore.BeginTransaction.", :properties {:transactionOptions {:$ref "#/components/schemas/TransactionOptions", :description "Options for a new transaction."}}, :type "object"}, :RollbackResponse {:description "The response for Datastore.Rollback.\n(an empty message).", :properties {}, :type "object"}, :Value {:description "A message that can hold any of the supported value types and associated\nmetadata.", :properties {:keyValue {:$ref "#/components/schemas/Key", :description "A key value."}, :blobValue {:description "A blob value.\nMay have at most 1,000,000 bytes.\nWhen `exclude_from_indexes` is false, may have at most 1500 bytes.\nIn JSON requests, must be base64-encoded.", :format "byte", :type "string"}, :booleanValue {:description "A boolean value.", :type "boolean"}, :stringValue {:description "A UTF-8 encoded string value.\nWhen `exclude_from_indexes` is false (it is indexed) , may have at most 1500 bytes.\nOtherwise, may be set to at least 1,000,000 bytes.", :type "string"}, :geoPointValue {:$ref "#/components/schemas/LatLng", :description "A geo point value representing a point on the surface of Earth."}, :entityValue {:$ref "#/components/schemas/Entity", :description "An entity value.\n\n- May have no key.\n- May have a key with an incomplete key path.\n- May have a reserved/read-only key."}, :arrayValue {:$ref "#/components/schemas/ArrayValue", :description "An array value.\nCannot contain another array value.\nA `Value` instance that sets field `array_value` must not set fields\n`meaning` or `exclude_from_indexes`."}, :doubleValue {:description "A double value.", :format "double", :type "number"}, :timestampValue {:description "A timestamp value.\nWhen stored in the Datastore, precise only to microseconds;\nany additional precision is rounded down.", :format "google-datetime", :type "string"}, :integerValue {:description "An integer value.", :format "int64", :type "string"}, :meaning {:description "The `meaning` field should only be populated for backwards compatibility.", :format "int32", :type "integer"}, :excludeFromIndexes {:description "If the value should be excluded from all indexes including those defined\nexplicitly.", :type "boolean"}, :nullValue {:description "A null value.", :enum ["NULL_VALUE"], :type "string"}}, :type "object"}, :Query {:description "A query for entities.", :properties {:limit {:description "The maximum number of results to return. Applies after all other\nconstraints. Optional.\nUnspecified is interpreted as no limit.\nMust be >= 0 if specified.", :format "int32", :type "integer"}, :offset {:description "The number of results to skip. Applies before limit, but after all other\nconstraints. Optional. Must be >= 0 if specified.", :format "int32", :type "integer"}, :endCursor {:description "An ending point for the query results. Query cursors are\nreturned in query result batches and\n[can only be used to limit the same\nquery](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).", :format "byte", :type "string"}, :filter {:$ref "#/components/schemas/Filter", :description "The filter to apply."}, :kind {:description "The kinds to query (if empty, returns entities of all kinds).\nCurrently at most 1 kind may be specified.", :items {:$ref "#/components/schemas/KindExpression"}, :type "array"}, :order {:description "The order to apply to the query results (if empty, order is unspecified).", :items {:$ref "#/components/schemas/PropertyOrder"}, :type "array"}, :distinctOn {:description "The properties to make distinct. The query results will contain the first\nresult for each distinct combination of values for the given properties\n(if empty, all results are returned).", :items {:$ref "#/components/schemas/PropertyReference"}, :type "array"}, :projection {:description "The projection to return. Defaults to returning all properties.", :items {:$ref "#/components/schemas/Projection"}, :type "array"}, :startCursor {:description "A starting point for the query results. Query cursors are\nreturned in query result batches and\n[can only be used to continue the same\nquery](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).", :format "byte", :type "string"}}, :type "object"}, :LookupRequest {:description "The request for Datastore.Lookup.", :properties {:keys {:description "Required. Keys of entities to look up.", :items {:$ref "#/components/schemas/Key"}, :type "array"}, :readOptions {:$ref "#/components/schemas/ReadOptions", :description "The options for this lookup request."}}, :type "object"}, :RollbackRequest {:description "The request for Datastore.Rollback.", :properties {:transaction {:description "Required. The transaction identifier, returned by a call to\nDatastore.BeginTransaction.", :format "byte", :type "string"}}, :type "object"}, :GoogleDatastoreAdminV1Progress {:description "Measures the progress of a particular metric.", :properties {:workCompleted {:description "The amount of work that has been completed. Note that this may be greater\nthan work_estimated.", :format "int64", :type "string"}, :workEstimated {:description "An estimate of how much work needs to be performed. May be zero if the\nwork estimate is unavailable.", :format "int64", :type "string"}}, :type "object"}, :GoogleDatastoreAdminV1beta1EntityFilter {:description "Identifies a subset of entities in a project. This is specified as\ncombinations of kinds and namespaces (either or both of which may be all, as\ndescribed in the following examples).\nExample usage:\n\nEntire project:\n  kinds=[], namespace_ids=[]\n\nKinds Foo and Bar in all namespaces:\n  kinds=['Foo', 'Bar'], namespace_ids=[]\n\nKinds Foo and Bar only in the default namespace:\n  kinds=['Foo', 'Bar'], namespace_ids=['']\n\nKinds Foo and Bar in both the default and Baz namespaces:\n  kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz']\n\nThe entire Baz namespace:\n  kinds=[], namespace_ids=['Baz']", :properties {:kinds {:description "If empty, then this represents all kinds.", :items {:type "string"}, :type "array"}, :namespaceIds {:description "An empty list represents all namespaces. This is the preferred\nusage for projects that don't use namespaces.\n\nAn empty string element represents the default namespace. This should be\nused if the project has data in non-default namespaces, but doesn't want to\ninclude them.\nEach namespace in this list must be unique.", :items {:type "string"}, :type "array"}}, :type "object"}, :ReadOptions {:description "The options shared by read requests.", :properties {:readConsistency {:description "The non-transactional read consistency to use.\nCannot be set to `STRONG` for global queries.", :enum ["READ_CONSISTENCY_UNSPECIFIED" "STRONG" "EVENTUAL"], :type "string"}, :transaction {:description "The identifier of the transaction in which to read. A\ntransaction identifier is returned by a call to\nDatastore.BeginTransaction.", :format "byte", :type "string"}}, :type "object"}, :RunQueryResponse {:description "The response for Datastore.RunQuery.", :properties {:batch {:$ref "#/components/schemas/QueryResultBatch", :description "A batch of query results (always present)."}, :query {:$ref "#/components/schemas/Query", :description "The parsed form of the `GqlQuery` from the request, if it was set."}}, :type "object"}, :GoogleDatastoreAdminV1beta1CommonMetadata {:description "Metadata common to all Datastore Admin operations.", :properties {:endTime {:description "The time the operation ended, either successfully or otherwise.", :format "google-datetime", :type "string"}, :labels {:additionalProperties {:type "string"}, :description "The client-assigned labels which were provided when the operation was\ncreated. May also include additional labels.", :type "object"}, :operationType {:description "The type of the operation. Can be used as a filter in\nListOperationsRequest.", :enum ["OPERATION_TYPE_UNSPECIFIED" "EXPORT_ENTITIES" "IMPORT_ENTITIES"], :type "string"}, :startTime {:description "The time that work began on the operation.", :format "google-datetime", :type "string"}, :state {:description "The current state of the Operation.", :enum ["STATE_UNSPECIFIED" "INITIALIZING" "PROCESSING" "CANCELLING" "FINALIZING" "SUCCESSFUL" "FAILED" "CANCELLED"], :type "string"}}, :type "object"}, :Projection {:description "A representation of a property in a projection.", :properties {:property {:$ref "#/components/schemas/PropertyReference", :description "The property to project."}}, :type "object"}, :GqlQuery {:description "A [GQL\nquery](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).", :properties {:allowLiterals {:description "When false, the query string must not contain any literals and instead must\nbind all values. For example,\n`SELECT * FROM Kind WHERE a = 'string literal'` is not allowed, while\n`SELECT * FROM Kind WHERE a = @value` is.", :type "boolean"}, :namedBindings {:additionalProperties {:$ref "#/components/schemas/GqlQueryParameter"}, :description "For each non-reserved named binding site in the query string, there must be\na named parameter with that name, but not necessarily the inverse.\n\nKey must match regex `A-Za-z_$*`, must not match regex\n`__.*__`, and must not be `\"\"`.", :type "object"}, :positionalBindings {:description "Numbered binding site @1 references the first numbered parameter,\neffectively using 1-based indexing, rather than the usual 0.\n\nFor each binding site numbered i in `query_string`, there must be an i-th\nnumbered parameter. The inverse must also be true.", :items {:$ref "#/components/schemas/GqlQueryParameter"}, :type "array"}, :queryString {:description "A string of the format described\n[here](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).", :type "string"}}, :type "object"}, :GoogleDatastoreAdminV1beta1ExportEntitiesMetadata {:description "Metadata for ExportEntities operations.", :properties {:common {:$ref "#/components/schemas/GoogleDatastoreAdminV1beta1CommonMetadata", :description "Metadata common to all Datastore Admin operations."}, :entityFilter {:$ref "#/components/schemas/GoogleDatastoreAdminV1beta1EntityFilter", :description "Description of which entities are being exported."}, :outputUrlPrefix {:description "Location for the export metadata and data files. This will be the same\nvalue as the\ngoogle.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix\nfield. The final output location is provided in\ngoogle.datastore.admin.v1beta1.ExportEntitiesResponse.output_url.", :type "string"}, :progressBytes {:$ref "#/components/schemas/GoogleDatastoreAdminV1beta1Progress", :description "An estimate of the number of bytes processed."}, :progressEntities {:$ref "#/components/schemas/GoogleDatastoreAdminV1beta1Progress", :description "An estimate of the number of entities processed."}}, :type "object"}, :ArrayValue {:description "An array value.", :properties {:values {:description "Values in the array.\nThe order of values in an array is preserved as long as all values have\nidentical settings for 'exclude_from_indexes'.", :items {:$ref "#/components/schemas/Value"}, :type "array"}}, :type "object"}, :Entity {:description "A Datastore data object.\n\nAn entity is limited to 1 megabyte when stored. That _roughly_\ncorresponds to a limit of 1 megabyte for the serialized form of this\nmessage.", :properties {:key {:$ref "#/components/schemas/Key", :description "The entity's key.\n\nAn entity must have a key, unless otherwise documented (for example,\nan entity in `Value.entity_value` may have no key).\nAn entity's kind is its key path's last element's kind,\nor null if it has no key."}, :properties {:additionalProperties {:$ref "#/components/schemas/Value"}, :description "The entity's properties.\nThe map's keys are property names.\nA property name matching regex `__.*__` is reserved.\nA reserved property name is forbidden in certain documented contexts.\nThe name must not contain more than 500 characters.\nThe name cannot be `\"\"`.", :type "object"}}, :type "object"}}, :securitySchemes {:Oauth2 {:description "Oauth 2.0 implicit authentication", :flows {:implicit {:authorizationUrl "https://accounts.google.com/o/oauth2/auth", :scopes {"https://www.googleapis.com/auth/cloud-platform" "View and manage your data across Google Cloud Platform services", "https://www.googleapis.com/auth/datastore" "View and manage your Google Cloud Datastore data"}}}, :type "oauth2"}, :Oauth2c {:description "Oauth 2.0 accessCode authentication", :flows {:authorizationCode {:authorizationUrl "https://accounts.google.com/o/oauth2/auth", :scopes {"https://www.googleapis.com/auth/cloud-platform" "View and manage your data across Google Cloud Platform services", "https://www.googleapis.com/auth/datastore" "View and manage your Google Cloud Datastore data"}, :tokenUrl "https://accounts.google.com/o/oauth2/token"}}, :type "oauth2"}}}}}