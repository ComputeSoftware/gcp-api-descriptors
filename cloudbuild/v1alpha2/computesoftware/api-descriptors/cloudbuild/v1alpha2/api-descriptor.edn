#:compute.gcp.descriptor{:name "cloudbuild", :title "Cloud Build API", :api-version "v1alpha2", :revision "20200715", :endpoint #:compute.gcp.descriptor{:url "https://cloudbuild.googleapis.com/", :batch-path "batch", :service-path ""}, :parameters {"callback" {"location" "query", "type" "string", "description" "JSONP"}, "uploadType" {"location" "query", "type" "string", "description" "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."}, "key" {"location" "query", "type" "string", "description" "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."}, "access_token" {"description" "OAuth access token.", "type" "string", "location" "query"}, "oauth_token" {"description" "OAuth 2.0 token for the current user.", "location" "query", "type" "string"}, "prettyPrint" {"type" "boolean", "location" "query", "description" "Returns response with indentations and line breaks.", "default" "true"}, "alt" {"enumDescriptions" ["Responses with Content-Type of application/json" "Media download with context-dependent Content-Type" "Responses with Content-Type of application/x-protobuf"], "description" "Data format for response.", "location" "query", "type" "string", "default" "json", "enum" ["json" "media" "proto"]}, "$.xgafv" {"enum" ["1" "2"], "type" "string", "description" "V1 error format.", "location" "query", "enumDescriptions" ["v1 error format" "v2 error format"]}, "fields" {"type" "string", "location" "query", "description" "Selector specifying which fields to include in a partial response."}, "upload_protocol" {"type" "string", "description" "Upload protocol for media (e.g. \"raw\", \"multipart\").", "location" "query"}, "quotaUser" {"type" "string", "location" "query", "description" "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."}}, :op->info {"cloudbuild.projects.locations.operations.cancel" #:compute.gcp.descriptor{:http-method :post, :path "v1alpha2/{+name}:cancel", :request {"$ref" "CancelOperationRequest"}, :response {"$ref" "Empty"}, :parameters {"name" {"required" true, "pattern" "^projects/[^/]+/locations/[^/]+/operations/[^/]+$", "type" "string", "description" "The name of the operation resource to be cancelled.", "location" "path"}}, :description "Starts asynchronous cancellation on a long-running operation.  The server\nmakes a best effort to cancel the operation, but success is not\nguaranteed.  If the server doesn't support this method, it returns\n`google.rpc.Code.UNIMPLEMENTED`.  Clients can use\nOperations.GetOperation or\nother methods to check whether the cancellation succeeded or whether the\noperation completed despite cancellation. On successful cancellation,\nthe operation is not deleted; instead, it becomes an operation with\nan Operation.error value with a google.rpc.Status.code of 1,\ncorresponding to `Code.CANCELLED`."}, "cloudbuild.projects.locations.operations.get" #:compute.gcp.descriptor{:http-method :get, :path "v1alpha2/{+name}", :response {"$ref" "Operation"}, :parameters {"name" {"description" "The name of the operation resource.", "required" true, "type" "string", "pattern" "^projects/[^/]+/locations/[^/]+/operations/[^/]+$", "location" "path"}}, :description "Gets the latest state of a long-running operation.  Clients can use this\nmethod to poll the operation result at intervals as recommended by the API\nservice."}, "cloudbuild.projects.workerPools.patch" #:compute.gcp.descriptor{:http-method :patch, :path "v1alpha2/{+name}", :request {"$ref" "WorkerPool"}, :response {"$ref" "WorkerPool"}, :parameters {"name" {"type" "string", "required" true, "description" "Output only. The resource name of the `WorkerPool`.\nFormat of the name is `projects/{project_id}/workerPools/{worker_pool_id}`,\nwhere the value of {worker_pool_id} is provided in the CreateWorkerPool\nrequest.", "pattern" "^projects/[^/]+/workerPools/[^/]+$", "location" "path"}, "updateMask" {"type" "string", "description" "A mask specifying which fields in `WorkerPool` should be updated.", "format" "google-fieldmask", "location" "query"}}, :description "Updates a `WorkerPool`."}, "cloudbuild.projects.workerPools.list" #:compute.gcp.descriptor{:http-method :get, :path "v1alpha2/{+parent}/workerPools", :response {"$ref" "ListWorkerPoolsResponse"}, :parameters {"parent" {"location" "path", "required" true, "pattern" "^projects/[^/]+$", "description" "Required. The parent, which owns this collection of `WorkerPools`.\nFormat: projects/{project}", "type" "string"}}, :description "Lists `WorkerPool`s by project."}, "cloudbuild.projects.workerPools.create" #:compute.gcp.descriptor{:http-method :post, :path "v1alpha2/{+parent}/workerPools", :request {"$ref" "WorkerPool"}, :response {"$ref" "WorkerPool"}, :parameters {"workerPoolId" {"location" "query", "description" "Required. Immutable. The ID to use for the `WorkerPool`, which will become the final component\nof the resource name.\n\nThis value should be 1-63 characters, and valid characters\nare /a-z-/.", "type" "string"}, "parent" {"type" "string", "required" true, "location" "path", "description" "Required. The parent resource where this book will be created.\nFormat: projects/{project}", "pattern" "^projects/[^/]+$"}}, :description "Creates a `WorkerPool` to run the builds, and returns the new worker pool."}, "cloudbuild.projects.workerPools.delete" #:compute.gcp.descriptor{:http-method :delete, :path "v1alpha2/{+name}", :response {"$ref" "Empty"}, :parameters {"name" {"description" "Required. The name of the `WorkerPool` to delete.\nFormat: projects/{project}/workerPools/{workerPool}", "location" "path", "type" "string", "pattern" "^projects/[^/]+/workerPools/[^/]+$", "required" true}}, :description "Deletes a `WorkerPool`."}, "cloudbuild.projects.workerPools.get" #:compute.gcp.descriptor{:http-method :get, :path "v1alpha2/{+name}", :response {"$ref" "WorkerPool"}, :parameters {"name" {"description" "Required. The name of the `WorkerPool` to retrieve.\nFormat: projects/{project}/workerPools/{workerPool}", "pattern" "^projects/[^/]+/workerPools/[^/]+$", "type" "string", "location" "path", "required" true}}, :description "Returns details of a `WorkerPool`."}}, :schemas {"Empty" {"description" "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.", "properties" {}, "id" "Empty", "type" "object"}, "RepoSource" {"description" "Location of the source in a Google Cloud Source Repository.", "type" "object", "properties" {"repoName" {"type" "string", "description" "Required. Name of the Cloud Source Repository."}, "tagName" {"type" "string", "description" "Regex matching tags to build.\n\nThe syntax of the regular expressions accepted is the syntax accepted by\nRE2 and described at https://github.com/google/re2/wiki/Syntax"}, "dir" {"description" "Directory, relative to the source root, in which to run the build.\n\nThis must be a relative path. If a step's `dir` is specified and is an\nabsolute path, this value is ignored for that step's execution.", "type" "string"}, "projectId" {"type" "string", "description" "ID of the project that owns the Cloud Source Repository. If omitted, the\nproject ID requesting the build is assumed."}, "invertRegex" {"type" "boolean", "description" "Only trigger a build if the revision regex does NOT match the revision\nregex."}, "commitSha" {"type" "string", "description" "Explicit commit SHA to build."}, "branchName" {"type" "string", "description" "Regex matching branches to build.\n\nThe syntax of the regular expressions accepted is the syntax accepted by\nRE2 and described at https://github.com/google/re2/wiki/Syntax"}, "substitutions" {"additionalProperties" {"type" "string"}, "description" "Substitutions to use in a triggered build.\nShould only be used with RunBuildTrigger", "type" "object"}}, "id" "RepoSource"}, "ListWorkerPoolsResponse" {"description" "Response containing existing `WorkerPools`.", "properties" {"workerPools" {"description" "`WorkerPools` for the specified project.", "type" "array", "items" {"$ref" "WorkerPool"}}}, "type" "object", "id" "ListWorkerPoolsResponse"}, "Secret" {"id" "Secret", "description" "Pairs a set of secret environment variables containing encrypted\nvalues with the Cloud KMS key to use to decrypt the value.", "type" "object", "properties" {"kmsKeyName" {"description" "Cloud KMS key name to use to decrypt these envs.", "type" "string"}, "secretEnv" {"additionalProperties" {"format" "byte", "type" "string"}, "type" "object", "description" "Map of environment variable name to its encrypted value.\n\nSecret environment variables must be unique across all of a build's\nsecrets, and must be used by at least one build step. Values can be at most\n64 KB in size. There can be at most 100 secret values across all of a\nbuild's secrets."}}}, "Volume" {"id" "Volume", "properties" {"name" {"description" "Name of the volume to mount.\n\nVolume names must be unique per build step and must be valid names for\nDocker volumes. Each named volume must be used by at least two build steps.", "type" "string"}, "path" {"description" "Path at which to mount the volume.\n\nPaths must be absolute and cannot conflict with other volume paths on the\nsame build step or with certain reserved volume paths.", "type" "string"}}, "type" "object", "description" "Volume describes a Docker container volume which is mounted into build steps\nin order to persist files across build step execution."}, "Source" {"properties" {"repoSource" {"description" "If provided, get the source from this location in a Cloud Source\nRepository.", "$ref" "RepoSource"}, "storageSource" {"description" "If provided, get the source from this location in Google Cloud Storage.", "$ref" "StorageSource"}}, "type" "object", "id" "Source", "description" "Location of the source in a supported storage service."}, "SourceProvenance" {"properties" {"resolvedStorageSource" {"description" "A copy of the build's `source.storage_source`, if exists, with any\ngenerations resolved.", "$ref" "StorageSource"}, "fileHashes" {"additionalProperties" {"$ref" "FileHashes"}, "description" "Output only. Hash(es) of the build source, which can be used to verify that\nthe original source integrity was maintained in the build. Note that\n`FileHashes` will only be populated if `BuildOptions` has requested a\n`SourceProvenanceHash`.\n\nThe keys to this map are file paths used as build source and the values\ncontain the hash values for those files.\n\nIf the build source came in a single package such as a gzipped tarfile\n(`.tar.gz`), the `FileHash` will be for the single path to that file.", "type" "object"}, "resolvedRepoSource" {"$ref" "RepoSource", "description" "A copy of the build's `source.repo_source`, if exists, with any\nrevisions resolved."}}, "id" "SourceProvenance", "description" "Provenance of the source. Ways to find the original source, or verify that\nsome source was used for this build.", "type" "object"}, "NotifierSecret" {"description" "NotifierSecret is the container that maps a secret name (reference) to its\nGoogle Cloud Secret Manager resource path.", "type" "object", "properties" {"value" {"type" "string", "description" "Value is interpreted to be a resource path for fetching the actual\n(versioned) secret data for this secret. For example, this would be a\nGoogle Cloud Secret Manager secret version resource path like:\n\"projects/my-project/secrets/my-secret/versions/latest\"."}, "name" {"type" "string", "description" "Name is the local name of the secret, such as the verbatim string\n\"my-smtp-password\"."}}, "id" "NotifierSecret"}, "FileHashes" {"properties" {"fileHash" {"type" "array", "description" "Collection of file hashes.", "items" {"$ref" "Hash"}}}, "description" "Container message for hashes of byte content of files, used in\nSourceProvenance messages to verify integrity of source input to the build.", "type" "object", "id" "FileHashes"}, "HTTPDelivery" {"type" "object", "properties" {"uri" {"type" "string", "description" "The URI to which JSON-containing HTTP POST requests should be sent."}}, "id" "HTTPDelivery", "description" "HTTPDelivery is the delivery configuration for an HTTP notification."}, "Hash" {"type" "object", "id" "Hash", "description" "Container message for hash values.", "properties" {"type" {"description" "The type of hash that was performed.", "enumDescriptions" ["No hash requested." "Use a sha256 hash." "Use a md5 hash."], "enum" ["NONE" "SHA256" "MD5"], "type" "string"}, "value" {"type" "string", "format" "byte", "description" "The hash value."}}}, "TimeSpan" {"id" "TimeSpan", "type" "object", "description" "Start and end times for a build execution phase.", "properties" {"startTime" {"format" "google-datetime", "description" "Start of time span.", "type" "string"}, "endTime" {"format" "google-datetime", "description" "End of time span.", "type" "string"}}}, "Operation" {"description" "This resource represents a long-running operation that is the result of a\nnetwork API call.", "id" "Operation", "properties" {"error" {"$ref" "Status", "description" "The error result of the operation in case of failure or cancellation."}, "name" {"description" "The server-assigned name, which is only unique within the same service that\noriginally returns it. If you use the default HTTP mapping, the\n`name` should be a resource name ending with `operations/{unique_id}`.", "type" "string"}, "done" {"description" "If the value is `false`, it means the operation is still in progress.\nIf `true`, the operation is completed, and either `error` or `response` is\navailable.", "type" "boolean"}, "metadata" {"additionalProperties" {"description" "Properties of the object. Contains field @type with type URL.", "type" "any"}, "type" "object", "description" "Service-specific metadata associated with the operation.  It typically\ncontains progress information and common metadata such as create time.\nSome services might not provide such metadata.  Any method that returns a\nlong-running operation should document the metadata type, if any."}, "response" {"additionalProperties" {"type" "any", "description" "Properties of the object. Contains field @type with type URL."}, "description" "The normal response of the operation in case of success.  If the original\nmethod returns no data on success, such as `Delete`, the response is\n`google.protobuf.Empty`.  If the original method is standard\n`Get`/`Create`/`Update`, the response should be the resource.  For other\nmethods, the response should have the type `XxxResponse`, where `Xxx`\nis the original method name.  For example, if the original method name\nis `TakeSnapshot()`, the inferred response type is\n`TakeSnapshotResponse`.", "type" "object"}}, "type" "object"}, "Status" {"description" "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors).", "type" "object", "id" "Status", "properties" {"message" {"type" "string", "description" "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client."}, "details" {"items" {"type" "object", "additionalProperties" {"description" "Properties of the object. Contains field @type with type URL.", "type" "any"}}, "description" "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use.", "type" "array"}, "code" {"format" "int32", "description" "The status code, which should be an enum value of google.rpc.Code.", "type" "integer"}}}, "Artifacts" {"properties" {"objects" {"$ref" "ArtifactObjects", "description" "A list of objects to be uploaded to Cloud Storage upon successful\ncompletion of all build steps.\n\nFiles in the workspace matching specified paths globs will be uploaded to\nthe specified Cloud Storage location using the builder service account's\ncredentials.\n\nThe location and generation of the uploaded objects will be stored in the\nBuild resource's results field.\n\nIf any objects fail to be pushed, the build is marked FAILURE."}, "images" {"items" {"type" "string"}, "description" "A list of images to be pushed upon the successful completion of all build\nsteps.\n\nThe images will be pushed using the builder service account's credentials.\n\nThe digests of the pushed images will be stored in the Build resource's\nresults field.\n\nIf any of the images fail to be pushed, the build is marked FAILURE.", "type" "array"}}, "description" "Artifacts produced by a build that should be uploaded upon\nsuccessful completion of all build steps.", "type" "object", "id" "Artifacts"}, "NotifierSpec" {"type" "object", "id" "NotifierSpec", "description" "NotifierSpec is the configuration container for notifications.", "properties" {"secrets" {"description" "Configurations for secret resources used by this particular notifier.", "items" {"$ref" "NotifierSecret"}, "type" "array"}, "notification" {"description" "The configuration of this particular notifier.", "$ref" "Notification"}}}, "WorkerPool" {"properties" {"workerConfig" {"description" "Worker configuration for the `WorkerPool`.", "$ref" "WorkerConfig"}, "region" {"description" "Required. Immutable. The region where the `WorkerPool` runs. Only \"us-central1\" is currently\nsupported.\n\nNote that `region` cannot be changed once the `WorkerPool` is created.", "type" "string"}, "name" {"description" "Output only. The resource name of the `WorkerPool`.\nFormat of the name is `projects/{project_id}/workerPools/{worker_pool_id}`,\nwhere the value of {worker_pool_id} is provided in the CreateWorkerPool\nrequest.", "type" "string"}, "state" {"enumDescriptions" ["State of the `WorkerPool` is unknown." "`WorkerPool` is being created." "`WorkerPool` is running." "`WorkerPool` is being deleted: cancelling builds and draining workers." "`WorkerPool` is deleted."], "type" "string", "enum" ["STATE_UNSPECIFIED" "CREATING" "RUNNING" "DELETING" "DELETED"], "description" "Output only. WorkerPool state."}, "deleteTime" {"format" "google-datetime", "description" "Output only. Time at which the request to delete the `WorkerPool` was\nreceived.", "type" "string"}, "updateTime" {"type" "string", "description" "Output only. Time at which the request to update the `WorkerPool` was\nreceived.", "format" "google-datetime"}, "networkConfig" {"description" "Network configuration for the `WorkerPool`.", "$ref" "NetworkConfig"}, "createTime" {"description" "Output only. Time at which the request to create the `WorkerPool` was\nreceived.", "format" "google-datetime", "type" "string"}}, "id" "WorkerPool", "description" "Configuration for a WorkerPool to run the builds.\n\nWorkers are machines that Cloud Build uses to run your builds. By default,\nall workers run in a project owned by Cloud Build. To have full control over\nthe workers that execute your builds -- such as enabling them to access\nprivate resources on your private network -- you can request Cloud Build to\nrun the workers in your own project by creating a custom workers pool.", "type" "object"}, "SlackDelivery" {"type" "object", "description" "SlackDelivery is the delivery configuration for delivering Slack messages via\nwebhooks. See Slack webhook documentation at:\nhttps://api.slack.com/messaging/webhooks.", "properties" {"webhookUri" {"description" "The secret reference for the Slack webhook URI for sending messages to a\nchannel.", "$ref" "NotifierSecretRef"}}, "id" "SlackDelivery"}, "ArtifactResult" {"description" "An artifact that was uploaded during a build. This\nis a single record in the artifact manifest JSON file.", "properties" {"fileHash" {"type" "array", "description" "The file hash of the artifact.", "items" {"$ref" "FileHashes"}}, "location" {"description" "The path of an artifact in a Google Cloud Storage bucket, with the\ngeneration number. For example,\n`gs://mybucket/path/to/output.jar#generation`.", "type" "string"}}, "type" "object", "id" "ArtifactResult"}, "WorkerConfig" {"description" "WorkerConfig defines the configuration to be used for a creating workers in\nthe pool.", "properties" {"machineType" {"type" "string", "description" "Machine Type of the worker, such as n1-standard-1.\nSee https://cloud.google.com/compute/docs/machine-types.\nIf left blank, Cloud Build will use a standard unspecified machine to\ncreate the worker pool."}, "diskSizeGb" {"type" "string", "format" "int64", "description" "Size of the disk attached to the worker, in GB.\nSee https://cloud.google.com/compute/docs/disks/\nIf `0` is specified, Cloud Build will use a standard disk size."}}, "id" "WorkerConfig", "type" "object"}, "BuildStep" {"properties" {"args" {"items" {"type" "string"}, "type" "array", "description" "A list of arguments that will be presented to the step when it is started.\n\nIf the image used to run the step's container has an entrypoint, the `args`\nare used as arguments to that entrypoint. If the image does not define\nan entrypoint, the first element in args is used as the entrypoint,\nand the remainder will be used as arguments."}, "volumes" {"description" "List of volumes to mount into the build step.\n\nEach volume is created as an empty volume prior to execution of the\nbuild step. Upon completion of the build, volumes and their contents are\ndiscarded.\n\nUsing a named volume in only one step is not valid as it is indicative\nof a build request with an incorrect configuration.", "items" {"$ref" "Volume"}, "type" "array"}, "id" {"description" "Unique identifier for this build step, used in `wait_for` to\nreference this build step as a dependency.", "type" "string"}, "name" {"type" "string", "description" "Required. The name of the container image that will run this particular\nbuild step.\n\nIf the image is available in the host's Docker daemon's cache, it\nwill be run directly. If not, the host will attempt to pull the image\nfirst, using the builder service account's credentials if necessary.\n\nThe Docker daemon's cache will already have the latest versions of all of\nthe officially supported build steps\n([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)).\nThe Docker daemon will also have cached many of the layers for some popular\nimages, like \"ubuntu\", \"debian\", but they will be refreshed at the time you\nattempt to use them.\n\nIf you built an image in a previous build step, it will be stored in the\nhost's Docker daemon's cache and is available to use as the name for a\nlater build step."}, "status" {"enum" ["STATUS_UNKNOWN" "QUEUED" "WORKING" "SUCCESS" "FAILURE" "INTERNAL_ERROR" "TIMEOUT" "CANCELLED" "EXPIRED"], "enumDescriptions" ["Status of the build is unknown." "Build or step is queued; work has not yet begun." "Build or step is being executed." "Build or step finished successfully." "Build or step failed to complete successfully." "Build or step failed due to an internal cause." "Build or step took longer than was allowed." "Build or step was canceled by a user." "Build was enqueued for longer than the value of `queue_ttl`."], "description" "Output only. Status of the build step. At this time, build step status is\nonly updated on build completion; step status is not updated in real-time\nas the build progresses.", "type" "string"}, "timeout" {"description" "Time limit for executing this build step. If not defined, the step has no\ntime limit and will be allowed to continue to run until either it completes\nor the build itself times out.", "format" "google-duration", "type" "string"}, "dir" {"description" "Working directory to use when running this step's container.\n\nIf this value is a relative path, it is relative to the build's working\ndirectory. If this value is absolute, it may be outside the build's working\ndirectory, in which case the contents of the path may not be persisted\nacross build step executions, unless a `volume` for that path is specified.\n\nIf the build specifies a `RepoSource` with `dir` and a step with a `dir`,\nwhich specifies an absolute path, the `RepoSource` `dir` is ignored for\nthe step's execution.", "type" "string"}, "pullTiming" {"description" "Output only. Stores timing information for pulling this build step's\nbuilder image only.", "$ref" "TimeSpan"}, "env" {"description" "A list of environment variable definitions to be used when running a step.\n\nThe elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\"\nbeing given the value \"VALUE\".", "type" "array", "items" {"type" "string"}}, "entrypoint" {"type" "string", "description" "Entrypoint to be used instead of the build step image's default entrypoint.\nIf unset, the image's default entrypoint is used."}, "secretEnv" {"items" {"type" "string"}, "description" "A list of environment variables which are encrypted using a Cloud Key\nManagement Service crypto key. These values must be specified in the\nbuild's `Secret`.", "type" "array"}, "waitFor" {"items" {"type" "string"}, "description" "The ID(s) of the step(s) that this build step depends on.\nThis build step will not start until all the build steps in `wait_for`\nhave completed successfully. If `wait_for` is empty, this build step will\nstart when all previous build steps in the `Build.Steps` list have\ncompleted successfully.", "type" "array"}, "timing" {"description" "Output only. Stores timing information for executing this build step.", "$ref" "TimeSpan"}}, "description" "A step in the build pipeline.", "type" "object", "id" "BuildStep"}, "Build" {"description" "A build resource in the Cloud Build API.\n\nAt a high level, a `Build` describes where to find source code, how to build\nit (for example, the builder image to run on the source), and where to store\nthe built artifacts.\n\nFields can include the following variables, which will be expanded when the\nbuild is created:\n\n- $PROJECT_ID: the project ID of the build.\n- $BUILD_ID: the autogenerated ID of the build.\n- $REPO_NAME: the source repository name specified by RepoSource.\n- $BRANCH_NAME: the branch name specified by RepoSource.\n- $TAG_NAME: the tag name specified by RepoSource.\n- $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or\n  resolved from the specified branch or tag.\n- $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.", "properties" {"sourceProvenance" {"$ref" "SourceProvenance", "description" "Output only. A permanent fixed identifier for source."}, "steps" {"description" "Required. The operations to be performed on the workspace.", "items" {"$ref" "BuildStep"}, "type" "array"}, "finishTime" {"type" "string", "description" "Output only. Time at which execution of the build was finished.\n\nThe difference between finish_time and start_time is the duration of the\nbuild's execution.", "format" "google-datetime"}, "artifacts" {"$ref" "Artifacts", "description" "Artifacts produced by the build that should be uploaded upon\nsuccessful completion of all build steps."}, "tags" {"items" {"type" "string"}, "type" "array", "description" "Tags for annotation of a `Build`. These are not docker tags."}, "queueTtl" {"format" "google-duration", "type" "string", "description" "TTL in queue for this build. If provided and the build is enqueued longer\nthan this value, the build will expire and the build status will be\n`EXPIRED`.\n\nThe TTL starts ticking from create_time."}, "id" {"type" "string", "description" "Output only. Unique identifier of the build."}, "results" {"description" "Output only. Results of the build.", "$ref" "Results"}, "createTime" {"type" "string", "format" "google-datetime", "description" "Output only. Time at which the request to create the build was received."}, "statusDetail" {"type" "string", "description" "Output only. Customer-readable message about the current status."}, "startTime" {"description" "Output only. Time at which execution of the build was started.", "type" "string", "format" "google-datetime"}, "status" {"description" "Output only. Status of the build.", "type" "string", "enum" ["STATUS_UNKNOWN" "QUEUED" "WORKING" "SUCCESS" "FAILURE" "INTERNAL_ERROR" "TIMEOUT" "CANCELLED" "EXPIRED"], "enumDescriptions" ["Status of the build is unknown." "Build or step is queued; work has not yet begun." "Build or step is being executed." "Build or step finished successfully." "Build or step failed to complete successfully." "Build or step failed due to an internal cause." "Build or step took longer than was allowed." "Build or step was canceled by a user." "Build was enqueued for longer than the value of `queue_ttl`."]}, "timeout" {"description" "Amount of time that this build should be allowed to run, to second\ngranularity. If this amount of time elapses, work on the build will cease\nand the build status will be `TIMEOUT`.\n\n`timeout` starts ticking from `startTime`.\n\nDefault time is ten minutes.", "format" "google-duration", "type" "string"}, "buildTriggerId" {"type" "string", "description" "Output only. The ID of the `BuildTrigger` that triggered this build, if it\nwas triggered automatically."}, "substitutions" {"type" "object", "additionalProperties" {"type" "string"}, "description" "Substitutions data for `Build` resource."}, "images" {"items" {"type" "string"}, "type" "array", "description" "A list of images to be pushed upon the successful completion of all build\nsteps.\n\nThe images are pushed using the builder service account's credentials.\n\nThe digests of the pushed images will be stored in the `Build` resource's\nresults field.\n\nIf any of the images fail to be pushed, the build status is marked\n`FAILURE`."}, "source" {"description" "The location of the source files to build.", "$ref" "Source"}, "logsBucket" {"description" "Google Cloud Storage bucket where logs should be written (see\n[Bucket Name\nRequirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).\nLogs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.", "type" "string"}, "projectId" {"type" "string", "description" "Output only. ID of the project."}, "logUrl" {"type" "string", "description" "Output only. URL to logs for this build in Google Cloud Console."}, "options" {"description" "Special options for this build.", "$ref" "BuildOptions"}, "secrets" {"description" "Secrets to decrypt using Cloud Key Management Service.", "type" "array", "items" {"$ref" "Secret"}}, "timing" {"type" "object", "description" "Output only. Stores timing information for phases of the build. Valid keys\nare:\n\n* BUILD: time to execute all build steps\n* PUSH: time to push all specified images.\n* FETCHSOURCE: time to fetch source.\n\nIf the build does not specify source or images,\nthese keys will not be included.", "additionalProperties" {"$ref" "TimeSpan"}}}, "type" "object", "id" "Build"}, "NotifierConfig" {"description" "NotifierConfig is the top-level configuration message.", "type" "object", "properties" {"metadata" {"description" "Metadata for referring to/handling/deploying this notifier.", "$ref" "NotifierMetadata"}, "apiVersion" {"type" "string", "description" "The API version of this configuration format."}, "kind" {"type" "string", "description" "The type of notifier to use (e.g. SMTPNotifier)."}, "spec" {"description" "The actual configuration for this notifier.", "$ref" "NotifierSpec"}}, "id" "NotifierConfig"}, "NotifierMetadata" {"properties" {"name" {"description" "The human-readable and user-given name for the notifier.\nFor example: \"repo-merge-email-notifier\".", "type" "string"}, "notifier" {"description" "The string representing the name and version of notifier to deploy.\nExpected to be of the form of \"<registry-path>/<name>:<version>\".\nFor example: \"gcr.io/my-project/notifiers/smtp:1.2.34\".", "type" "string"}}, "type" "object", "id" "NotifierMetadata", "description" "NotifierMetadata contains the data which can be used to reference or describe\nthis notifier."}, "ArtifactObjects" {"properties" {"location" {"type" "string", "description" "Cloud Storage bucket and optional object path, in the form\n\"gs://bucket/path/to/somewhere/\". (see [Bucket Name\nRequirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).\n\nFiles in the workspace matching any path pattern will be uploaded to\nCloud Storage with this location as a prefix."}, "paths" {"description" "Path globs used to match files in the build's workspace.", "type" "array", "items" {"type" "string"}}, "timing" {"description" "Output only. Stores timing information for pushing all artifact objects.", "$ref" "TimeSpan"}}, "description" "Files in the workspace to upload to Cloud Storage upon successful\ncompletion of all build steps.", "id" "ArtifactObjects", "type" "object"}, "NotifierSecretRef" {"type" "object", "properties" {"secretRef" {"description" "The value of `secret_ref` should be a `name` that is registered in a\n`Secret` in the `secrets` list of the `Spec`.", "type" "string"}}, "description" "NotifierSecretRef contains the reference to a secret stored in the\ncorresponding NotifierSpec.", "id" "NotifierSecretRef"}, "NetworkConfig" {"type" "object", "description" "Network describes the network configuration for a `WorkerPool`.", "id" "NetworkConfig", "properties" {"peeredNetwork" {"type" "string", "description" "Required. Immutable. The network definition that the workers are peered to.\nIf this section is left empty, the workers will be peered to\nWorkerPool.project_id on the default network. Must be in the format\n`projects/{project}/global/networks/{network}`, where {project}\nis a project number, such as `12345`, and {network} is the name of a\nVPC network in the project."}}}, "StorageSource" {"type" "object", "description" "Location of the source in an archive file in Google Cloud Storage.", "id" "StorageSource", "properties" {"generation" {"format" "int64", "description" "Google Cloud Storage generation for the object. If the generation is\nomitted, the latest generation will be used.", "type" "string"}, "bucket" {"description" "Google Cloud Storage bucket containing the source (see\n[Bucket Name\nRequirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).", "type" "string"}, "object" {"type" "string", "description" "Google Cloud Storage object containing the source.\n\nThis object must be a gzipped archive file (`.tar.gz`) containing source to\nbuild."}}}, "BuildOptions" {"type" "object", "id" "BuildOptions", "properties" {"logging" {"type" "string", "enumDescriptions" ["The service determines the logging mode. The default is `LEGACY`. Do not\nrely on the default logging behavior as it may change in the future." "Cloud Logging (Stackdriver) and Cloud Storage logging are enabled." "Only Cloud Storage logging is enabled." "Only Cloud Logging (Stackdriver) is enabled. Note that logs for both the\nCloud Console UI and Cloud SDK are based on Cloud Storage logs, so\nneither will provide logs if this option is chosen." "Turn off all logging. No build logs will be captured."], "enum" ["LOGGING_UNSPECIFIED" "LEGACY" "GCS_ONLY" "STACKDRIVER_ONLY" "NONE"], "description" "Option to specify the logging mode, which determines if and where build\nlogs are stored."}, "logStreamingOption" {"enumDescriptions" ["Service may automatically determine build log streaming behavior." "Build logs should be streamed to Google Cloud Storage." "Build logs should not be streamed to Google Cloud Storage; they will be\nwritten when the build is completed."], "enum" ["STREAM_DEFAULT" "STREAM_ON" "STREAM_OFF"], "description" "Option to define build log streaming behavior to Google Cloud\nStorage.", "type" "string"}, "workerPool" {"type" "string", "description" "Option to specify a `WorkerPool` for the build.\nFormat: projects/{project}/workerPools/{workerPool}\n\nThis field is experimental."}, "volumes" {"type" "array", "description" "Global list of volumes to mount for ALL build steps\n\nEach volume is created as an empty volume prior to starting the build\nprocess. Upon completion of the build, volumes and their contents are\ndiscarded. Global volume names and paths cannot conflict with the volumes\ndefined a build step.\n\nUsing a global volume in a build with only one step is not valid as\nit is indicative of a build request with an incorrect configuration.", "items" {"$ref" "Volume"}}, "requestedVerifyOption" {"enumDescriptions" ["Not a verifiable build. (default)" "Verified build."], "enum" ["NOT_VERIFIED" "VERIFIED"], "type" "string", "description" "Requested verifiability options."}, "env" {"description" "A list of global environment variable definitions that will exist for all\nbuild steps in this build. If a variable is defined in both globally and in\na build step, the variable will use the build step value.\n\nThe elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\"\nbeing given the value \"VALUE\".", "items" {"type" "string"}, "type" "array"}, "machineType" {"enum" ["UNSPECIFIED" "N1_HIGHCPU_8" "N1_HIGHCPU_32"], "type" "string", "enumDescriptions" ["Standard machine type." "Highcpu machine with 8 CPUs." "Highcpu machine with 32 CPUs."], "description" "Compute Engine machine type on which to run the build."}, "sourceProvenanceHash" {"type" "array", "description" "Requested hash for SourceProvenance.", "enumDescriptions" ["No hash requested." "Use a sha256 hash." "Use a md5 hash."], "items" {"enum" ["NONE" "SHA256" "MD5"], "type" "string"}}, "substitutionOption" {"description" "Option to specify behavior when there is an error in the substitution\nchecks.\n\nNOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot\nbe overridden in the build configuration file.", "enumDescriptions" ["Fails the build if error in substitutions checks, like missing\na substitution in the template or in the map." "Do not fail the build if error in substitutions checks."], "type" "string", "enum" ["MUST_MATCH" "ALLOW_LOOSE"]}, "secretEnv" {"description" "A list of global environment variables, which are encrypted using a Cloud\nKey Management Service crypto key. These values must be specified in the\nbuild's `Secret`. These variables will be available to all build steps\nin this build.", "items" {"type" "string"}, "type" "array"}, "dynamicSubstitutions" {"type" "boolean", "description" "Option to specify whether or not to apply bash style string\noperations to the substitutions.\n\nNOTE: this is always enabled for triggered builds and cannot be\noverridden in the build configuration file."}, "diskSizeGb" {"format" "int64", "description" "Requested disk size for the VM that runs the build. Note that this is *NOT*\n\"disk free\"; some of the space will be used by the operating system and\nbuild utilities. Also note that this is the minimum disk size that will be\nallocated for the build -- the build may run with a larger disk than\nrequested. At present, the maximum disk size is 1000GB; builds that request\nmore than the maximum are rejected with an error.", "type" "string"}}, "description" "Optional arguments to enable specific features of builds."}, "CancelOperationRequest" {"id" "CancelOperationRequest", "description" "The request message for Operations.CancelOperation.", "properties" {}, "type" "object"}, "BuildOperationMetadata" {"type" "object", "properties" {"build" {"$ref" "Build", "description" "The build that the operation is tracking."}}, "description" "Metadata for build operations.", "id" "BuildOperationMetadata"}, "Notification" {"description" "Notification is the container which holds the data that is relevant to this\nparticular notification.", "id" "Notification", "properties" {"httpDelivery" {"description" "Configuration for HTTP delivery.", "$ref" "HTTPDelivery"}, "slackDelivery" {"$ref" "SlackDelivery", "description" "Configuration for Slack delivery."}, "smtpDelivery" {"description" "Configuration for SMTP (email) delivery.", "$ref" "SMTPDelivery"}, "filter" {"type" "string", "description" "The filter string to use for notification filtering.\nCurrently, this is assumed to be a CEL program.\nSee https://opensource.google/projects/cel for more."}, "structDelivery" {"additionalProperties" {"description" "Properties of the object.", "type" "any"}, "type" "object", "description" "Escape hatch for users to supply custom delivery configs."}}, "type" "object"}, "SMTPDelivery" {"description" "SMTPDelivery is the delivery configuration for an SMTP (email) notification.", "id" "SMTPDelivery", "properties" {"server" {"type" "string", "description" "The address of the SMTP server."}, "senderAddress" {"type" "string", "description" "This is the SMTP account/email that is used to send the message."}, "password" {"$ref" "NotifierSecretRef", "description" "The SMTP sender's password."}, "port" {"type" "string", "description" "The SMTP port of the server."}, "recipientAddresses" {"description" "This is the list of addresses to which we send the email (i.e. in the `To:`\nof the email).", "items" {"type" "string"}, "type" "array"}, "fromAddress" {"description" "This is the SMTP account/email that appears in the `From:` of the email.\nIf empty, it is assumed to be sender.", "type" "string"}}, "type" "object"}, "Results" {"properties" {"numArtifacts" {"description" "Number of artifacts uploaded. Only populated when artifacts are uploaded.", "format" "int64", "type" "string"}, "buildStepOutputs" {"items" {"format" "byte", "type" "string"}, "description" "List of build step outputs, produced by builder images, in the order\ncorresponding to build step indices.\n\n[Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders)\ncan produce this output by writing to `$BUILDER_OUTPUT/output`.\nOnly the first 4KB of data is stored.", "type" "array"}, "images" {"type" "array", "description" "Container images that were built as a part of the build.", "items" {"$ref" "BuiltImage"}}, "artifactManifest" {"description" "Path to the artifact manifest. Only populated when artifacts are uploaded.", "type" "string"}, "buildStepImages" {"type" "array", "items" {"type" "string"}, "description" "List of build step digests, in the order corresponding to build step\nindices."}, "artifactTiming" {"$ref" "TimeSpan", "description" "Time to push all non-container artifacts."}}, "description" "Artifacts created by the build pipeline.", "type" "object", "id" "Results"}, "BuiltImage" {"properties" {"pushTiming" {"description" "Output only. Stores timing information for pushing the specified image.", "$ref" "TimeSpan"}, "name" {"description" "Name used to push the container image to Google Container Registry, as\npresented to `docker push`.", "type" "string"}, "digest" {"type" "string", "description" "Docker Registry 2.0 digest."}}, "description" "An image built by the pipeline.", "type" "object", "id" "BuiltImage"}}}