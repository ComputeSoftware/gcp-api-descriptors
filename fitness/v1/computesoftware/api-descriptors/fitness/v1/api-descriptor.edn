#:compute.gcp.descriptor{:name "fitness", :title "Fitness API", :api-version "v1", :revision "20200714", :endpoint #:compute.gcp.descriptor{:url "https://www.googleapis.com/", :batch-path "batch/fitness/v1", :service-path ""}, :parameters {"callback" {"type" "string", "description" "JSONP", "location" "query"}, "uploadType" {"description" "Legacy upload protocol for media (e.g. \"media\", \"multipart\").", "type" "string", "location" "query"}, "key" {"location" "query", "description" "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.", "type" "string"}, "access_token" {"type" "string", "location" "query", "description" "OAuth access token."}, "oauth_token" {"description" "OAuth 2.0 token for the current user.", "type" "string", "location" "query"}, "prettyPrint" {"default" "true", "type" "boolean", "location" "query", "description" "Returns response with indentations and line breaks."}, "alt" {"type" "string", "enumDescriptions" ["Responses with Content-Type of application/json" "Media download with context-dependent Content-Type" "Responses with Content-Type of application/x-protobuf"], "enum" ["json" "media" "proto"], "description" "Data format for response.", "default" "json", "location" "query"}, "$.xgafv" {"enum" ["1" "2"], "enumDescriptions" ["v1 error format" "v2 error format"], "location" "query", "description" "V1 error format.", "type" "string"}, "fields" {"type" "string", "description" "Selector specifying which fields to include in a partial response.", "location" "query"}, "upload_protocol" {"type" "string", "description" "Upload protocol for media (e.g. \"raw\", \"multipart\").", "location" "query"}, "quotaUser" {"type" "string", "description" "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.", "location" "query"}}, :op->info {"fitness.users.sessions.list" #:compute.gcp.descriptor{:http-method :get, :path "fitness/v1/users/{userId}/sessions", :response {"$ref" "ListSessionsResponse"}, :parameters {"startTime" {"description" "An <a href=\"https://www.ietf.org/rfc/rfc3339.txt\">RFC3339</a> timestamp.\nOnly sessions ending between the start and end times will be included in\nthe response. If this time is omitted but <var>endTime</var> is specified,\nall sessions from the start of time up to <var>endTime</var> will be\nreturned.", "type" "string", "location" "query"}, "pageToken" {"type" "string", "description" "The continuation token, which is used for incremental syncing.\nTo get the next batch of changes, set this parameter to the value of\n<code>nextPageToken</code> from the previous response. The page token is\nignored if either start or end time is specified. If none of start time,\nend time, and the page token is specified, sessions modified in the last\n30 days are returned.", "location" "query"}, "userId" {"required" true, "type" "string", "description" "List sessions for the person identified. Use <code>me</code> to indicate\nthe authenticated user. Only <code>me</code> is supported at this time.", "location" "path"}, "endTime" {"type" "string", "description" "An <a href=\"https://www.ietf.org/rfc/rfc3339.txt\">RFC3339</a> timestamp.\nOnly sessions ending between the start and end times will be included in\nthe response. If this time is omitted but <var>startTime</var> is\nspecified, all sessions from <var>startTime</var> to the end of time will\nbe returned.", "location" "query"}, "activityType" {"type" "integer", "format" "int32", "repeated" true, "location" "query", "description" "If non-empty, only sessions with these activity types should be returned."}, "includeDeleted" {"description" "If true, and if both <var>startTime</var> and <var>endTime</var> are\nomitted, session deletions will be returned.", "type" "boolean", "location" "query"}}, :description "Lists sessions previously created."}, "fitness.users.dataSources.delete" #:compute.gcp.descriptor{:http-method :delete, :path "fitness/v1/users/{userId}/dataSources/{dataSourceId}", :response {"$ref" "DataSource"}, :parameters {"dataSourceId" {"description" "The data stream ID of the data source to delete.", "type" "string", "required" true, "location" "path"}, "userId" {"description" "Retrieve a data source for the person identified. Use <code>me</code> to\nindicate the authenticated user. Only <code>me</code> is supported at this\ntime.", "required" true, "type" "string", "location" "path"}}, :description "Deletes the specified data source. The request will fail if the data\nsource contains any data points."}, "fitness.users.dataSources.dataPointChanges.list" #:compute.gcp.descriptor{:http-method :get, :path "fitness/v1/users/{userId}/dataSources/{dataSourceId}/dataPointChanges", :response {"$ref" "ListDataPointChangesResponse"}, :parameters {"pageToken" {"description" "The continuation token, which is used to page through large result sets.\nTo get the next page of results, set this parameter to the value of\n<code>nextPageToken</code> from the previous response.", "location" "query", "type" "string"}, "userId" {"description" "List data points for the person identified. Use <code>me</code> to indicate\nthe authenticated user. Only <code>me</code> is supported at this time.", "type" "string", "location" "path", "required" true}, "dataSourceId" {"location" "path", "required" true, "description" "The data stream ID of the data source that created the dataset.", "type" "string"}, "limit" {"type" "integer", "description" "If specified, no more than this many data point changes will be included\nin the response.", "format" "int32", "location" "query"}}, :description "Queries for user's data point changes for a particular data source."}, "fitness.users.dataSources.datasets.delete" #:compute.gcp.descriptor{:http-method :delete, :path "fitness/v1/users/{userId}/dataSources/{dataSourceId}/datasets/{datasetId}", :parameters {"modifiedTimeMillis" {"format" "int64", "description" "When the operation was performed on the client.", "location" "query", "type" "string"}, "userId" {"type" "string", "description" "Delete a dataset for the person identified. Use <code>me</code> to indicate\nthe authenticated user. Only <code>me</code> is supported at this time.", "location" "path", "required" true}, "dataSourceId" {"required" true, "type" "string", "description" "The data stream ID of the data source that created the dataset.", "location" "path"}, "currentTimeMillis" {"location" "query", "description" "The client's current time in milliseconds since epoch.", "format" "int64", "type" "string"}, "datasetId" {"description" "Dataset identifier that is a composite of the minimum data point start time\nand maximum data point end time represented as nanoseconds from the epoch.\nThe ID is formatted like: \"<var>startTime</var>-<var>endTime</var>\"\nwhere <var>startTime</var> and <var>endTime</var> are 64 bit integers.", "location" "path", "type" "string", "required" true}}, :description "Performs an inclusive delete of all data points whose start and end times\nhave any overlap with the time range specified by the dataset ID. For most\ndata types, the entire data point will be deleted. For data types where the\ntime span represents a consistent value (such as\n<code>com.google.activity.segment</code>), and a data point straddles\neither end point of the dataset, only the overlapping portion of the data\npoint will be deleted."}, "fitness.users.dataSources.list" #:compute.gcp.descriptor{:http-method :get, :path "fitness/v1/users/{userId}/dataSources", :response {"$ref" "ListDataSourcesResponse"}, :parameters {"userId" {"required" true, "type" "string", "location" "path", "description" "List data sources for the person identified. Use <code>me</code> to\nindicate the authenticated user. Only <code>me</code> is supported at this\ntime."}, "dataTypeName" {"description" "The names of data types to include in the list. If not specified, all\ndata sources will be returned.", "repeated" true, "type" "string", "location" "query"}}, :description "Lists all data sources that are visible to the developer, using the OAuth\nscopes provided. The list is not exhaustive; the user may have private\ndata sources that are only visible to other developers, or calls using\nother scopes."}, "fitness.users.dataSources.update" #:compute.gcp.descriptor{:http-method :put, :path "fitness/v1/users/{userId}/dataSources/{dataSourceId}", :request {"$ref" "DataSource"}, :response {"$ref" "DataSource"}, :parameters {"userId" {"description" "Update the data source for the person identified. Use <code>me</code> to\nindicate the authenticated user. Only <code>me</code> is supported at this\ntime.", "required" true, "location" "path", "type" "string"}, "dataSourceId" {"location" "path", "required" true, "type" "string", "description" "The data stream ID of the data source to update."}}, :description "Updates the specified data source. The <code>dataStreamId</code>,\n<code>dataType</code>, <code>type</code>, <code>dataStreamName</code>, and\n<code>device</code> properties with the exception of <code>version</code>,\ncannot be modified.\n\nData sources are identified by their <code>dataStreamId</code>."}, "fitness.users.dataSources.datasets.get" #:compute.gcp.descriptor{:http-method :get, :path "fitness/v1/users/{userId}/dataSources/{dataSourceId}/datasets/{datasetId}", :response {"$ref" "Dataset"}, :parameters {"pageToken" {"description" "The continuation token, which is used to page through large datasets.\nTo get the next page of a dataset, set this parameter to the value of\n<code>nextPageToken</code> from the previous response. Each subsequent\ncall will yield a partial dataset with data point end timestamps that are\nstrictly smaller than those in the previous partial response.", "location" "query", "type" "string"}, "limit" {"format" "int32", "location" "query", "type" "integer", "description" "If specified, no more than this many data points will be included in the\ndataset. If there are more data points in the dataset, nextPageToken\nwill be set in the dataset response."}, "userId" {"description" "Retrieve a dataset for the person identified. Use <code>me</code> to\nindicate the authenticated user. Only <code>me</code> is supported at this\ntime.", "type" "string", "location" "path", "required" true}, "dataSourceId" {"type" "string", "required" true, "description" "The data stream ID of the data source that created the dataset.", "location" "path"}, "datasetId" {"location" "path", "required" true, "type" "string", "description" "Dataset identifier that is a composite of the minimum data point start time\nand maximum data point end time represented as nanoseconds from the epoch.\nThe ID is formatted like: \"<var>startTime</var>-<var>endTime</var>\"\nwhere <var>startTime</var> and <var>endTime</var> are 64 bit integers."}}, :description "Returns a dataset containing all data points whose start and end times\noverlap with the specified range of the dataset minimum start time and\nmaximum end time. Specifically, any data point whose start time is less\nthan or equal to the dataset end time and whose end time is greater than or\nequal to the dataset start time."}, "fitness.users.dataSources.get" #:compute.gcp.descriptor{:http-method :get, :path "fitness/v1/users/{userId}/dataSources/{dataSourceId}", :response {"$ref" "DataSource"}, :parameters {"userId" {"description" "Retrieve a data source for the person identified. Use <code>me</code> to\nindicate the authenticated user. Only <code>me</code> is supported at this\ntime.", "type" "string", "required" true, "location" "path"}, "dataSourceId" {"required" true, "location" "path", "type" "string", "description" "The data stream ID of the data source to retrieve."}}, :description "Returns the specified data source."}, "fitness.users.dataSources.create" #:compute.gcp.descriptor{:http-method :post, :path "fitness/v1/users/{userId}/dataSources", :request {"$ref" "DataSource"}, :response {"$ref" "DataSource"}, :parameters {"userId" {"description" "Create the data source for the person identified. Use <code>me</code> to\nindicate the authenticated user. Only <code>me</code> is supported at this\ntime.", "required" true, "type" "string", "location" "path"}}, :description "Creates a new data source that is unique across all data sources belonging\nto this user.\n\nA data source is a unique source of sensor data. Data sources can expose\nraw data coming from hardware sensors on local or companion devices. They\ncan also expose derived data, created by transforming or merging other data\nsources. Multiple data sources can exist for the same data type. Every data\npoint in every dataset inserted into or read from the Fitness API has an\nassociated data source.\n\nEach data source produces a unique stream of dataset updates, with a\nunique data source identifier. Not all changes to data source affect the\ndata stream ID, so that data collected by updated versions of the same\napplication/device can still be considered to belong to the same data\nsource.\n\nData sources are identified using a string generated by the server, based\non the contents of the source being created. The <code>dataStreamId</code>\nfield should not be set when invoking this method. It\nwill be automatically generated by the server with the correct format. If\na <code>dataStreamId</code> is set, it must match the format that the\nserver would generate. This format is a combination of some fields from the\ndata source, and has a specific order. If it doesn't match, the request\nwill fail with an error.\n\nSpecifying a DataType which is not a known type (beginning with\n\"com.google.\") will create a DataSource with a <em>custom data type</em>.\nCustom data types are only readable by the application that created them.\nCustom data types are <strong>deprecated</strong>; use standard data types\ninstead.\n\nIn addition to the data source fields included in the data source ID, the\ndeveloper project number that is authenticated when creating the data\nsource is included. This developer project number is obfuscated when read\nby any other developer reading public data types."}, "fitness.users.sessions.delete" #:compute.gcp.descriptor{:http-method :delete, :path "fitness/v1/users/{userId}/sessions/{sessionId}", :parameters {"userId" {"description" "Delete a session for the person identified. Use <code>me</code> to indicate\nthe authenticated user. Only <code>me</code> is supported at this time.", "location" "path", "required" true, "type" "string"}, "sessionId" {"location" "path", "description" "The ID of the session to be deleted.", "type" "string", "required" true}, "currentTimeMillis" {"location" "query", "type" "string", "format" "int64", "description" "The client's current time in milliseconds since epoch."}}, :description "Deletes a session specified by the given session ID."}, "fitness.users.sessions.update" #:compute.gcp.descriptor{:http-method :put, :path "fitness/v1/users/{userId}/sessions/{sessionId}", :request {"$ref" "Session"}, :response {"$ref" "Session"}, :parameters {"sessionId" {"location" "path", "description" "The ID of the session to be created.", "required" true, "type" "string"}, "currentTimeMillis" {"type" "string", "description" "The client's current time in milliseconds since epoch.", "format" "int64", "location" "query"}, "userId" {"location" "path", "description" "Create sessions for the person identified. Use <code>me</code> to indicate\nthe authenticated user. Only <code>me</code> is supported at this time.", "required" true, "type" "string"}}, :description "Updates or insert a given session."}, "fitness.users.dataset.aggregate" #:compute.gcp.descriptor{:http-method :post, :path "fitness/v1/users/{userId}/dataset:aggregate", :request {"$ref" "AggregateRequest"}, :response {"$ref" "AggregateResponse"}, :parameters {"userId" {"location" "path", "required" true, "type" "string", "description" "Aggregate data for the person identified. Use <code>me</code> to indicate\nthe authenticated user. Only <code>me</code> is supported at this time."}}, :description "Aggregates data of a certain type or stream into buckets divided by a given\ntype of boundary. Multiple data sets of multiple types and from multiple\nsources can be aggregated into exactly one bucket type per request."}, "fitness.users.dataSources.datasets.patch" #:compute.gcp.descriptor{:http-method :patch, :path "fitness/v1/users/{userId}/dataSources/{dataSourceId}/datasets/{datasetId}", :request {"$ref" "Dataset"}, :response {"$ref" "Dataset"}, :parameters {"dataSourceId" {"location" "path", "required" true, "description" "The data stream ID of the data source that created the dataset.", "type" "string"}, "currentTimeMillis" {"location" "query", "type" "string", "format" "int64", "description" "The client's current time in milliseconds since epoch. Note that the\n<code>minStartTimeNs</code> and <code>maxEndTimeNs</code> properties in\nthe request body are in nanoseconds instead of milliseconds."}, "userId" {"type" "string", "description" "Patch a dataset for the person identified. Use <code>me</code> to indicate\nthe authenticated user. Only <code>me</code> is supported at this time.", "location" "path", "required" true}, "datasetId" {"required" true, "description" "Dataset identifier that is a composite of the minimum data point start time\nand maximum data point end time represented as nanoseconds from the epoch.\nThe ID is formatted like: \"<var>startTime</var>-<var>endTime</var>\"\nwhere <var>startTime</var> and <var>endTime</var> are 64 bit integers.", "type" "string", "location" "path"}}, :description "Adds data points to a dataset. The dataset need not be previously created.\nAll points within the given dataset will be returned with subsquent calls\nto retrieve this dataset. Data points can belong to more than one dataset.\nThis method does not use patch semantics."}}, :schemas {"Application" {"type" "object", "id" "Application", "properties" {"detailsUrl" {"description" "An optional URI that can be used to link back to the application.", "type" "string"}, "version" {"type" "string", "description" "Version of the application. You should update this field whenever the\napplication changes in a way that affects the computation of the data."}, "packageName" {"description" "Package name for this application. This is used as a unique\nidentifier when created by Android applications, but cannot be specified\nby REST clients. REST clients will have their developer project number\nreflected into the Data Source data stream IDs, instead of the packageName.", "type" "string"}, "name" {"annotations" {"required" ["fitness.users.dataSources.create" "fitness.users.dataSources.update" "fitness.users.sessions.update"]}, "description" "The name of this application. This is required for REST clients, but we\ndo not enforce uniqueness of this name. It is provided as a matter of\nconvenience for other developers who would like to identify which REST\ncreated an Application or Data Source.", "type" "string"}}}, "DataType" {"id" "DataType", "type" "object", "properties" {"name" {"annotations" {"required" ["fitness.users.dataSources.create" "fitness.users.dataSources.update"]}, "type" "string", "description" "Each data type has a unique, namespaced, name. All data types in the\ncom.google namespace are shared as part of the platform."}, "field" {"description" "A field represents one dimension of a data type.", "items" {"$ref" "DataTypeField"}, "annotations" {"required" ["fitness.users.dataSources.create" "fitness.users.dataSources.update"]}, "type" "array"}}}, "Dataset" {"properties" {"point" {"annotations" {"required" ["fitness.users.dataSources.datasets.patch"]}, "items" {"$ref" "DataPoint"}, "description" "A partial list of data points contained in the dataset, ordered by largest\nendTimeNanos first. This list is considered complete when retrieving a\nsmall dataset and partial when patching a dataset or retrieving a dataset\nthat is too large to include in a single response.", "type" "array"}, "dataSourceId" {"description" "The data stream ID of the data source that created the points in this\ndataset.", "annotations" {"required" ["fitness.users.dataSources.datasets.patch"]}, "type" "string"}, "minStartTimeNs" {"format" "int64", "description" "The smallest start time of all data points in this possibly partial\nrepresentation of the dataset. Time is in nanoseconds from epoch. This\nshould also match the first part of the dataset identifier.", "annotations" {"required" ["fitness.users.dataSources.datasets.patch"]}, "type" "string"}, "maxEndTimeNs" {"annotations" {"required" ["fitness.users.dataSources.datasets.patch"]}, "format" "int64", "type" "string", "description" "The largest end time of all data points in this possibly partial\nrepresentation of the dataset. Time is in nanoseconds from epoch. This\nshould also match the second part of the dataset identifier."}, "nextPageToken" {"description" "This token will be set when a dataset is received in response to a GET\nrequest and the dataset is too large to be included in a single response.\nProvide this value in a subsequent GET request to return the next page of\ndata points within this dataset.", "type" "string"}}, "id" "Dataset", "type" "object", "description" "A dataset represents a projection container for data points. They do not\ncarry any info of their own. Datasets represent a set of data points from a\nparticular data source. A data point can be found in more than one dataset."}, "ListSessionsResponse" {"type" "object", "properties" {"hasMoreData" {"description" "Flag to indicate server has more data to transfer.\nDO NOT USE THIS FIELD. It is never populated in responses from the server.", "type" "boolean"}, "session" {"description" "Sessions with an end time that is between <var>startTime</var> and\n<var>endTime</var> of the request.", "type" "array", "items" {"$ref" "Session"}}, "deletedSession" {"type" "array", "items" {"$ref" "Session"}, "description" "If <code>includeDeleted</code> is set to true in the request, and\n<var>startTime</var> and <var>endTime</var> are omitted, this will include\nsessions which were deleted since the last sync."}, "nextPageToken" {"description" "The sync token which is used to sync further changes. This will only be\nprovided if both <var>startTime</var> and <var>endTime</var> are omitted\nfrom the request.", "type" "string"}}, "id" "ListSessionsResponse"}, "AggregateRequest" {"properties" {"bucketByTime" {"$ref" "BucketByTime", "description" "Specifies that data be aggregated by a single time interval. Mutually\nexclusive of other bucketing specifications."}, "bucketByActivityType" {"description" "Specifies that data be aggregated by the type of activity being performed\nwhen the data was recorded. All data that was recorded during a certain\nactivity type (.for the given time range) will be aggregated into the same\nbucket. Data that was recorded while the user was not active will not be\nincluded in the response. Mutually exclusive of other bucketing\nspecifications.", "$ref" "BucketByActivity"}, "filteredDataQualityStandard" {"enumDescriptions" ["" "" "" "" "" "" "" "" "" ""], "items" {"type" "string", "enum" ["dataQualityUnknown" "dataQualityBloodPressureEsh2002" "dataQualityBloodPressureEsh2010" "dataQualityBloodPressureAami" "dataQualityBloodPressureBhsAA" "dataQualityBloodPressureBhsAB" "dataQualityBloodPressureBhsBA" "dataQualityBloodPressureBhsBB" "dataQualityBloodGlucoseIso151972003" "dataQualityBloodGlucoseIso151972013"]}, "type" "array", "description" "DO NOT POPULATE THIS FIELD. It is ignored."}, "startTimeMillis" {"format" "int64", "description" "The start of a window of time. Data that intersects with this time\nwindow will be aggregated. The time is in milliseconds since epoch,\ninclusive.", "type" "string", "annotations" {"required" ["fitness.users.dataset.aggregate"]}}, "bucketByActivitySegment" {"$ref" "BucketByActivity", "description" "Specifies that data be aggregated each activity segment recored for a user.\nSimilar to bucketByActivitySegment, but bucketing is done for each activity\nsegment rather than all segments of the same type. Mutually exclusive of\nother bucketing specifications."}, "aggregateBy" {"type" "array", "annotations" {"required" ["fitness.users.dataset.aggregate"]}, "description" "The specification of data to be aggregated. At least one aggregateBy spec\nmust be provided. All data that is specified will be aggregated using the\nsame bucketing criteria. There will be one dataset in the response for\nevery aggregateBy spec.", "items" {"$ref" "AggregateBy"}}, "endTimeMillis" {"description" "The end of a window of time. Data that intersects with this time\nwindow will be aggregated. The time is in milliseconds since epoch,\ninclusive.", "format" "int64", "annotations" {"required" ["fitness.users.dataset.aggregate"]}, "type" "string"}, "bucketBySession" {"description" "Specifies that data be aggregated by user sessions. Data that does not fall\nwithin the time range of a session will not be included in the response.\nMutually exclusive of other bucketing specifications.", "$ref" "BucketBySession"}}, "description" "Next id: 10", "type" "object", "id" "AggregateRequest"}, "BucketByTimePeriod" {"id" "BucketByTimePeriod", "properties" {"value" {"type" "integer", "format" "int32"}, "type" {"type" "string", "enumDescriptions" ["" "" ""], "enum" ["day" "week" "month"]}, "timeZoneId" {"description" "org.joda.timezone.DateTimeZone", "type" "string"}}, "type" "object"}, "DataTypeField" {"id" "DataTypeField", "type" "object", "properties" {"format" {"description" "The different supported formats for each field in a data type.", "enumDescriptions" ["" "" "" "" "" "" ""], "enum" ["integer" "floatPoint" "string" "map" "integerList" "floatList" "blob"], "annotations" {"required" ["fitness.users.dataSources.create" "fitness.users.dataSources.update"]}, "type" "string"}, "name" {"type" "string", "annotations" {"required" ["fitness.users.dataSources.create" "fitness.users.dataSources.update"]}, "description" "Defines the name and format of data. Unlike data type names, field names\nare not namespaced, and only need to be unique within the data type."}, "optional" {"type" "boolean"}}, "description" "In case of multi-dimensional data (such as an accelerometer with x, y, and z\naxes) each field represents one dimension. Each data type field has a unique\nname which identifies it. The field also defines the format of the data (int,\nfloat, etc.).\n\nThis message is only instantiated in code and not used for wire comms or\nstored in any way."}, "BucketBySession" {"type" "object", "properties" {"minDurationMillis" {"format" "int64", "description" "Specifies that only sessions of duration longer than minDurationMillis are\nconsidered and used as a container for aggregated data.", "type" "string"}}, "id" "BucketBySession"}, "AggregateBy" {"id" "AggregateBy", "type" "object", "description" "The specification of which data to aggregate.", "properties" {"dataTypeName" {"type" "string", "description" "The data type to aggregate. All data sources providing this data type will\ncontribute data to the aggregation. The response will contain a single\ndataset for this data type name. The dataset will have a data source ID of\nderived:<output data type name>:com.google.android.gms:aggregated.\nIf the user has no data for this data type, an empty data set will be\nreturned. Note: Data can be aggregated by either the dataTypeName or the\ndataSourceId, not both."}, "dataSourceId" {"type" "string", "description" "A data source ID to aggregate. Only data from the specified data source ID\nwill be included in the aggregation. If specified, this data source must\nexist; the OAuth scopes in the supplied credentials must grant read access\nto this data type. The dataset in the response will have the same data\nsource ID. Note: Data can be aggregated by either the dataTypeName or the\ndataSourceId, not both."}}}, "Value" {"description" "Holder object for the value of a single field in a data point.\n\nA field value has a particular format and is only ever set to one of an\ninteger or a floating point value.", "properties" {"fpVal" {"format" "double", "description" "Floating point value. When this is set, other values must not be set.", "type" "number"}, "intVal" {"format" "int32", "description" "Integer value. When this is set, other values must not be set.", "type" "integer"}, "stringVal" {"description" "String value.  When this is set, other values must not be set.\nStrings should be kept small whenever possible.  Data streams with large\nstring values and high data frequency may be down sampled.", "type" "string"}, "mapVal" {"description" "Map value.  The valid key space and units for the corresponding value\nof each entry should be documented as part of the data type definition.\nKeys should be kept small whenever possible. Data streams with large keys\nand high data frequency may be down sampled.", "type" "array", "items" {"$ref" "ValueMapValEntry"}}}, "id" "Value", "type" "object"}, "AggregateResponse" {"properties" {"bucket" {"type" "array", "items" {"$ref" "AggregateBucket"}, "description" "A list of buckets containing the aggregated data."}}, "id" "AggregateResponse", "type" "object"}, "MapValue" {"id" "MapValue", "description" "Holder object for the value of an entry in a map field of a data point.\n\nA map value supports a subset of the formats that the regular Value supports.", "properties" {"fpVal" {"type" "number", "format" "double", "description" "Floating point value."}}, "type" "object"}, "DataPoint" {"type" "object", "properties" {"rawTimestampNanos" {"type" "string", "format" "int64", "description" "The raw timestamp from the original SensorEvent."}, "value" {"description" "Values of each data type field for the data point. It is expected that each\nvalue corresponding to a data type field will occur in the same order that\nthe field is listed with in the data type specified in a data source.\n\nOnly one of integer and floating point fields will be populated, depending\non the format enum value within data source's type field.", "type" "array", "annotations" {"required" ["fitness.users.dataSources.datasets.patch"]}, "items" {"$ref" "Value"}}, "endTimeNanos" {"format" "int64", "type" "string", "description" "The end time of the interval represented by this data point, in\nnanoseconds since epoch.", "annotations" {"required" ["fitness.users.dataSources.datasets.patch"]}}, "dataTypeName" {"description" "The data type defining the format of the values in this data point.", "type" "string", "annotations" {"required" ["fitness.users.dataSources.datasets.patch"]}}, "originDataSourceId" {"description" "If the data point is contained in a dataset for a derived data source,\nthis field will be populated with the data source stream ID that created\nthe data point originally.\n\nWARNING: do not rely on this field for anything other than debugging. The\nvalue of this field, if it is set at all, is an implementation detail and\nis not guaranteed to remain consistent.", "type" "string"}, "startTimeNanos" {"description" "The start time of the interval represented by this data point, in\nnanoseconds since epoch.", "annotations" {"required" ["fitness.users.dataSources.datasets.patch"]}, "format" "int64", "type" "string"}, "computationTimeMillis" {"format" "int64", "description" "DO NOT USE THIS FIELD. It is ignored, and not stored.", "type" "string"}, "modifiedTimeMillis" {"type" "string", "format" "int64", "description" "Indicates the last time this data point was modified. Useful only in\ncontexts where we are listing the data changes, rather than representing\nthe current state of the data."}}, "description" "Represents a single data point, generated by a particular data source.  A\ndata point holds a value for each field, an end timestamp and an optional\nstart time.  The exact semantics of each of these attributes are specified in\nthe documentation for the particular data type.\n\nA data point can represent an instantaneous measurement, reading or input\nobservation, as well as averages or aggregates over a time interval.  Check\nthe data type documentation to determine which is the case for a particular\ndata type.\n\nData points always contain one value for each field of the data type.", "id" "DataPoint"}, "DataSource" {"type" "object", "description" "Definition of a unique source of sensor data.  Data sources can expose raw\ndata coming from hardware sensors on local or companion devices. They can\nalso expose derived data, created by transforming or merging other data\nsources. Multiple data sources can exist for the same data type. Every data\npoint inserted into or read from this service has an associated data\nsource.\n\nThe data source contains enough information to uniquely identify its data,\nincluding the hardware device and the application that collected and/or\ntransformed the data. It also holds useful metadata, such as the hardware and\napplication versions, and the device type.\n\nEach data source produces a unique stream of data, with a unique identifier.\nNot all changes to data source affect the stream identifier, so that data\ncollected by updated versions of the same application/device can still be\nconsidered to belong to the same data stream.", "properties" {"dataStreamName" {"description" "The stream name uniquely identifies this particular data source among\nother data sources of the same type from the same underlying producer.\nSetting the stream name is optional, but should be done whenever an\napplication exposes two streams for the same data type, or when a device\nhas two equivalent sensors.", "type" "string"}, "dataStreamId" {"description" "A unique identifier for the data stream produced by this data source. The\nidentifier includes:<br/><br/>\n<ul>\n<li>The physical device's manufacturer, model, and serial number\n(UID).</li>\n<li>The application's package name or name. Package name is used when the\ndata source was created by an Android application. The developer project\nnumber is used when the data source was created by a REST client.</li>\n<li>The data source's type.</li>\n<li>The data source's stream name.</li>\n</ul>\nNote that not all attributes of the data source are used as part of the\nstream identifier. In particular, the version of the hardware/the\napplication isn't used. This allows us to preserve the same stream through\nversion updates. This also means that two DataSource objects may represent\nthe same data stream even if they're not equal.\n\nThe exact format of the data stream ID created by an Android application\nis:\n<var>type:dataType.name<wbr/>:application.packageName<wbr/>:device.manufacturer<wbr/>:device.model<wbr/>:device.uid<wbr/>:dataStreamName</var>\n\nThe exact format of the data stream ID created by a REST client is:\n<var>type:dataType.name<wbr/>:developer project\nnumber<wbr/>:device.manufacturer<wbr/>:device.model:device.uid<wbr/>:dataStreamName</var>\n\nWhen any of the optional fields that make up the data stream ID are absent,\nthey will be omitted from the data stream ID. The minimum viable data\nstream ID would be:\ntype:dataType.name:developer project number\n\nFinally, the developer project number and device UID are obfuscated when\nread by any REST or Android client that did not create the data source.\nOnly the data source creator will see the developer project number in clear\nand normal form. This means a client will see a different set of\ndata_stream_ids than another client with different credentials.", "annotations" {"required" ["fitness.users.dataSources.update"]}, "type" "string"}, "dataType" {"$ref" "DataType", "annotations" {"required" ["fitness.users.dataSources.create" "fitness.users.dataSources.update"]}, "description" "The data type defines the schema for a stream of data being collected by,\ninserted into, or queried from the Fitness API."}, "dataQualityStandard" {"enumDescriptions" ["" "" "" "" "" "" "" "" "" ""], "type" "array", "description" "DO NOT POPULATE THIS FIELD. It is never populated in responses from the\nplatform, and is ignored in queries. It will be removed in a future version\nentirely.", "items" {"type" "string", "enum" ["dataQualityUnknown" "dataQualityBloodPressureEsh2002" "dataQualityBloodPressureEsh2010" "dataQualityBloodPressureAami" "dataQualityBloodPressureBhsAA" "dataQualityBloodPressureBhsAB" "dataQualityBloodPressureBhsBA" "dataQualityBloodPressureBhsBB" "dataQualityBloodGlucoseIso151972003" "dataQualityBloodGlucoseIso151972013"]}}, "device" {"description" "Representation of an integrated device (such as a phone or a wearable) that\ncan hold sensors.", "annotations" {"required" ["fitness.users.dataSources.create" "fitness.users.dataSources.update"]}, "$ref" "Device"}, "type" {"annotations" {"required" ["fitness.users.dataSources.create" "fitness.users.dataSources.update"]}, "type" "string", "description" "A constant describing the type of this data source. Indicates whether this\ndata source produces raw or derived data.", "enumDescriptions" ["" ""], "enum" ["raw" "derived"]}, "application" {"annotations" {"required" ["fitness.users.dataSources.create" "fitness.users.dataSources.update"]}, "$ref" "Application", "description" "Information about an application which feeds sensor data into the platform."}, "name" {"description" "An end-user visible name for this data source.", "type" "string"}}, "id" "DataSource"}, "AggregateBucket" {"id" "AggregateBucket", "type" "object", "properties" {"dataset" {"type" "array", "description" "There will be one dataset per AggregateBy in the request.", "items" {"$ref" "Dataset"}}, "activity" {"description" "Available for Bucket.Type.ACTIVITY_TYPE, Bucket.Type.ACTIVITY_SEGMENT", "type" "integer", "format" "int32"}, "type" {"description" "The type of a bucket signifies how the data aggregation is performed in the\nbucket.", "enumDescriptions" ["" "Denotes that bucketing by time is requested. When this is specified, the\ntimeBucketDurationMillis field is used to determine how many buckets will\nbe returned." "Denotes that bucketing by session is requested. When this is specified,\nonly data that occurs within sessions that begin and end within the\ndataset time frame, is included in the results." "Denotes that bucketing by activity type is requested. When this is\nspecified, there will be one bucket for each unique activity type that\na user participated in, during the dataset time frame of interest." "Denotes that bucketing by individual activity segment is requested. This\nwill aggregate data by the time boundaries specified by each activity\nsegment occurring within the dataset time frame of interest."], "enum" ["unknown" "time" "session" "activityType" "activitySegment"], "type" "string"}, "session" {"description" "Available for Bucket.Type.SESSION", "$ref" "Session"}, "startTimeMillis" {"description" "The start time for the aggregated data, in milliseconds since epoch,\ninclusive.", "format" "int64", "type" "string"}, "endTimeMillis" {"type" "string", "description" "The end time for the aggregated data, in milliseconds since epoch,\ninclusive.", "format" "int64"}}}, "BucketByActivity" {"type" "object", "properties" {"minDurationMillis" {"description" "Specifies that only activity segments of duration longer than\nminDurationMillis are considered and used as a container for aggregated\ndata.", "type" "string", "format" "int64"}, "activityDataSourceId" {"type" "string", "description" "The default activity stream will be used if a specific activityDataSourceId\nis not specified."}}, "id" "BucketByActivity"}, "ValueMapValEntry" {"properties" {"key" {"type" "string"}, "value" {"$ref" "MapValue"}}, "id" "ValueMapValEntry", "type" "object"}, "ListDataSourcesResponse" {"type" "object", "properties" {"dataSource" {"items" {"$ref" "DataSource"}, "description" "A previously created data source.", "type" "array"}}, "id" "ListDataSourcesResponse"}, "BucketByTime" {"id" "BucketByTime", "properties" {"durationMillis" {"description" "Specifies that result buckets aggregate data by exactly durationMillis time\nframes. Time frames that contain no data will be included in the response\nwith an empty dataset.", "format" "int64", "type" "string"}, "period" {"$ref" "BucketByTimePeriod"}}, "type" "object"}, "ListDataPointChangesResponse" {"type" "object", "properties" {"insertedDataPoint" {"items" {"$ref" "DataPoint"}, "description" "Inserted data points for the user.", "type" "array"}, "nextPageToken" {"type" "string", "description" "The continuation token, which is used to page through large result sets.\nProvide this value in a subsequent request to return the next page of\nresults."}, "dataSourceId" {"description" "The data stream ID of the data source with data point changes.", "type" "string"}, "deletedDataPoint" {"type" "array", "items" {"$ref" "DataPoint"}, "description" "Deleted data points for the user. Note, for modifications this should be\nparsed before handling insertions."}}, "id" "ListDataPointChangesResponse"}, "Session" {"properties" {"activeTimeMillis" {"type" "string", "format" "int64", "description" "Session active time. While start_time_millis and end_time_millis define\nthe full session time, the active time can be shorter and specified by\nactive_time_millis.\nIf the inactive time during the session is known, it should also be\ninserted via a com.google.activity.segment data point with a STILL\nactivity value"}, "endTimeMillis" {"description" "An end time, in milliseconds since epoch, inclusive.", "type" "string", "annotations" {"required" ["fitness.users.sessions.update"]}, "format" "int64"}, "id" {"annotations" {"required" ["fitness.users.sessions.update"]}, "description" "A client-generated identifier that is unique across all sessions owned by\nthis particular user.", "type" "string"}, "activityType" {"type" "integer", "format" "int32", "description" "The type of activity this session represents.", "annotations" {"required" ["fitness.users.sessions.update"]}}, "name" {"type" "string", "description" "A human readable name of the session.", "annotations" {"required" ["fitness.users.sessions.update"]}}, "application" {"description" "The application that created the session.", "$ref" "Application", "annotations" {"required" ["fitness.users.sessions.update"]}}, "startTimeMillis" {"type" "string", "description" "A start time, in milliseconds since epoch, inclusive.", "annotations" {"required" ["fitness.users.sessions.update"]}, "format" "int64"}, "modifiedTimeMillis" {"description" "A timestamp that indicates when the session was last modified.", "type" "string", "format" "int64"}, "description" {"description" "A description for this session.", "type" "string"}}, "type" "object", "description" "Sessions contain metadata, such as a user-friendly name and time interval\ninformation.", "id" "Session"}, "Device" {"type" "object", "id" "Device", "description" "Representation of an integrated device (such as a phone or a wearable) that\ncan hold sensors. Each sensor is exposed as a data source.\n\nThe main purpose of the device information contained in this class is to\nidentify the hardware of a particular data source.  This can be useful in\ndifferent ways, including:\n<ul>\n  <li>Distinguishing two similar sensors on different devices (the step\n      counter on two nexus 5 phones, for instance)\n  <li>Display the source of data to the user (by using the device make /\n      model)\n  <li>Treat data differently depending on sensor type (accelerometers on a\n      watch may give different patterns than those on a phone)\n  <li>Build different analysis models for each device/version.\n</ul>", "properties" {"version" {"description" "Version string for the device hardware/software.", "type" "string", "annotations" {"required" ["fitness.users.dataSources.create" "fitness.users.dataSources.update"]}}, "manufacturer" {"type" "string", "annotations" {"required" ["fitness.users.dataSources.create" "fitness.users.dataSources.update"]}, "description" "Manufacturer of the product/hardware."}, "model" {"type" "string", "annotations" {"required" ["fitness.users.dataSources.create" "fitness.users.dataSources.update"]}, "description" "End-user visible model name for the device."}, "type" {"annotations" {"required" ["fitness.users.dataSources.create" "fitness.users.dataSources.update"]}, "description" "A constant representing the type of the device.", "enum" ["unknown" "phone" "tablet" "watch" "chestStrap" "scale" "headMounted"], "enumDescriptions" ["Device type is not known." "An Android phone." "An Android tablet." "A watch or other wrist-mounted band." "A chest strap." "A scale." "Glass or other head-mounted device."], "type" "string"}, "uid" {"annotations" {"required" ["fitness.users.dataSources.create" "fitness.users.dataSources.update"]}, "description" "The serial number or other unique ID for the hardware. This field is\nobfuscated when read by any REST or Android client that did not create\nthe data source. Only the data source creator will see the uid field in\nclear and normal form.\n\nThe obfuscation preserves equality; that is, given two IDs, if id1 == id2,\nobfuscated(id1) == obfuscated(id2).", "type" "string"}}}}}