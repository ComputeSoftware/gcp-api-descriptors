#:compute.gcp.descriptor{:name "gmail", :title "Gmail API", :api-version "v1", :revision "20210213", :endpoint #:compute.gcp.descriptor{:url "https://gmail.googleapis.com/", :batch-path "batch", :service-path ""}, :parameters {"callback" {"description" "JSONP", "location" "query", "type" "string"}, "uploadType" {"location" "query", "description" "Legacy upload protocol for media (e.g. \"media\", \"multipart\").", "type" "string"}, "key" {"description" "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.", "location" "query", "type" "string"}, "access_token" {"description" "OAuth access token.", "location" "query", "type" "string"}, "oauth_token" {"description" "OAuth 2.0 token for the current user.", "type" "string", "location" "query"}, "prettyPrint" {"description" "Returns response with indentations and line breaks.", "location" "query", "default" "true", "type" "boolean"}, "alt" {"default" "json", "location" "query", "enumDescriptions" ["Responses with Content-Type of application/json" "Media download with context-dependent Content-Type" "Responses with Content-Type of application/x-protobuf"], "enum" ["json" "media" "proto"], "description" "Data format for response.", "type" "string"}, "$.xgafv" {"description" "V1 error format.", "enum" ["1" "2"], "enumDescriptions" ["v1 error format" "v2 error format"], "type" "string", "location" "query"}, "fields" {"location" "query", "description" "Selector specifying which fields to include in a partial response.", "type" "string"}, "upload_protocol" {"description" "Upload protocol for media (e.g. \"raw\", \"multipart\").", "location" "query", "type" "string"}, "quotaUser" {"location" "query", "description" "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.", "type" "string"}}, :op->info {"gmail.users.settings.delegates.get" #:compute.gcp.descriptor{:http-method :get, :path "gmail/v1/users/{userId}/settings/delegates/{delegateEmail}", :response {"$ref" "Delegate"}, :parameters {"delegateEmail" {"location" "path", "required" true, "description" "The email address of the user whose delegate relationship is to be retrieved.", "type" "string"}, "userId" {"type" "string", "default" "me", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "location" "path", "required" true}}, :description "Gets the specified delegate. Note that a delegate user must be referred to by their primary email address, and not an email alias. This method is only available to service account clients that have been delegated domain-wide authority."}, "gmail.users.labels.create" #:compute.gcp.descriptor{:http-method :post, :path "gmail/v1/users/{userId}/labels", :request {"$ref" "Label"}, :response {"$ref" "Label"}, :parameters {"userId" {"type" "string", "default" "me", "location" "path", "required" true, "description" "The user's email address. The special value `me` can be used to indicate the authenticated user."}}, :description "Creates a new label."}, "gmail.users.settings.getLanguage" #:compute.gcp.descriptor{:http-method :get, :path "gmail/v1/users/{userId}/settings/language", :response {"$ref" "LanguageSettings"}, :parameters {"userId" {"default" "me", "required" true, "type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "location" "path"}}, :description "Gets language settings."}, "gmail.users.messages.attachments.get" #:compute.gcp.descriptor{:http-method :get, :path "gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}", :response {"$ref" "MessagePartBody"}, :parameters {"id" {"required" true, "type" "string", "description" "The ID of the attachment.", "location" "path"}, "messageId" {"description" "The ID of the message containing the attachment.", "type" "string", "location" "path", "required" true}, "userId" {"required" true, "type" "string", "location" "path", "default" "me", "description" "The user's email address. The special value `me` can be used to indicate the authenticated user."}}, :description "Gets the specified message attachment."}, "gmail.users.settings.forwardingAddresses.get" #:compute.gcp.descriptor{:http-method :get, :path "gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}", :response {"$ref" "ForwardingAddress"}, :parameters {"forwardingEmail" {"required" true, "location" "path", "description" "The forwarding address to be retrieved.", "type" "string"}, "userId" {"default" "me", "location" "path", "type" "string", "required" true, "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user."}}, :description "Gets the specified forwarding address."}, "gmail.users.labels.delete" #:compute.gcp.descriptor{:http-method :delete, :path "gmail/v1/users/{userId}/labels/{id}", :parameters {"id" {"description" "The ID of the label to delete.", "location" "path", "required" true, "type" "string"}, "userId" {"required" true, "location" "path", "type" "string", "default" "me", "description" "The user's email address. The special value `me` can be used to indicate the authenticated user."}}, :description "Immediately and permanently deletes the specified label and removes it from any messages and threads that it is applied to."}, "gmail.users.settings.delegates.delete" #:compute.gcp.descriptor{:http-method :delete, :path "gmail/v1/users/{userId}/settings/delegates/{delegateEmail}", :parameters {"delegateEmail" {"required" true, "location" "path", "description" "The email address of the user to be removed as a delegate.", "type" "string"}, "userId" {"description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "location" "path", "default" "me", "type" "string", "required" true}}, :description "Removes the specified delegate (which can be of any verification status), and revokes any verification that may have been required for using it. Note that a delegate user must be referred to by their primary email address, and not an email alias. This method is only available to service account clients that have been delegated domain-wide authority."}, "gmail.users.threads.modify" #:compute.gcp.descriptor{:http-method :post, :path "gmail/v1/users/{userId}/threads/{id}/modify", :request {"$ref" "ModifyThreadRequest"}, :response {"$ref" "Thread"}, :parameters {"id" {"required" true, "type" "string", "description" "The ID of the thread to modify.", "location" "path"}, "userId" {"type" "string", "required" true, "default" "me", "location" "path", "description" "The user's email address. The special value `me` can be used to indicate the authenticated user."}}, :description "Modifies the labels applied to the thread. This applies to all messages in the thread."}, "gmail.users.messages.modify" #:compute.gcp.descriptor{:http-method :post, :path "gmail/v1/users/{userId}/messages/{id}/modify", :request {"$ref" "ModifyMessageRequest"}, :response {"$ref" "Message"}, :parameters {"userId" {"location" "path", "description" "The user's email address. The special value `me` can be used to indicate the authenticated user.", "default" "me", "required" true, "type" "string"}, "id" {"type" "string", "description" "The ID of the message to modify.", "required" true, "location" "path"}}, :description "Modifies the labels on the specified message."}, "gmail.users.settings.forwardingAddresses.create" #:compute.gcp.descriptor{:http-method :post, :path "gmail/v1/users/{userId}/settings/forwardingAddresses", :request {"$ref" "ForwardingAddress"}, :response {"$ref" "ForwardingAddress"}, :parameters {"userId" {"location" "path", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "required" true, "type" "string"}}, :description "Creates a forwarding address. If ownership verification is required, a message will be sent to the recipient and the resource's verification status will be set to `pending`; otherwise, the resource will be created with verification status set to `accepted`. This method is only available to service account clients that have been delegated domain-wide authority."}, "gmail.users.messages.batchDelete" #:compute.gcp.descriptor{:http-method :post, :path "gmail/v1/users/{userId}/messages/batchDelete", :request {"$ref" "BatchDeleteMessagesRequest"}, :parameters {"userId" {"required" true, "type" "string", "description" "The user's email address. The special value `me` can be used to indicate the authenticated user.", "location" "path", "default" "me"}}, :description "Deletes many messages by message ID. Provides no guarantees that messages were not already deleted or even existed at all."}, "gmail.users.settings.getImap" #:compute.gcp.descriptor{:http-method :get, :path "gmail/v1/users/{userId}/settings/imap", :response {"$ref" "ImapSettings"}, :parameters {"userId" {"location" "path", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "required" true, "default" "me", "type" "string"}}, :description "Gets IMAP settings."}, "gmail.users.settings.sendAs.list" #:compute.gcp.descriptor{:http-method :get, :path "gmail/v1/users/{userId}/settings/sendAs", :response {"$ref" "ListSendAsResponse"}, :parameters {"userId" {"required" true, "default" "me", "type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "location" "path"}}, :description "Lists the send-as aliases for the specified account. The result includes the primary send-as address associated with the account as well as any custom \"from\" aliases."}, "gmail.users.settings.sendAs.patch" #:compute.gcp.descriptor{:http-method :patch, :path "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}", :request {"$ref" "SendAs"}, :response {"$ref" "SendAs"}, :parameters {"userId" {"location" "path", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "type" "string", "required" true, "default" "me"}, "sendAsEmail" {"description" "The send-as alias to be updated.", "required" true, "type" "string", "location" "path"}}, :description "Patch the specified send-as alias."}, "gmail.users.settings.sendAs.smimeInfo.insert" #:compute.gcp.descriptor{:http-method :post, :path "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo", :request {"$ref" "SmimeInfo"}, :response {"$ref" "SmimeInfo"}, :parameters {"userId" {"default" "me", "description" "The user's email address. The special value `me` can be used to indicate the authenticated user.", "location" "path", "type" "string", "required" true}, "sendAsEmail" {"location" "path", "type" "string", "required" true, "description" "The email address that appears in the \"From:\" header for mail sent using this alias."}}, :description "Insert (upload) the given S/MIME config for the specified send-as alias. Note that pkcs12 format is required for the key."}, "gmail.users.getProfile" #:compute.gcp.descriptor{:http-method :get, :path "gmail/v1/users/{userId}/profile", :response {"$ref" "Profile"}, :parameters {"userId" {"default" "me", "location" "path", "description" "The user's email address. The special value `me` can be used to indicate the authenticated user.", "required" true, "type" "string"}}, :description "Gets the current user's Gmail profile."}, "gmail.users.messages.get" #:compute.gcp.descriptor{:http-method :get, :path "gmail/v1/users/{userId}/messages/{id}", :response {"$ref" "Message"}, :parameters {"format" {"location" "query", "type" "string", "enumDescriptions" ["Returns only email message ID and labels; does not return the email headers, body, or payload." "Returns the full email message data with body content parsed in the `payload` field; the `raw` field is not used. Format cannot be used when accessing the api using the gmail.metadata scope." "Returns the full email message data with body content in the `raw` field as a base64url encoded string; the `payload` field is not used. Format cannot be used when accessing the api using the gmail.metadata scope." "Returns only email message ID, labels, and email headers."], "description" "The format to return the message in.", "enum" ["minimal" "full" "raw" "metadata"], "default" "full"}, "userId" {"description" "The user's email address. The special value `me` can be used to indicate the authenticated user.", "type" "string", "location" "path", "required" true, "default" "me"}, "id" {"description" "The ID of the message to retrieve. This ID is usually retrieved using `messages.list`. The ID is also contained in the result when a message is inserted (`messages.insert`) or imported (`messages.import`).", "required" true, "location" "path", "type" "string"}, "metadataHeaders" {"description" "When given and format is `METADATA`, only include headers specified.", "location" "query", "repeated" true, "type" "string"}}, :description "Gets the specified message."}, "gmail.users.messages.batchModify" #:compute.gcp.descriptor{:http-method :post, :path "gmail/v1/users/{userId}/messages/batchModify", :request {"$ref" "BatchModifyMessagesRequest"}, :parameters {"userId" {"default" "me", "location" "path", "required" true, "type" "string", "description" "The user's email address. The special value `me` can be used to indicate the authenticated user."}}, :description "Modifies the labels on the specified messages."}, "gmail.users.drafts.create" #:compute.gcp.descriptor{:http-method :post, :path "gmail/v1/users/{userId}/drafts", :request {"$ref" "Draft"}, :response {"$ref" "Draft"}, :parameters {"userId" {"required" true, "default" "me", "location" "path", "type" "string", "description" "The user's email address. The special value `me` can be used to indicate the authenticated user."}}, :description "Creates a new draft with the `DRAFT` label."}, "gmail.users.settings.filters.get" #:compute.gcp.descriptor{:http-method :get, :path "gmail/v1/users/{userId}/settings/filters/{id}", :response {"$ref" "Filter"}, :parameters {"userId" {"required" true, "location" "path", "type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me"}, "id" {"description" "The ID of the filter to be fetched.", "required" true, "type" "string", "location" "path"}}, :description "Gets a filter."}, "gmail.users.labels.get" #:compute.gcp.descriptor{:http-method :get, :path "gmail/v1/users/{userId}/labels/{id}", :response {"$ref" "Label"}, :parameters {"id" {"location" "path", "required" true, "type" "string", "description" "The ID of the label to retrieve."}, "userId" {"type" "string", "description" "The user's email address. The special value `me` can be used to indicate the authenticated user.", "required" true, "location" "path", "default" "me"}}, :description "Gets the specified label."}, "gmail.users.settings.filters.list" #:compute.gcp.descriptor{:http-method :get, :path "gmail/v1/users/{userId}/settings/filters", :response {"$ref" "ListFiltersResponse"}, :parameters {"userId" {"location" "path", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "required" true, "default" "me", "type" "string"}}, :description "Lists the message filters of a Gmail user."}, "gmail.users.settings.sendAs.smimeInfo.delete" #:compute.gcp.descriptor{:http-method :delete, :path "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}", :parameters {"sendAsEmail" {"type" "string", "location" "path", "description" "The email address that appears in the \"From:\" header for mail sent using this alias.", "required" true}, "id" {"description" "The immutable ID for the SmimeInfo.", "type" "string", "required" true, "location" "path"}, "userId" {"type" "string", "location" "path", "required" true, "description" "The user's email address. The special value `me` can be used to indicate the authenticated user.", "default" "me"}}, :description "Deletes the specified S/MIME config for the specified send-as alias."}, "gmail.users.settings.getVacation" #:compute.gcp.descriptor{:http-method :get, :path "gmail/v1/users/{userId}/settings/vacation", :response {"$ref" "VacationSettings"}, :parameters {"userId" {"required" true, "default" "me", "location" "path", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "type" "string"}}, :description "Gets vacation responder settings."}, "gmail.users.threads.get" #:compute.gcp.descriptor{:http-method :get, :path "gmail/v1/users/{userId}/threads/{id}", :response {"$ref" "Thread"}, :parameters {"userId" {"description" "The user's email address. The special value `me` can be used to indicate the authenticated user.", "default" "me", "type" "string", "required" true, "location" "path"}, "format" {"type" "string", "enumDescriptions" ["Returns the full email message data with body content parsed in the `payload` field; the `raw` field is not used. Format cannot be used when accessing the api using the gmail.metadata scope." "Returns only email message IDs, labels, and email headers." "Returns only email message IDs and labels; does not return the email headers, body, or payload."], "enum" ["full" "metadata" "minimal"], "description" "The format to return the messages in.", "location" "query", "default" "full"}, "metadataHeaders" {"description" "When given and format is METADATA, only include headers specified.", "location" "query", "type" "string", "repeated" true}, "id" {"location" "path", "type" "string", "description" "The ID of the thread to retrieve.", "required" true}}, :description "Gets the specified thread."}, "gmail.users.settings.updateLanguage" #:compute.gcp.descriptor{:http-method :put, :path "gmail/v1/users/{userId}/settings/language", :request {"$ref" "LanguageSettings"}, :response {"$ref" "LanguageSettings"}, :parameters {"userId" {"description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "required" true, "location" "path", "default" "me", "type" "string"}}, :description "Updates language settings. If successful, the return object contains the `displayLanguage` that was saved for the user, which may differ from the value passed into the request. This is because the requested `displayLanguage` may not be directly supported by Gmail but have a close variant that is, and so the variant may be chosen and saved instead."}, "gmail.users.settings.forwardingAddresses.delete" #:compute.gcp.descriptor{:http-method :delete, :path "gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}", :parameters {"forwardingEmail" {"description" "The forwarding address to be deleted.", "location" "path", "required" true, "type" "string"}, "userId" {"description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "type" "string", "default" "me", "required" true, "location" "path"}}, :description "Deletes the specified forwarding address and revokes any verification that may have been required. This method is only available to service account clients that have been delegated domain-wide authority."}, "gmail.users.messages.import" #:compute.gcp.descriptor{:http-method :post, :path "gmail/v1/users/{userId}/messages/import", :request {"$ref" "Message"}, :response {"$ref" "Message"}, :parameters {"processForCalendar" {"type" "boolean", "default" "false", "description" "Process calendar invites in the email and add any extracted meetings to the Google Calendar for this user.", "location" "query"}, "internalDateSource" {"enumDescriptions" ["Internal message date set to current time when received by Gmail." "Internal message time based on 'Date' header in email, when valid."], "location" "query", "default" "dateHeader", "description" "Source for Gmail's internal date of the message.", "enum" ["receivedTime" "dateHeader"], "type" "string"}, "deleted" {"type" "boolean", "default" "false", "description" "Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a Vault administrator. Only used for G Suite accounts.", "location" "query"}, "userId" {"location" "path", "default" "me", "type" "string", "description" "The user's email address. The special value `me` can be used to indicate the authenticated user.", "required" true}, "neverMarkSpam" {"default" "false", "type" "boolean", "description" "Ignore the Gmail spam classifier decision and never mark this email as SPAM in the mailbox.", "location" "query"}}, :description "Imports a message into only this user's mailbox, with standard email delivery scanning and classification similar to receiving via SMTP. Does not send a message. Note: This function doesn't trigger forwarding rules or filters set up by the user."}, "gmail.users.history.list" #:compute.gcp.descriptor{:http-method :get, :path "gmail/v1/users/{userId}/history", :response {"$ref" "ListHistoryResponse"}, :parameters {"userId" {"type" "string", "description" "The user's email address. The special value `me` can be used to indicate the authenticated user.", "default" "me", "location" "path", "required" true}, "maxResults" {"location" "query", "type" "integer", "default" "100", "format" "uint32", "description" "The maximum number of history records to return."}, "pageToken" {"location" "query", "description" "Page token to retrieve a specific page of results in the list.", "type" "string"}, "labelId" {"description" "Only return messages with a label matching the ID.", "type" "string", "location" "query"}, "startHistoryId" {"format" "uint64", "description" "Required. Returns history records after the specified `startHistoryId`. The supplied `startHistoryId` should be obtained from the `historyId` of a message, thread, or previous `list` response. History IDs increase chronologically but are not contiguous with random gaps in between valid IDs. Supplying an invalid or out of date `startHistoryId` typically returns an `HTTP 404` error code. A `historyId` is typically valid for at least a week, but in some rare circumstances may be valid for only a few hours. If you receive an `HTTP 404` error response, your application should perform a full sync. If you receive no `nextPageToken` in the response, there are no updates to retrieve and you can store the returned `historyId` for a future request.", "location" "query", "type" "string"}, "historyTypes" {"type" "string", "enumDescriptions" ["" "" "" ""], "location" "query", "repeated" true, "description" "History types to be returned by the function", "enum" ["messageAdded" "messageDeleted" "labelAdded" "labelRemoved"]}}, :description "Lists the history of all changes to the given mailbox. History results are returned in chronological order (increasing `historyId`)."}, "gmail.users.settings.forwardingAddresses.list" #:compute.gcp.descriptor{:http-method :get, :path "gmail/v1/users/{userId}/settings/forwardingAddresses", :response {"$ref" "ListForwardingAddressesResponse"}, :parameters {"userId" {"location" "path", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "required" true, "default" "me", "type" "string"}}, :description "Lists the forwarding addresses for the specified account."}, "gmail.users.settings.sendAs.delete" #:compute.gcp.descriptor{:http-method :delete, :path "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}", :parameters {"sendAsEmail" {"required" true, "description" "The send-as alias to be deleted.", "type" "string", "location" "path"}, "userId" {"description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "location" "path", "type" "string", "required" true, "default" "me"}}, :description "Deletes the specified send-as alias. Revokes any verification that may have been required for using it. This method is only available to service account clients that have been delegated domain-wide authority."}, "gmail.users.labels.patch" #:compute.gcp.descriptor{:http-method :patch, :path "gmail/v1/users/{userId}/labels/{id}", :request {"$ref" "Label"}, :response {"$ref" "Label"}, :parameters {"userId" {"location" "path", "type" "string", "description" "The user's email address. The special value `me` can be used to indicate the authenticated user.", "default" "me", "required" true}, "id" {"type" "string", "location" "path", "required" true, "description" "The ID of the label to update."}}, :description "Patch the specified label."}, "gmail.users.threads.list" #:compute.gcp.descriptor{:http-method :get, :path "gmail/v1/users/{userId}/threads", :response {"$ref" "ListThreadsResponse"}, :parameters {"includeSpamTrash" {"description" "Include threads from `SPAM` and `TRASH` in the results.", "location" "query", "default" "false", "type" "boolean"}, "maxResults" {"format" "uint32", "default" "100", "type" "integer", "location" "query", "description" "Maximum number of threads to return."}, "pageToken" {"location" "query", "type" "string", "description" "Page token to retrieve a specific page of results in the list."}, "q" {"description" "Only return threads matching the specified query. Supports the same query format as the Gmail search box. For example, `\"from:someuser@example.com rfc822msgid: is:unread\"`. Parameter cannot be used when accessing the api using the gmail.metadata scope.", "location" "query", "type" "string"}, "labelIds" {"type" "string", "description" "Only return threads with labels that match all of the specified label IDs.", "location" "query", "repeated" true}, "userId" {"required" true, "default" "me", "description" "The user's email address. The special value `me` can be used to indicate the authenticated user.", "type" "string", "location" "path"}}, :description "Lists the threads in the user's mailbox."}, "gmail.users.settings.updateAutoForwarding" #:compute.gcp.descriptor{:http-method :put, :path "gmail/v1/users/{userId}/settings/autoForwarding", :request {"$ref" "AutoForwarding"}, :response {"$ref" "AutoForwarding"}, :parameters {"userId" {"type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "location" "path", "required" true}}, :description "Updates the auto-forwarding setting for the specified account. A verified forwarding address must be specified when auto-forwarding is enabled. This method is only available to service account clients that have been delegated domain-wide authority."}, "gmail.users.labels.list" #:compute.gcp.descriptor{:http-method :get, :path "gmail/v1/users/{userId}/labels", :response {"$ref" "ListLabelsResponse"}, :parameters {"userId" {"default" "me", "location" "path", "description" "The user's email address. The special value `me` can be used to indicate the authenticated user.", "type" "string", "required" true}}, :description "Lists all labels in the user's mailbox."}, "gmail.users.messages.untrash" #:compute.gcp.descriptor{:http-method :post, :path "gmail/v1/users/{userId}/messages/{id}/untrash", :response {"$ref" "Message"}, :parameters {"userId" {"default" "me", "description" "The user's email address. The special value `me` can be used to indicate the authenticated user.", "type" "string", "required" true, "location" "path"}, "id" {"required" true, "location" "path", "description" "The ID of the message to remove from Trash.", "type" "string"}}, :description "Removes the specified message from the trash."}, "gmail.users.drafts.list" #:compute.gcp.descriptor{:http-method :get, :path "gmail/v1/users/{userId}/drafts", :response {"$ref" "ListDraftsResponse"}, :parameters {"maxResults" {"format" "uint32", "type" "integer", "location" "query", "default" "100", "description" "Maximum number of drafts to return."}, "userId" {"default" "me", "location" "path", "type" "string", "description" "The user's email address. The special value `me` can be used to indicate the authenticated user.", "required" true}, "includeSpamTrash" {"type" "boolean", "description" "Include drafts from `SPAM` and `TRASH` in the results.", "default" "false", "location" "query"}, "pageToken" {"type" "string", "description" "Page token to retrieve a specific page of results in the list.", "location" "query"}, "q" {"type" "string", "location" "query", "description" "Only return draft messages matching the specified query. Supports the same query format as the Gmail search box. For example, `\"from:someuser@example.com rfc822msgid: is:unread\"`."}}, :description "Lists the drafts in the user's mailbox."}, "gmail.users.threads.delete" #:compute.gcp.descriptor{:http-method :delete, :path "gmail/v1/users/{userId}/threads/{id}", :parameters {"id" {"required" true, "type" "string", "location" "path", "description" "ID of the Thread to delete."}, "userId" {"description" "The user's email address. The special value `me` can be used to indicate the authenticated user.", "location" "path", "required" true, "default" "me", "type" "string"}}, :description "Immediately and permanently deletes the specified thread. This operation cannot be undone. Prefer `threads.trash` instead."}, "gmail.users.drafts.update" #:compute.gcp.descriptor{:http-method :put, :path "gmail/v1/users/{userId}/drafts/{id}", :request {"$ref" "Draft"}, :response {"$ref" "Draft"}, :parameters {"id" {"location" "path", "type" "string", "description" "The ID of the draft to update.", "required" true}, "userId" {"type" "string", "description" "The user's email address. The special value `me` can be used to indicate the authenticated user.", "required" true, "default" "me", "location" "path"}}, :description "Replaces a draft's content."}, "gmail.users.settings.filters.create" #:compute.gcp.descriptor{:http-method :post, :path "gmail/v1/users/{userId}/settings/filters", :request {"$ref" "Filter"}, :response {"$ref" "Filter"}, :parameters {"userId" {"required" true, "location" "path", "default" "me", "type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user."}}, :description "Creates a filter. Note: you can only create a maximum of 1,000 filters."}, "gmail.users.drafts.send" #:compute.gcp.descriptor{:http-method :post, :path "gmail/v1/users/{userId}/drafts/send", :request {"$ref" "Draft"}, :response {"$ref" "Message"}, :parameters {"userId" {"location" "path", "required" true, "description" "The user's email address. The special value `me` can be used to indicate the authenticated user.", "type" "string", "default" "me"}}, :description "Sends the specified, existing draft to the recipients in the `To`, `Cc`, and `Bcc` headers."}, "gmail.users.stop" #:compute.gcp.descriptor{:http-method :post, :path "gmail/v1/users/{userId}/stop", :parameters {"userId" {"default" "me", "location" "path", "type" "string", "required" true, "description" "The user's email address. The special value `me` can be used to indicate the authenticated user."}}, :description "Stop receiving push notifications for the given user mailbox."}, "gmail.users.watch" #:compute.gcp.descriptor{:http-method :post, :path "gmail/v1/users/{userId}/watch", :request {"$ref" "WatchRequest"}, :response {"$ref" "WatchResponse"}, :parameters {"userId" {"description" "The user's email address. The special value `me` can be used to indicate the authenticated user.", "default" "me", "type" "string", "required" true, "location" "path"}}, :description "Set up or update a push notification watch on the given user mailbox."}, "gmail.users.settings.getAutoForwarding" #:compute.gcp.descriptor{:http-method :get, :path "gmail/v1/users/{userId}/settings/autoForwarding", :response {"$ref" "AutoForwarding"}, :parameters {"userId" {"description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "location" "path", "required" true, "type" "string", "default" "me"}}, :description "Gets the auto-forwarding setting for the specified account."}, "gmail.users.settings.getPop" #:compute.gcp.descriptor{:http-method :get, :path "gmail/v1/users/{userId}/settings/pop", :response {"$ref" "PopSettings"}, :parameters {"userId" {"description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "type" "string", "required" true, "location" "path", "default" "me"}}, :description "Gets POP settings."}, "gmail.users.messages.insert" #:compute.gcp.descriptor{:http-method :post, :path "gmail/v1/users/{userId}/messages", :request {"$ref" "Message"}, :response {"$ref" "Message"}, :parameters {"deleted" {"location" "query", "type" "boolean", "description" "Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a Vault administrator. Only used for G Suite accounts.", "default" "false"}, "internalDateSource" {"location" "query", "enumDescriptions" ["Internal message date set to current time when received by Gmail." "Internal message time based on 'Date' header in email, when valid."], "enum" ["receivedTime" "dateHeader"], "description" "Source for Gmail's internal date of the message.", "default" "receivedTime", "type" "string"}, "userId" {"type" "string", "description" "The user's email address. The special value `me` can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Directly inserts a message into only this user's mailbox similar to `IMAP APPEND`, bypassing most scanning and classification. Does not send a message."}, "gmail.users.settings.delegates.list" #:compute.gcp.descriptor{:http-method :get, :path "gmail/v1/users/{userId}/settings/delegates", :response {"$ref" "ListDelegatesResponse"}, :parameters {"userId" {"type" "string", "default" "me", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "required" true, "location" "path"}}, :description "Lists the delegates for the specified account. This method is only available to service account clients that have been delegated domain-wide authority."}, "gmail.users.settings.sendAs.create" #:compute.gcp.descriptor{:http-method :post, :path "gmail/v1/users/{userId}/settings/sendAs", :request {"$ref" "SendAs"}, :response {"$ref" "SendAs"}, :parameters {"userId" {"location" "path", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "type" "string", "required" true}}, :description "Creates a custom \"from\" send-as alias. If an SMTP MSA is specified, Gmail will attempt to connect to the SMTP service to validate the configuration before creating the alias. If ownership verification is required for the alias, a message will be sent to the email address and the resource's verification status will be set to `pending`; otherwise, the resource will be created with verification status set to `accepted`. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias. This method is only available to service account clients that have been delegated domain-wide authority."}, "gmail.users.settings.updateImap" #:compute.gcp.descriptor{:http-method :put, :path "gmail/v1/users/{userId}/settings/imap", :request {"$ref" "ImapSettings"}, :response {"$ref" "ImapSettings"}, :parameters {"userId" {"default" "me", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "type" "string", "location" "path", "required" true}}, :description "Updates IMAP settings."}, "gmail.users.settings.sendAs.smimeInfo.list" #:compute.gcp.descriptor{:http-method :get, :path "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo", :response {"$ref" "ListSmimeInfoResponse"}, :parameters {"sendAsEmail" {"description" "The email address that appears in the \"From:\" header for mail sent using this alias.", "location" "path", "type" "string", "required" true}, "userId" {"location" "path", "type" "string", "required" true, "default" "me", "description" "The user's email address. The special value `me` can be used to indicate the authenticated user."}}, :description "Lists S/MIME configs for the specified send-as alias."}, "gmail.users.messages.trash" #:compute.gcp.descriptor{:http-method :post, :path "gmail/v1/users/{userId}/messages/{id}/trash", :response {"$ref" "Message"}, :parameters {"id" {"type" "string", "description" "The ID of the message to Trash.", "location" "path", "required" true}, "userId" {"required" true, "type" "string", "location" "path", "default" "me", "description" "The user's email address. The special value `me` can be used to indicate the authenticated user."}}, :description "Moves the specified message to the trash."}, "gmail.users.settings.sendAs.smimeInfo.setDefault" #:compute.gcp.descriptor{:http-method :post, :path "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault", :parameters {"sendAsEmail" {"type" "string", "location" "path", "required" true, "description" "The email address that appears in the \"From:\" header for mail sent using this alias."}, "userId" {"location" "path", "type" "string", "required" true, "description" "The user's email address. The special value `me` can be used to indicate the authenticated user.", "default" "me"}, "id" {"location" "path", "type" "string", "description" "The immutable ID for the SmimeInfo.", "required" true}}, :description "Sets the default S/MIME config for the specified send-as alias."}, "gmail.users.threads.trash" #:compute.gcp.descriptor{:http-method :post, :path "gmail/v1/users/{userId}/threads/{id}/trash", :response {"$ref" "Thread"}, :parameters {"id" {"type" "string", "location" "path", "required" true, "description" "The ID of the thread to Trash."}, "userId" {"required" true, "location" "path", "description" "The user's email address. The special value `me` can be used to indicate the authenticated user.", "type" "string", "default" "me"}}, :description "Moves the specified thread to the trash."}, "gmail.users.settings.sendAs.verify" #:compute.gcp.descriptor{:http-method :post, :path "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify", :parameters {"userId" {"description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "required" true, "type" "string", "location" "path"}, "sendAsEmail" {"type" "string", "location" "path", "description" "The send-as alias to be verified.", "required" true}}, :description "Sends a verification email to the specified send-as alias address. The verification status must be `pending`. This method is only available to service account clients that have been delegated domain-wide authority."}, "gmail.users.messages.delete" #:compute.gcp.descriptor{:http-method :delete, :path "gmail/v1/users/{userId}/messages/{id}", :parameters {"id" {"location" "path", "type" "string", "description" "The ID of the message to delete.", "required" true}, "userId" {"type" "string", "default" "me", "required" true, "location" "path", "description" "The user's email address. The special value `me` can be used to indicate the authenticated user."}}, :description "Immediately and permanently deletes the specified message. This operation cannot be undone. Prefer `messages.trash` instead."}, "gmail.users.settings.delegates.create" #:compute.gcp.descriptor{:http-method :post, :path "gmail/v1/users/{userId}/settings/delegates", :request {"$ref" "Delegate"}, :response {"$ref" "Delegate"}, :parameters {"userId" {"default" "me", "required" true, "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "location" "path", "type" "string"}}, :description "Adds a delegate with its verification status set directly to `accepted`, without sending any verification email. The delegate user must be a member of the same G Suite organization as the delegator user. Gmail imposes limitations on the number of delegates and delegators each user in a G Suite organization can have. These limits depend on your organization, but in general each user can have up to 25 delegates and up to 10 delegators. Note that a delegate user must be referred to by their primary email address, and not an email alias. Also note that when a new delegate is created, there may be up to a one minute delay before the new delegate is available for use. This method is only available to service account clients that have been delegated domain-wide authority."}, "gmail.users.labels.update" #:compute.gcp.descriptor{:http-method :put, :path "gmail/v1/users/{userId}/labels/{id}", :request {"$ref" "Label"}, :response {"$ref" "Label"}, :parameters {"userId" {"location" "path", "type" "string", "description" "The user's email address. The special value `me` can be used to indicate the authenticated user.", "required" true, "default" "me"}, "id" {"description" "The ID of the label to update.", "type" "string", "location" "path", "required" true}}, :description "Updates the specified label."}, "gmail.users.settings.sendAs.smimeInfo.get" #:compute.gcp.descriptor{:http-method :get, :path "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}", :response {"$ref" "SmimeInfo"}, :parameters {"userId" {"type" "string", "default" "me", "required" true, "description" "The user's email address. The special value `me` can be used to indicate the authenticated user.", "location" "path"}, "sendAsEmail" {"description" "The email address that appears in the \"From:\" header for mail sent using this alias.", "type" "string", "location" "path", "required" true}, "id" {"description" "The immutable ID for the SmimeInfo.", "required" true, "type" "string", "location" "path"}}, :description "Gets the specified S/MIME config for the specified send-as alias."}, "gmail.users.settings.sendAs.get" #:compute.gcp.descriptor{:http-method :get, :path "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}", :response {"$ref" "SendAs"}, :parameters {"userId" {"type" "string", "default" "me", "location" "path", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "required" true}, "sendAsEmail" {"location" "path", "type" "string", "description" "The send-as alias to be retrieved.", "required" true}}, :description "Gets the specified send-as alias. Fails with an HTTP 404 error if the specified address is not a member of the collection."}, "gmail.users.messages.list" #:compute.gcp.descriptor{:http-method :get, :path "gmail/v1/users/{userId}/messages", :response {"$ref" "ListMessagesResponse"}, :parameters {"maxResults" {"location" "query", "format" "uint32", "default" "100", "description" "Maximum number of messages to return.", "type" "integer"}, "userId" {"type" "string", "description" "The user's email address. The special value `me` can be used to indicate the authenticated user.", "location" "path", "required" true, "default" "me"}, "pageToken" {"location" "query", "type" "string", "description" "Page token to retrieve a specific page of results in the list."}, "labelIds" {"type" "string", "description" "Only return messages with labels that match all of the specified label IDs.", "repeated" true, "location" "query"}, "includeSpamTrash" {"description" "Include messages from `SPAM` and `TRASH` in the results.", "location" "query", "default" "false", "type" "boolean"}, "q" {"type" "string", "location" "query", "description" "Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, `\"from:someuser@example.com rfc822msgid: is:unread\"`. Parameter cannot be used when accessing the api using the gmail.metadata scope."}}, :description "Lists the messages in the user's mailbox."}, "gmail.users.messages.send" #:compute.gcp.descriptor{:http-method :post, :path "gmail/v1/users/{userId}/messages/send", :request {"$ref" "Message"}, :response {"$ref" "Message"}, :parameters {"userId" {"default" "me", "description" "The user's email address. The special value `me` can be used to indicate the authenticated user.", "location" "path", "required" true, "type" "string"}}, :description "Sends the specified message to the recipients in the `To`, `Cc`, and `Bcc` headers."}, "gmail.users.settings.updateVacation" #:compute.gcp.descriptor{:http-method :put, :path "gmail/v1/users/{userId}/settings/vacation", :request {"$ref" "VacationSettings"}, :response {"$ref" "VacationSettings"}, :parameters {"userId" {"location" "path", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "type" "string", "required" true}}, :description "Updates vacation responder settings."}, "gmail.users.drafts.delete" #:compute.gcp.descriptor{:http-method :delete, :path "gmail/v1/users/{userId}/drafts/{id}", :parameters {"userId" {"description" "The user's email address. The special value `me` can be used to indicate the authenticated user.", "required" true, "location" "path", "type" "string", "default" "me"}, "id" {"description" "The ID of the draft to delete.", "location" "path", "type" "string", "required" true}}, :description "Immediately and permanently deletes the specified draft. Does not simply trash it."}, "gmail.users.settings.filters.delete" #:compute.gcp.descriptor{:http-method :delete, :path "gmail/v1/users/{userId}/settings/filters/{id}", :parameters {"userId" {"location" "path", "required" true, "default" "me", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "type" "string"}, "id" {"description" "The ID of the filter to be deleted.", "required" true, "location" "path", "type" "string"}}, :description "Deletes a filter."}, "gmail.users.threads.untrash" #:compute.gcp.descriptor{:http-method :post, :path "gmail/v1/users/{userId}/threads/{id}/untrash", :response {"$ref" "Thread"}, :parameters {"id" {"description" "The ID of the thread to remove from Trash.", "required" true, "location" "path", "type" "string"}, "userId" {"default" "me", "type" "string", "required" true, "description" "The user's email address. The special value `me` can be used to indicate the authenticated user.", "location" "path"}}, :description "Removes the specified thread from the trash."}, "gmail.users.settings.updatePop" #:compute.gcp.descriptor{:http-method :put, :path "gmail/v1/users/{userId}/settings/pop", :request {"$ref" "PopSettings"}, :response {"$ref" "PopSettings"}, :parameters {"userId" {"required" true, "default" "me", "type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "location" "path"}}, :description "Updates POP settings."}, "gmail.users.settings.sendAs.update" #:compute.gcp.descriptor{:http-method :put, :path "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}", :request {"$ref" "SendAs"}, :response {"$ref" "SendAs"}, :parameters {"sendAsEmail" {"description" "The send-as alias to be updated.", "required" true, "location" "path", "type" "string"}, "userId" {"default" "me", "type" "string", "required" true, "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "location" "path"}}, :description "Updates a send-as alias. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias. Addresses other than the primary address for the account can only be updated by service account clients that have been delegated domain-wide authority."}, "gmail.users.drafts.get" #:compute.gcp.descriptor{:http-method :get, :path "gmail/v1/users/{userId}/drafts/{id}", :response {"$ref" "Draft"}, :parameters {"id" {"location" "path", "description" "The ID of the draft to retrieve.", "required" true, "type" "string"}, "format" {"location" "query", "default" "full", "enum" ["minimal" "full" "raw" "metadata"], "enumDescriptions" ["Returns only email message ID and labels; does not return the email headers, body, or payload." "Returns the full email message data with body content parsed in the `payload` field; the `raw` field is not used. Format cannot be used when accessing the api using the gmail.metadata scope." "Returns the full email message data with body content in the `raw` field as a base64url encoded string; the `payload` field is not used. Format cannot be used when accessing the api using the gmail.metadata scope." "Returns only email message ID, labels, and email headers."], "type" "string", "description" "The format to return the draft in."}, "userId" {"description" "The user's email address. The special value `me` can be used to indicate the authenticated user.", "required" true, "default" "me", "type" "string", "location" "path"}}, :description "Gets the specified draft."}}, :schemas {"SmimeInfo" {"type" "object", "id" "SmimeInfo", "description" "An S/MIME email config.", "properties" {"expiration" {"format" "int64", "type" "string", "description" "When the certificate expires (in milliseconds since epoch)."}, "encryptedKeyPassword" {"description" "Encrypted key password, when key is encrypted.", "type" "string"}, "pkcs12" {"type" "string", "format" "byte", "description" "PKCS#12 format containing a single private/public key pair and certificate chain. This format is only accepted from client for creating a new SmimeInfo and is never returned, because the private key is not intended to be exported. PKCS#12 may be encrypted, in which case encryptedKeyPassword should be set appropriately."}, "pem" {"type" "string", "description" "PEM formatted X509 concatenated certificate string (standard base64 encoding). Format used for returning key, which includes public key as well as certificate chain (not private key)."}, "isDefault" {"type" "boolean", "description" "Whether this SmimeInfo is the default one for this user's send-as address."}, "id" {"description" "The immutable ID for the SmimeInfo.", "type" "string"}, "issuerCn" {"type" "string", "description" "The S/MIME certificate issuer's common name."}}}, "ListHistoryResponse" {"type" "object", "properties" {"historyId" {"format" "uint64", "type" "string", "description" "The ID of the mailbox's current history record."}, "nextPageToken" {"type" "string", "description" "Page token to retrieve the next page of results in the list."}, "history" {"type" "array", "items" {"$ref" "History"}, "description" "List of history records. Any `messages` contained in the response will typically only have `id` and `threadId` fields populated."}}, "id" "ListHistoryResponse"}, "ImapSettings" {"properties" {"enabled" {"type" "boolean", "description" "Whether IMAP is enabled for the account."}, "autoExpunge" {"description" "If this value is true, Gmail will immediately expunge a message when it is marked as deleted in IMAP. Otherwise, Gmail will wait for an update from the client before expunging messages marked as deleted.", "type" "boolean"}, "expungeBehavior" {"enum" ["expungeBehaviorUnspecified" "archive" "trash" "deleteForever"], "type" "string", "description" "The action that will be executed on a message when it is marked as deleted and expunged from the last visible IMAP folder.", "enumDescriptions" ["Unspecified behavior." "Archive messages marked as deleted." "Move messages marked as deleted to the trash." "Immediately and permanently delete messages marked as deleted. The expunged messages cannot be recovered."]}, "maxFolderSize" {"type" "integer", "format" "int32", "description" "An optional limit on the number of messages that an IMAP folder may contain. Legal values are 0, 1000, 2000, 5000 or 10000. A value of zero is interpreted to mean that there is no limit."}}, "description" "IMAP settings for an account.", "type" "object", "id" "ImapSettings"}, "Draft" {"properties" {"message" {"description" "The message content of the draft.", "$ref" "Message"}, "id" {"description" "The immutable ID of the draft.", "type" "string", "annotations" {"required" ["gmail.users.drafts.send"]}}}, "type" "object", "description" "A draft email in the user's mailbox.", "id" "Draft"}, "Filter" {"id" "Filter", "type" "object", "properties" {"id" {"type" "string", "description" "The server assigned ID of the filter."}, "action" {"description" "Action that the filter performs.", "$ref" "FilterAction"}, "criteria" {"$ref" "FilterCriteria", "description" "Matching criteria for the filter."}}, "description" "Resource definition for Gmail filters. Filters apply to specific messages instead of an entire email thread."}, "LanguageSettings" {"id" "LanguageSettings", "type" "object", "description" "Language settings for an account. These settings correspond to the \"Language settings\" feature in the web interface.", "properties" {"displayLanguage" {"type" "string", "description" "The language to display Gmail in, formatted as an RFC 3066 Language Tag (for example `en-GB`, `fr` or `ja` for British English, French, or Japanese respectively). The set of languages supported by Gmail evolves over time, so please refer to the \"Language\" dropdown in the Gmail settings for all available options, as described in the language settings help article. A table of sample values is also provided in the Managing Language Settings guide Not all Gmail clients can display the same set of languages. In the case that a user's display language is not available for use on a particular client, said client automatically chooses to display in the closest supported variant (or a reasonable default)."}}}, "HistoryMessageAdded" {"id" "HistoryMessageAdded", "properties" {"message" {"$ref" "Message"}}, "type" "object"}, "Thread" {"description" "A collection of messages representing a conversation.", "type" "object", "id" "Thread", "properties" {"messages" {"items" {"$ref" "Message"}, "type" "array", "description" "The list of messages in the thread."}, "snippet" {"description" "A short part of the message text.", "type" "string"}, "id" {"description" "The unique ID of the thread.", "type" "string"}, "historyId" {"format" "uint64", "type" "string", "description" "The ID of the last history record that modified this thread."}}}, "ListSmimeInfoResponse" {"type" "object", "properties" {"smimeInfo" {"type" "array", "description" "List of SmimeInfo.", "items" {"$ref" "SmimeInfo"}}}, "id" "ListSmimeInfoResponse"}, "WatchRequest" {"type" "object", "id" "WatchRequest", "description" "Set up or update a new push notification watch on this user's mailbox.", "properties" {"labelFilterAction" {"enum" ["include" "exclude"], "type" "string", "enumDescriptions" ["Only get push notifications for message changes relating to labelIds specified." "Get push notifications for all message changes except those relating to labelIds specified."], "description" "Filtering behavior of labelIds list specified."}, "topicName" {"description" "A fully qualified Google Cloud Pub/Sub API topic name to publish the events to. This topic name **must** already exist in Cloud Pub/Sub and you **must** have already granted gmail \"publish\" permission on it. For example, \"projects/my-project-identifier/topics/my-topic-name\" (using the Cloud Pub/Sub \"v1\" topic naming format). Note that the \"my-project-identifier\" portion must exactly match your Google developer project id (the one executing this watch request).", "type" "string"}, "labelIds" {"description" "List of label_ids to restrict notifications about. By default, if unspecified, all changes are pushed out. If specified then dictates which labels are required for a push notification to be generated.", "items" {"type" "string"}, "type" "array"}}}, "ListSendAsResponse" {"id" "ListSendAsResponse", "properties" {"sendAs" {"items" {"$ref" "SendAs"}, "type" "array", "description" "List of send-as aliases."}}, "description" "Response for the ListSendAs method.", "type" "object"}, "ModifyThreadRequest" {"properties" {"addLabelIds" {"description" "A list of IDs of labels to add to this thread.", "type" "array", "items" {"type" "string"}}, "removeLabelIds" {"type" "array", "description" "A list of IDs of labels to remove from this thread.", "items" {"type" "string"}}}, "type" "object", "id" "ModifyThreadRequest"}, "BatchModifyMessagesRequest" {"type" "object", "properties" {"addLabelIds" {"description" "A list of label IDs to add to messages.", "items" {"type" "string"}, "type" "array"}, "removeLabelIds" {"items" {"type" "string"}, "description" "A list of label IDs to remove from messages.", "type" "array"}, "ids" {"items" {"type" "string"}, "description" "The IDs of the messages to modify. There is a limit of 1000 ids per request.", "type" "array"}}, "id" "BatchModifyMessagesRequest"}, "MessagePartBody" {"id" "MessagePartBody", "properties" {"data" {"type" "string", "description" "The body data of a MIME message part as a base64url encoded string. May be empty for MIME container types that have no message body or when the body data is sent as a separate attachment. An attachment ID is present if the body data is contained in a separate attachment.", "format" "byte"}, "attachmentId" {"type" "string", "description" "When present, contains the ID of an external attachment that can be retrieved in a separate `messages.attachments.get` request. When not present, the entire content of the message part body is contained in the data field."}, "size" {"format" "int32", "type" "integer", "description" "Number of bytes for the message part data (encoding notwithstanding)."}}, "type" "object", "description" "The body of a single MIME message part."}, "SendAs" {"type" "object", "properties" {"replyToAddress" {"type" "string", "description" "An optional email address that is included in a \"Reply-To:\" header for mail sent using this alias. If this is empty, Gmail will not generate a \"Reply-To:\" header."}, "displayName" {"description" "A name that appears in the \"From:\" header for mail sent using this alias. For custom \"from\" addresses, when this is empty, Gmail will populate the \"From:\" header with the name that is used for the primary address associated with the account. If the admin has disabled the ability for users to update their name format, requests to update this field for the primary login will silently fail.", "type" "string"}, "smtpMsa" {"description" "An optional SMTP service that will be used as an outbound relay for mail sent using this alias. If this is empty, outbound mail will be sent directly from Gmail's servers to the destination SMTP service. This setting only applies to custom \"from\" aliases.", "$ref" "SmtpMsa"}, "treatAsAlias" {"description" "Whether Gmail should treat this address as an alias for the user's primary email address. This setting only applies to custom \"from\" aliases.", "type" "boolean"}, "signature" {"description" "An optional HTML signature that is included in messages composed with this alias in the Gmail web UI.", "type" "string"}, "verificationStatus" {"description" "Indicates whether this address has been verified for use as a send-as alias. Read-only. This setting only applies to custom \"from\" aliases.", "type" "string", "enum" ["verificationStatusUnspecified" "accepted" "pending"], "enumDescriptions" ["Unspecified verification status." "The address is ready to use as a send-as alias." "The address is awaiting verification by the owner."]}, "sendAsEmail" {"type" "string", "description" "The email address that appears in the \"From:\" header for mail sent using this alias. This is read-only for all operations except create."}, "isDefault" {"description" "Whether this address is selected as the default \"From:\" address in situations such as composing a new message or sending a vacation auto-reply. Every Gmail account has exactly one default send-as address, so the only legal value that clients may write to this field is `true`. Changing this from `false` to `true` for an address will result in this field becoming `false` for the other previous default address.", "type" "boolean"}, "isPrimary" {"type" "boolean", "description" "Whether this address is the primary address used to login to the account. Every Gmail account has exactly one primary address, and it cannot be deleted from the collection of send-as aliases. This field is read-only."}}, "description" "Settings associated with a send-as alias, which can be either the primary login address associated with the account or a custom \"from\" address. Send-as aliases correspond to the \"Send Mail As\" feature in the web interface.", "id" "SendAs"}, "LabelColor" {"type" "object", "id" "LabelColor", "properties" {"textColor" {"type" "string", "description" "The text color of the label, represented as hex string. This field is required in order to set the color of a label. Only the following predefined set of color values are allowed: \\#000000, #434343, #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff, \\#fb4c2f, #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3, \\#f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5, #fcdee8, \\#efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9, \\#e66550, #ffbc6b, #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0, \\#cc3a21, #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798, \\#ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b, #b65775, \\#822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c \\#464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff, \\#711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706, #ffdeb5, \\#594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1, \\#c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46, \\#662e37, #ebdbde, #cca6ac, #094228, #42d692, #16a765"}, "backgroundColor" {"type" "string", "description" "The background color represented as hex string #RRGGBB (ex #000000). This field is required in order to set the color of a label. Only the following predefined set of color values are allowed: \\#000000, #434343, #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff, \\#fb4c2f, #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3, \\#f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5, #fcdee8, \\#efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9, \\#e66550, #ffbc6b, #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0, \\#cc3a21, #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798, \\#ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b, #b65775, \\#822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c \\#464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff, \\#711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706, #ffdeb5, \\#594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1, \\#c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46, \\#662e37, #ebdbde, #cca6ac, #094228, #42d692, #16a765"}}}, "ModifyMessageRequest" {"type" "object", "id" "ModifyMessageRequest", "properties" {"addLabelIds" {"type" "array", "description" "A list of IDs of labels to add to this message.", "items" {"type" "string"}}, "removeLabelIds" {"items" {"type" "string"}, "description" "A list IDs of labels to remove from this message.", "type" "array"}}}, "History" {"id" "History", "type" "object", "description" "A record of a change to the user's mailbox. Each history change may affect multiple messages in multiple ways.", "properties" {"labelsRemoved" {"items" {"$ref" "HistoryLabelRemoved"}, "type" "array", "description" "Labels removed from messages in this history record."}, "id" {"description" "The mailbox sequence ID.", "type" "string", "format" "uint64"}, "messages" {"type" "array", "items" {"$ref" "Message"}, "description" "List of messages changed in this history record. The fields for specific change types, such as `messagesAdded` may duplicate messages in this field. We recommend using the specific change-type fields instead of this."}, "messagesDeleted" {"type" "array", "items" {"$ref" "HistoryMessageDeleted"}, "description" "Messages deleted (not Trashed) from the mailbox in this history record."}, "labelsAdded" {"items" {"$ref" "HistoryLabelAdded"}, "description" "Labels added to messages in this history record.", "type" "array"}, "messagesAdded" {"type" "array", "description" "Messages added to the mailbox in this history record.", "items" {"$ref" "HistoryMessageAdded"}}}}, "ForwardingAddress" {"type" "object", "description" "Settings for a forwarding address.", "properties" {"verificationStatus" {"description" "Indicates whether this address has been verified and is usable for forwarding. Read-only.", "enumDescriptions" ["Unspecified verification status." "The address is ready to use for forwarding." "The address is awaiting verification by the owner."], "type" "string", "enum" ["verificationStatusUnspecified" "accepted" "pending"]}, "forwardingEmail" {"description" "An email address to which messages can be forwarded.", "type" "string"}}, "id" "ForwardingAddress"}, "Profile" {"properties" {"threadsTotal" {"format" "int32", "type" "integer", "description" "The total number of threads in the mailbox."}, "emailAddress" {"type" "string", "description" "The user's email address."}, "historyId" {"type" "string", "format" "uint64", "description" "The ID of the mailbox's current history record."}, "messagesTotal" {"description" "The total number of messages in the mailbox.", "format" "int32", "type" "integer"}}, "description" "Profile for a Gmail user.", "type" "object", "id" "Profile"}, "Delegate" {"properties" {"verificationStatus" {"enum" ["verificationStatusUnspecified" "accepted" "pending" "rejected" "expired"], "type" "string", "enumDescriptions" ["Unspecified verification status." "The address can act a delegate for the account." "A verification request was mailed to the address, and the owner has not yet accepted it." "A verification request was mailed to the address, and the owner rejected it." "A verification request was mailed to the address, and it expired without verification."], "description" "Indicates whether this address has been verified and can act as a delegate for the account. Read-only."}, "delegateEmail" {"type" "string", "description" "The email address of the delegate."}}, "description" "Settings for a delegate. Delegates can read, send, and delete messages, as well as view and add contacts, for the delegator's account. See \"Set up mail delegation\" for more information about delegates.", "id" "Delegate", "type" "object"}, "Message" {"type" "object", "id" "Message", "properties" {"threadId" {"type" "string", "description" "The ID of the thread the message belongs to. To add a message or draft to a thread, the following criteria must be met: 1. The requested `threadId` must be specified on the `Message` or `Draft.Message` you supply with your request. 2. The `References` and `In-Reply-To` headers must be set in compliance with the [RFC 2822](https://tools.ietf.org/html/rfc2822) standard. 3. The `Subject` headers must match. "}, "snippet" {"type" "string", "description" "A short part of the message text."}, "historyId" {"format" "uint64", "description" "The ID of the last history record that modified this message.", "type" "string"}, "labelIds" {"type" "array", "items" {"type" "string"}, "description" "List of IDs of labels applied to this message."}, "id" {"type" "string", "description" "The immutable ID of the message."}, "sizeEstimate" {"type" "integer", "description" "Estimated size in bytes of the message.", "format" "int32"}, "raw" {"description" "The entire email message in an RFC 2822 formatted and base64url encoded string. Returned in `messages.get` and `drafts.get` responses when the `format=RAW` parameter is supplied.", "format" "byte", "annotations" {"required" ["gmail.users.drafts.create" "gmail.users.drafts.update" "gmail.users.messages.insert" "gmail.users.messages.send"]}, "type" "string"}, "payload" {"$ref" "MessagePart", "description" "The parsed email structure in the message parts."}, "internalDate" {"type" "string", "format" "int64", "description" "The internal message creation timestamp (epoch ms), which determines ordering in the inbox. For normal SMTP-received email, this represents the time the message was originally accepted by Google, which is more reliable than the `Date` header. However, for API-migrated mail, it can be configured by client to be based on the `Date` header."}}, "description" "An email message."}, "MessagePart" {"description" "A single MIME message part.", "id" "MessagePart", "properties" {"parts" {"items" {"$ref" "MessagePart"}, "description" "The child MIME message parts of this part. This only applies to container MIME message parts, for example `multipart/*`. For non- container MIME message part types, such as `text/plain`, this field is empty. For more information, see RFC 1521.", "type" "array"}, "body" {"description" "The message part body for this part, which may be empty for container MIME message parts.", "$ref" "MessagePartBody"}, "mimeType" {"description" "The MIME type of the message part.", "type" "string"}, "headers" {"type" "array", "description" "List of headers on this message part. For the top-level message part, representing the entire message payload, it will contain the standard RFC 2822 email headers such as `To`, `From`, and `Subject`.", "items" {"$ref" "MessagePartHeader"}}, "partId" {"description" "The immutable ID of the message part.", "type" "string"}, "filename" {"type" "string", "description" "The filename of the attachment. Only present if this message part represents an attachment."}}, "type" "object"}, "HistoryLabelRemoved" {"type" "object", "id" "HistoryLabelRemoved", "properties" {"labelIds" {"type" "array", "description" "Label IDs removed from the message.", "items" {"type" "string"}}, "message" {"$ref" "Message"}}}, "AutoForwarding" {"id" "AutoForwarding", "description" "Auto-forwarding settings for an account.", "type" "object", "properties" {"disposition" {"enumDescriptions" ["Unspecified disposition." "Leave the message in the `INBOX`." "Archive the message." "Move the message to the `TRASH`." "Leave the message in the `INBOX` and mark it as read."], "enum" ["dispositionUnspecified" "leaveInInbox" "archive" "trash" "markRead"], "type" "string", "description" "The state that a message should be left in after it has been forwarded."}, "emailAddress" {"description" "Email address to which all incoming messages are forwarded. This email address must be a verified member of the forwarding addresses.", "type" "string"}, "enabled" {"description" "Whether all incoming mail is automatically forwarded to another address.", "type" "boolean"}}}, "ListForwardingAddressesResponse" {"properties" {"forwardingAddresses" {"items" {"$ref" "ForwardingAddress"}, "type" "array", "description" "List of addresses that may be used for forwarding."}}, "description" "Response for the ListForwardingAddresses method.", "type" "object", "id" "ListForwardingAddressesResponse"}, "HistoryLabelAdded" {"properties" {"message" {"$ref" "Message"}, "labelIds" {"items" {"type" "string"}, "description" "Label IDs added to the message.", "type" "array"}}, "id" "HistoryLabelAdded", "type" "object"}, "FilterCriteria" {"description" "Message matching criteria.", "id" "FilterCriteria", "properties" {"hasAttachment" {"description" "Whether the message has any attachment.", "type" "boolean"}, "negatedQuery" {"type" "string", "description" "Only return messages not matching the specified query. Supports the same query format as the Gmail search box. For example, `\"from:someuser@example.com rfc822msgid: is:unread\"`."}, "query" {"description" "Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, `\"from:someuser@example.com rfc822msgid: is:unread\"`.", "type" "string"}, "sizeComparison" {"description" "How the message size in bytes should be in relation to the size field.", "type" "string", "enum" ["unspecified" "smaller" "larger"], "enumDescriptions" ["" "Find messages smaller than the given size." "Find messages larger than the given size."]}, "subject" {"type" "string", "description" "Case-insensitive phrase found in the message's subject. Trailing and leading whitespace are be trimmed and adjacent spaces are collapsed."}, "excludeChats" {"type" "boolean", "description" "Whether the response should exclude chats."}, "from" {"type" "string", "description" "The sender's display name or email address."}, "size" {"type" "integer", "description" "The size of the entire RFC822 message in bytes, including all headers and attachments.", "format" "int32"}, "to" {"description" "The recipient's display name or email address. Includes recipients in the \"to\", \"cc\", and \"bcc\" header fields. You can use simply the local part of the email address. For example, \"example\" and \"example@\" both match \"example@gmail.com\". This field is case-insensitive.", "type" "string"}}, "type" "object"}, "Label" {"id" "Label", "properties" {"threadsUnread" {"format" "int32", "description" "The number of unread threads with the label.", "type" "integer"}, "messagesUnread" {"format" "int32", "type" "integer", "description" "The number of unread messages with the label."}, "messageListVisibility" {"annotations" {"required" ["gmail.users.labels.create" "gmail.users.labels.update"]}, "type" "string", "enum" ["show" "hide"], "description" "The visibility of messages with this label in the message list in the Gmail web interface.", "enumDescriptions" ["Show the label in the message list." "Do not show the label in the message list."]}, "id" {"description" "The immutable ID of the label.", "annotations" {"required" ["gmail.users.labels.update"]}, "type" "string"}, "threadsTotal" {"description" "The total number of threads with the label.", "type" "integer", "format" "int32"}, "name" {"annotations" {"required" ["gmail.users.labels.create" "gmail.users.labels.update"]}, "type" "string", "description" "The display name of the label."}, "type" {"enumDescriptions" ["Labels created by Gmail." "Custom labels created by the user or application."], "type" "string", "description" "The owner type for the label. User labels are created by the user and can be modified and deleted by the user and can be applied to any message or thread. System labels are internally created and cannot be added, modified, or deleted. System labels may be able to be applied to or removed from messages and threads under some circumstances but this is not guaranteed. For example, users can apply and remove the `INBOX` and `UNREAD` labels from messages and threads, but cannot apply or remove the `DRAFTS` or `SENT` labels from messages or threads.", "enum" ["system" "user"]}, "messagesTotal" {"format" "int32", "type" "integer", "description" "The total number of messages with the label."}, "labelListVisibility" {"description" "The visibility of the label in the label list in the Gmail web interface.", "annotations" {"required" ["gmail.users.labels.create" "gmail.users.labels.update"]}, "enumDescriptions" ["Show the label in the label list." "Show the label if there are any unread messages with that label." "Do not show the label in the label list."], "enum" ["labelShow" "labelShowIfUnread" "labelHide"], "type" "string"}, "color" {"$ref" "LabelColor", "description" "The color to assign to the label. Color is only available for labels that have their `type` set to `user`."}}, "type" "object", "description" "Labels are used to categorize messages and threads within the user's mailbox."}, "ListMessagesResponse" {"id" "ListMessagesResponse", "type" "object", "properties" {"nextPageToken" {"type" "string", "description" "Token to retrieve the next page of results in the list."}, "resultSizeEstimate" {"type" "integer", "format" "uint32", "description" "Estimated total number of results."}, "messages" {"type" "array", "items" {"$ref" "Message"}, "description" "List of messages. Note that each message resource contains only an `id` and a `threadId`. Additional message details can be fetched using the messages.get method."}}}, "VacationSettings" {"properties" {"responseBodyPlainText" {"description" "Response body in plain text format. If both `response_body_plain_text` and `response_body_html` are specified, `response_body_html` will be used.", "type" "string"}, "responseBodyHtml" {"type" "string", "description" "Response body in HTML format. Gmail will sanitize the HTML before storing it. If both `response_body_plain_text` and `response_body_html` are specified, `response_body_html` will be used."}, "responseSubject" {"description" "Optional text to prepend to the subject line in vacation responses. In order to enable auto-replies, either the response subject or the response body must be nonempty.", "type" "string"}, "startTime" {"type" "string", "description" "An optional start time for sending auto-replies (epoch ms). When this is specified, Gmail will automatically reply only to messages that it receives after the start time. If both `startTime` and `endTime` are specified, `startTime` must precede `endTime`.", "format" "int64"}, "restrictToDomain" {"type" "boolean", "description" "Flag that determines whether responses are sent to recipients who are outside of the user's domain. This feature is only available for G Suite users."}, "restrictToContacts" {"type" "boolean", "description" "Flag that determines whether responses are sent to recipients who are not in the user's list of contacts."}, "endTime" {"format" "int64", "description" "An optional end time for sending auto-replies (epoch ms). When this is specified, Gmail will automatically reply only to messages that it receives before the end time. If both `startTime` and `endTime` are specified, `startTime` must precede `endTime`.", "type" "string"}, "enableAutoReply" {"description" "Flag that controls whether Gmail automatically replies to messages.", "type" "boolean"}}, "type" "object", "id" "VacationSettings", "description" "Vacation auto-reply settings for an account. These settings correspond to the \"Vacation responder\" feature in the web interface."}, "ListDraftsResponse" {"type" "object", "id" "ListDraftsResponse", "properties" {"resultSizeEstimate" {"description" "Estimated total number of results.", "type" "integer", "format" "uint32"}, "drafts" {"type" "array", "description" "List of drafts. Note that the `Message` property in each `Draft` resource only contains an `id` and a `threadId`. The messages.get method can fetch additional message details.", "items" {"$ref" "Draft"}}, "nextPageToken" {"description" "Token to retrieve the next page of results in the list.", "type" "string"}}}, "PopSettings" {"type" "object", "properties" {"accessWindow" {"enum" ["accessWindowUnspecified" "disabled" "fromNowOn" "allMail"], "enumDescriptions" ["Unspecified range." "Indicates that no messages are accessible via POP." "Indicates that unfetched messages received after some past point in time are accessible via POP." "Indicates that all unfetched messages are accessible via POP."], "description" "The range of messages which are accessible via POP.", "type" "string"}, "disposition" {"type" "string", "description" "The action that will be executed on a message after it has been fetched via POP.", "enumDescriptions" ["Unspecified disposition." "Leave the message in the `INBOX`." "Archive the message." "Move the message to the `TRASH`." "Leave the message in the `INBOX` and mark it as read."], "enum" ["dispositionUnspecified" "leaveInInbox" "archive" "trash" "markRead"]}}, "id" "PopSettings", "description" "POP settings for an account."}, "ListThreadsResponse" {"id" "ListThreadsResponse", "properties" {"nextPageToken" {"type" "string", "description" "Page token to retrieve the next page of results in the list."}, "resultSizeEstimate" {"description" "Estimated total number of results.", "type" "integer", "format" "uint32"}, "threads" {"items" {"$ref" "Thread"}, "type" "array", "description" "List of threads. Note that each thread resource does not contain a list of `messages`. The list of `messages` for a given thread can be fetched using the threads.get method."}}, "type" "object"}, "FilterAction" {"properties" {"removeLabelIds" {"description" "List of labels to remove from the message.", "items" {"type" "string"}, "type" "array"}, "forward" {"description" "Email address that the message should be forwarded to.", "type" "string"}, "addLabelIds" {"type" "array", "description" "List of labels to add to the message.", "items" {"type" "string"}}}, "id" "FilterAction", "type" "object", "description" "A set of actions to perform on a message."}, "BatchDeleteMessagesRequest" {"type" "object", "id" "BatchDeleteMessagesRequest", "properties" {"ids" {"items" {"type" "string"}, "description" "The IDs of the messages to delete.", "type" "array"}}}, "HistoryMessageDeleted" {"type" "object", "properties" {"message" {"$ref" "Message"}}, "id" "HistoryMessageDeleted"}, "MessagePartHeader" {"id" "MessagePartHeader", "type" "object", "properties" {"value" {"type" "string", "description" "The value of the header after the `:` separator. For example, `someuser@example.com`."}, "name" {"description" "The name of the header before the `:` separator. For example, `To`.", "type" "string"}}}, "ListFiltersResponse" {"description" "Response for the ListFilters method.", "id" "ListFiltersResponse", "properties" {"filter" {"items" {"$ref" "Filter"}, "description" "List of a user's filters.", "type" "array"}}, "type" "object"}, "SmtpMsa" {"type" "object", "properties" {"username" {"description" "The username that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.", "type" "string"}, "port" {"format" "int32", "type" "integer", "description" "The port of the SMTP service. Required."}, "securityMode" {"description" "The protocol that will be used to secure communication with the SMTP service. Required.", "type" "string", "enumDescriptions" ["Unspecified security mode." "Communication with the remote SMTP service is unsecured. Requires port 25." "Communication with the remote SMTP service is secured using SSL." "Communication with the remote SMTP service is secured using STARTTLS."], "enum" ["securityModeUnspecified" "none" "ssl" "starttls"]}, "host" {"type" "string", "description" "The hostname of the SMTP service. Required."}, "password" {"description" "The password that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.", "type" "string"}}, "id" "SmtpMsa", "description" "Configuration for communication with an SMTP service."}, "ListDelegatesResponse" {"description" "Response for the ListDelegates method.", "type" "object", "properties" {"delegates" {"description" "List of the user's delegates (with any verification status). If an account doesn't have delegates, this field doesn't appear.", "type" "array", "items" {"$ref" "Delegate"}}}, "id" "ListDelegatesResponse"}, "ListLabelsResponse" {"properties" {"labels" {"type" "array", "description" "List of labels. Note that each label resource only contains an `id`, `name`, `messageListVisibility`, `labelListVisibility`, and `type`. The labels.get method can fetch additional label details.", "items" {"$ref" "Label"}}}, "type" "object", "id" "ListLabelsResponse"}, "WatchResponse" {"type" "object", "description" "Push notification watch response.", "id" "WatchResponse", "properties" {"expiration" {"description" "When Gmail will stop sending notifications for mailbox updates (epoch millis). Call `watch` again before this time to renew the watch.", "format" "int64", "type" "string"}, "historyId" {"format" "uint64", "description" "The ID of the mailbox's current history record.", "type" "string"}}}}}