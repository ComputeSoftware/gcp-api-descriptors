#:compute.gcp.descriptor{:name "gmail", :title "Gmail API", :api-version "v1", :revision "20200203", :endpoint #:compute.gcp.descriptor{:url "https://www.googleapis.com/", :batch-path "batch/gmail/v1", :service-path "gmail/v1/users/"}, :parameters {"alt" {"type" "string", "description" "Data format for the response.", "default" "json", "enum" ["json"], "enumDescriptions" ["Responses with Content-Type of application/json"], "location" "query"}, "fields" {"type" "string", "description" "Selector specifying which fields to include in a partial response.", "location" "query"}, "key" {"type" "string", "description" "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.", "location" "query"}, "oauth_token" {"type" "string", "description" "OAuth 2.0 token for the current user.", "location" "query"}, "prettyPrint" {"type" "boolean", "description" "Returns response with indentations and line breaks.", "default" "true", "location" "query"}, "quotaUser" {"type" "string", "description" "An opaque string that represents a user for quota purposes. Must not exceed 40 characters.", "location" "query"}, "userIp" {"type" "string", "description" "Deprecated. Please use quotaUser instead.", "location" "query"}}, :op->info {"gmail.users.settings.delegates.get" #:compute.gcp.descriptor{:http-method :get, :path "{userId}/settings/delegates/{delegateEmail}", :response {"$ref" "Delegate"}, :parameters {"delegateEmail" {"type" "string", "description" "The email address of the user whose delegate relationship is to be retrieved.", "required" true, "location" "path"}, "userId" {"type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Gets the specified delegate.\n\nNote that a delegate user must be referred to by their primary email address, and not an email alias.\n\nThis method is only available to service account clients that have been delegated domain-wide authority."}, "gmail.users.labels.create" #:compute.gcp.descriptor{:http-method :post, :path "{userId}/labels", :request {"$ref" "Label"}, :response {"$ref" "Label"}, :parameters {"userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Creates a new label."}, "gmail.users.settings.getLanguage" #:compute.gcp.descriptor{:http-method :get, :path "{userId}/settings/language", :response {"$ref" "LanguageSettings"}, :parameters {"userId" {"type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Gets language settings."}, "gmail.users.messages.attachments.get" #:compute.gcp.descriptor{:http-method :get, :path "{userId}/messages/{messageId}/attachments/{id}", :response {"$ref" "MessagePartBody"}, :parameters {"id" {"type" "string", "description" "The ID of the attachment.", "required" true, "location" "path"}, "messageId" {"type" "string", "description" "The ID of the message containing the attachment.", "required" true, "location" "path"}, "userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Gets the specified message attachment."}, "gmail.users.settings.forwardingAddresses.get" #:compute.gcp.descriptor{:http-method :get, :path "{userId}/settings/forwardingAddresses/{forwardingEmail}", :response {"$ref" "ForwardingAddress"}, :parameters {"forwardingEmail" {"type" "string", "description" "The forwarding address to be retrieved.", "required" true, "location" "path"}, "userId" {"type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Gets the specified forwarding address."}, "gmail.users.labels.delete" #:compute.gcp.descriptor{:http-method :delete, :path "{userId}/labels/{id}", :parameters {"id" {"type" "string", "description" "The ID of the label to delete.", "required" true, "location" "path"}, "userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Immediately and permanently deletes the specified label and removes it from any messages and threads that it is applied to."}, "gmail.users.settings.delegates.delete" #:compute.gcp.descriptor{:http-method :delete, :path "{userId}/settings/delegates/{delegateEmail}", :parameters {"delegateEmail" {"type" "string", "description" "The email address of the user to be removed as a delegate.", "required" true, "location" "path"}, "userId" {"type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Removes the specified delegate (which can be of any verification status), and revokes any verification that may have been required for using it.\n\nNote that a delegate user must be referred to by their primary email address, and not an email alias.\n\nThis method is only available to service account clients that have been delegated domain-wide authority."}, "gmail.users.threads.modify" #:compute.gcp.descriptor{:http-method :post, :path "{userId}/threads/{id}/modify", :request {"$ref" "ModifyThreadRequest"}, :response {"$ref" "Thread"}, :parameters {"id" {"type" "string", "description" "The ID of the thread to modify.", "required" true, "location" "path"}, "userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Modifies the labels applied to the thread. This applies to all messages in the thread."}, "gmail.users.messages.modify" #:compute.gcp.descriptor{:http-method :post, :path "{userId}/messages/{id}/modify", :request {"$ref" "ModifyMessageRequest"}, :response {"$ref" "Message"}, :parameters {"id" {"type" "string", "description" "The ID of the message to modify.", "required" true, "location" "path"}, "userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Modifies the labels on the specified message."}, "gmail.users.settings.forwardingAddresses.create" #:compute.gcp.descriptor{:http-method :post, :path "{userId}/settings/forwardingAddresses", :request {"$ref" "ForwardingAddress"}, :response {"$ref" "ForwardingAddress"}, :parameters {"userId" {"type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Creates a forwarding address. If ownership verification is required, a message will be sent to the recipient and the resource's verification status will be set to pending; otherwise, the resource will be created with verification status set to accepted.\n\nThis method is only available to service account clients that have been delegated domain-wide authority."}, "gmail.users.messages.batchDelete" #:compute.gcp.descriptor{:http-method :post, :path "{userId}/messages/batchDelete", :request {"$ref" "BatchDeleteMessagesRequest"}, :parameters {"userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Deletes many messages by message ID. Provides no guarantees that messages were not already deleted or even existed at all."}, "gmail.users.settings.getImap" #:compute.gcp.descriptor{:http-method :get, :path "{userId}/settings/imap", :response {"$ref" "ImapSettings"}, :parameters {"userId" {"type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Gets IMAP settings."}, "gmail.users.settings.sendAs.list" #:compute.gcp.descriptor{:http-method :get, :path "{userId}/settings/sendAs", :response {"$ref" "ListSendAsResponse"}, :parameters {"userId" {"type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Lists the send-as aliases for the specified account. The result includes the primary send-as address associated with the account as well as any custom \"from\" aliases."}, "gmail.users.settings.sendAs.patch" #:compute.gcp.descriptor{:http-method :patch, :path "{userId}/settings/sendAs/{sendAsEmail}", :request {"$ref" "SendAs"}, :response {"$ref" "SendAs"}, :parameters {"sendAsEmail" {"type" "string", "description" "The send-as alias to be updated.", "required" true, "location" "path"}, "userId" {"type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Updates a send-as alias. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias.\n\nAddresses other than the primary address for the account can only be updated by service account clients that have been delegated domain-wide authority. This method supports patch semantics."}, "gmail.users.settings.sendAs.smimeInfo.insert" #:compute.gcp.descriptor{:http-method :post, :path "{userId}/settings/sendAs/{sendAsEmail}/smimeInfo", :request {"$ref" "SmimeInfo"}, :response {"$ref" "SmimeInfo"}, :parameters {"sendAsEmail" {"type" "string", "description" "The email address that appears in the \"From:\" header for mail sent using this alias.", "required" true, "location" "path"}, "userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Insert (upload) the given S/MIME config for the specified send-as alias. Note that pkcs12 format is required for the key."}, "gmail.users.getProfile" #:compute.gcp.descriptor{:http-method :get, :path "{userId}/profile", :response {"$ref" "Profile"}, :parameters {"userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Gets the current user's Gmail profile."}, "gmail.users.messages.get" #:compute.gcp.descriptor{:http-method :get, :path "{userId}/messages/{id}", :response {"$ref" "Message"}, :parameters {"format" {"type" "string", "description" "The format to return the message in.", "default" "full", "enum" ["full" "metadata" "minimal" "raw"], "enumDescriptions" ["" "" "" ""], "location" "query"}, "id" {"type" "string", "description" "The ID of the message to retrieve.", "required" true, "location" "path"}, "metadataHeaders" {"type" "string", "description" "When given and format is METADATA, only include headers specified.", "repeated" true, "location" "query"}, "userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Gets the specified message."}, "gmail.users.messages.batchModify" #:compute.gcp.descriptor{:http-method :post, :path "{userId}/messages/batchModify", :request {"$ref" "BatchModifyMessagesRequest"}, :parameters {"userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Modifies the labels on the specified messages."}, "gmail.users.drafts.create" #:compute.gcp.descriptor{:http-method :post, :path "{userId}/drafts", :request {"$ref" "Draft"}, :response {"$ref" "Draft"}, :parameters {"userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Creates a new draft with the DRAFT label."}, "gmail.users.settings.filters.get" #:compute.gcp.descriptor{:http-method :get, :path "{userId}/settings/filters/{id}", :response {"$ref" "Filter"}, :parameters {"id" {"type" "string", "description" "The ID of the filter to be fetched.", "required" true, "location" "path"}, "userId" {"type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Gets a filter."}, "gmail.users.labels.get" #:compute.gcp.descriptor{:http-method :get, :path "{userId}/labels/{id}", :response {"$ref" "Label"}, :parameters {"id" {"type" "string", "description" "The ID of the label to retrieve.", "required" true, "location" "path"}, "userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Gets the specified label."}, "gmail.users.settings.filters.list" #:compute.gcp.descriptor{:http-method :get, :path "{userId}/settings/filters", :response {"$ref" "ListFiltersResponse"}, :parameters {"userId" {"type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Lists the message filters of a Gmail user."}, "gmail.users.settings.sendAs.smimeInfo.delete" #:compute.gcp.descriptor{:http-method :delete, :path "{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}", :parameters {"id" {"type" "string", "description" "The immutable ID for the SmimeInfo.", "required" true, "location" "path"}, "sendAsEmail" {"type" "string", "description" "The email address that appears in the \"From:\" header for mail sent using this alias.", "required" true, "location" "path"}, "userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Deletes the specified S/MIME config for the specified send-as alias."}, "gmail.users.settings.getVacation" #:compute.gcp.descriptor{:http-method :get, :path "{userId}/settings/vacation", :response {"$ref" "VacationSettings"}, :parameters {"userId" {"type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Gets vacation responder settings."}, "gmail.users.threads.get" #:compute.gcp.descriptor{:http-method :get, :path "{userId}/threads/{id}", :response {"$ref" "Thread"}, :parameters {"format" {"type" "string", "description" "The format to return the messages in.", "default" "full", "enum" ["full" "metadata" "minimal"], "enumDescriptions" ["" "" ""], "location" "query"}, "id" {"type" "string", "description" "The ID of the thread to retrieve.", "required" true, "location" "path"}, "metadataHeaders" {"type" "string", "description" "When given and format is METADATA, only include headers specified.", "repeated" true, "location" "query"}, "userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Gets the specified thread."}, "gmail.users.settings.updateLanguage" #:compute.gcp.descriptor{:http-method :put, :path "{userId}/settings/language", :request {"$ref" "LanguageSettings"}, :response {"$ref" "LanguageSettings"}, :parameters {"userId" {"type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Updates language settings.\n\nIf successful, the return object contains the displayLanguage that was saved for the user, which may differ from the value passed into the request. This is because the requested displayLanguage may not be directly supported by Gmail but have a close variant that is, and so the variant may be chosen and saved instead."}, "gmail.users.settings.forwardingAddresses.delete" #:compute.gcp.descriptor{:http-method :delete, :path "{userId}/settings/forwardingAddresses/{forwardingEmail}", :parameters {"forwardingEmail" {"type" "string", "description" "The forwarding address to be deleted.", "required" true, "location" "path"}, "userId" {"type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Deletes the specified forwarding address and revokes any verification that may have been required.\n\nThis method is only available to service account clients that have been delegated domain-wide authority."}, "gmail.users.messages.import" #:compute.gcp.descriptor{:http-method :post, :path "{userId}/messages/import", :request {"$ref" "Message"}, :response {"$ref" "Message"}, :parameters {"deleted" {"type" "boolean", "description" "Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a Vault administrator. Only used for G Suite accounts.", "default" "false", "location" "query"}, "internalDateSource" {"type" "string", "description" "Source for Gmail's internal date of the message.", "default" "dateHeader", "enum" ["dateHeader" "receivedTime"], "enumDescriptions" ["" ""], "location" "query"}, "neverMarkSpam" {"type" "boolean", "description" "Ignore the Gmail spam classifier decision and never mark this email as SPAM in the mailbox.", "default" "false", "location" "query"}, "processForCalendar" {"type" "boolean", "description" "Process calendar invites in the email and add any extracted meetings to the Google Calendar for this user.", "default" "false", "location" "query"}, "userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Imports a message into only this user's mailbox, with standard email delivery scanning and classification similar to receiving via SMTP. Does not send a message."}, "gmail.users.history.list" #:compute.gcp.descriptor{:http-method :get, :path "{userId}/history", :response {"$ref" "ListHistoryResponse"}, :parameters {"historyTypes" {"type" "string", "description" "History types to be returned by the function", "enum" ["labelAdded" "labelRemoved" "messageAdded" "messageDeleted"], "enumDescriptions" ["" "" "" ""], "repeated" true, "location" "query"}, "labelId" {"type" "string", "description" "Only return messages with a label matching the ID.", "location" "query"}, "maxResults" {"type" "integer", "description" "The maximum number of history records to return.", "default" "100", "format" "uint32", "location" "query"}, "pageToken" {"type" "string", "description" "Page token to retrieve a specific page of results in the list.", "location" "query"}, "startHistoryId" {"type" "string", "description" "Required. Returns history records after the specified startHistoryId. The supplied startHistoryId should be obtained from the historyId of a message, thread, or previous list response. History IDs increase chronologically but are not contiguous with random gaps in between valid IDs. Supplying an invalid or out of date startHistoryId typically returns an HTTP 404 error code. A historyId is typically valid for at least a week, but in some rare circumstances may be valid for only a few hours. If you receive an HTTP 404 error response, your application should perform a full sync. If you receive no nextPageToken in the response, there are no updates to retrieve and you can store the returned historyId for a future request.", "format" "uint64", "location" "query"}, "userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Lists the history of all changes to the given mailbox. History results are returned in chronological order (increasing historyId)."}, "gmail.users.settings.forwardingAddresses.list" #:compute.gcp.descriptor{:http-method :get, :path "{userId}/settings/forwardingAddresses", :response {"$ref" "ListForwardingAddressesResponse"}, :parameters {"userId" {"type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Lists the forwarding addresses for the specified account."}, "gmail.users.settings.sendAs.delete" #:compute.gcp.descriptor{:http-method :delete, :path "{userId}/settings/sendAs/{sendAsEmail}", :parameters {"sendAsEmail" {"type" "string", "description" "The send-as alias to be deleted.", "required" true, "location" "path"}, "userId" {"type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Deletes the specified send-as alias. Revokes any verification that may have been required for using it.\n\nThis method is only available to service account clients that have been delegated domain-wide authority."}, "gmail.users.labels.patch" #:compute.gcp.descriptor{:http-method :patch, :path "{userId}/labels/{id}", :request {"$ref" "Label"}, :response {"$ref" "Label"}, :parameters {"id" {"type" "string", "description" "The ID of the label to update.", "required" true, "location" "path"}, "userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Updates the specified label. This method supports patch semantics."}, "gmail.users.threads.list" #:compute.gcp.descriptor{:http-method :get, :path "{userId}/threads", :response {"$ref" "ListThreadsResponse"}, :parameters {"includeSpamTrash" {"type" "boolean", "description" "Include threads from SPAM and TRASH in the results.", "default" "false", "location" "query"}, "labelIds" {"type" "string", "description" "Only return threads with labels that match all of the specified label IDs.", "repeated" true, "location" "query"}, "maxResults" {"type" "integer", "description" "Maximum number of threads to return.", "default" "100", "format" "uint32", "location" "query"}, "pageToken" {"type" "string", "description" "Page token to retrieve a specific page of results in the list.", "location" "query"}, "q" {"type" "string", "description" "Only return threads matching the specified query. Supports the same query format as the Gmail search box. For example, \"from:someuser@example.com rfc822msgid: is:unread\". Parameter cannot be used when accessing the api using the gmail.metadata scope.", "location" "query"}, "userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Lists the threads in the user's mailbox."}, "gmail.users.settings.updateAutoForwarding" #:compute.gcp.descriptor{:http-method :put, :path "{userId}/settings/autoForwarding", :request {"$ref" "AutoForwarding"}, :response {"$ref" "AutoForwarding"}, :parameters {"userId" {"type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Updates the auto-forwarding setting for the specified account. A verified forwarding address must be specified when auto-forwarding is enabled.\n\nThis method is only available to service account clients that have been delegated domain-wide authority."}, "gmail.users.labels.list" #:compute.gcp.descriptor{:http-method :get, :path "{userId}/labels", :response {"$ref" "ListLabelsResponse"}, :parameters {"userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Lists all labels in the user's mailbox."}, "gmail.users.messages.untrash" #:compute.gcp.descriptor{:http-method :post, :path "{userId}/messages/{id}/untrash", :response {"$ref" "Message"}, :parameters {"id" {"type" "string", "description" "The ID of the message to remove from Trash.", "required" true, "location" "path"}, "userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Removes the specified message from the trash."}, "gmail.users.drafts.list" #:compute.gcp.descriptor{:http-method :get, :path "{userId}/drafts", :response {"$ref" "ListDraftsResponse"}, :parameters {"includeSpamTrash" {"type" "boolean", "description" "Include drafts from SPAM and TRASH in the results.", "default" "false", "location" "query"}, "maxResults" {"type" "integer", "description" "Maximum number of drafts to return.", "default" "100", "format" "uint32", "location" "query"}, "pageToken" {"type" "string", "description" "Page token to retrieve a specific page of results in the list.", "location" "query"}, "q" {"type" "string", "description" "Only return draft messages matching the specified query. Supports the same query format as the Gmail search box. For example, \"from:someuser@example.com rfc822msgid: is:unread\".", "location" "query"}, "userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Lists the drafts in the user's mailbox."}, "gmail.users.threads.delete" #:compute.gcp.descriptor{:http-method :delete, :path "{userId}/threads/{id}", :parameters {"id" {"type" "string", "description" "ID of the Thread to delete.", "required" true, "location" "path"}, "userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Immediately and permanently deletes the specified thread. This operation cannot be undone. Prefer threads.trash instead."}, "gmail.users.drafts.update" #:compute.gcp.descriptor{:http-method :put, :path "{userId}/drafts/{id}", :request {"$ref" "Draft"}, :response {"$ref" "Draft"}, :parameters {"id" {"type" "string", "description" "The ID of the draft to update.", "required" true, "location" "path"}, "userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Replaces a draft's content."}, "gmail.users.settings.filters.create" #:compute.gcp.descriptor{:http-method :post, :path "{userId}/settings/filters", :request {"$ref" "Filter"}, :response {"$ref" "Filter"}, :parameters {"userId" {"type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Creates a filter."}, "gmail.users.drafts.send" #:compute.gcp.descriptor{:http-method :post, :path "{userId}/drafts/send", :request {"$ref" "Draft"}, :response {"$ref" "Message"}, :parameters {"userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Sends the specified, existing draft to the recipients in the To, Cc, and Bcc headers."}, "gmail.users.stop" #:compute.gcp.descriptor{:http-method :post, :path "{userId}/stop", :parameters {"userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Stop receiving push notifications for the given user mailbox."}, "gmail.users.watch" #:compute.gcp.descriptor{:http-method :post, :path "{userId}/watch", :request {"$ref" "WatchRequest"}, :response {"$ref" "WatchResponse"}, :parameters {"userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Set up or update a push notification watch on the given user mailbox."}, "gmail.users.settings.getAutoForwarding" #:compute.gcp.descriptor{:http-method :get, :path "{userId}/settings/autoForwarding", :response {"$ref" "AutoForwarding"}, :parameters {"userId" {"type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Gets the auto-forwarding setting for the specified account."}, "gmail.users.settings.getPop" #:compute.gcp.descriptor{:http-method :get, :path "{userId}/settings/pop", :response {"$ref" "PopSettings"}, :parameters {"userId" {"type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Gets POP settings."}, "gmail.users.messages.insert" #:compute.gcp.descriptor{:http-method :post, :path "{userId}/messages", :request {"$ref" "Message"}, :response {"$ref" "Message"}, :parameters {"deleted" {"type" "boolean", "description" "Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a Vault administrator. Only used for G Suite accounts.", "default" "false", "location" "query"}, "internalDateSource" {"type" "string", "description" "Source for Gmail's internal date of the message.", "default" "receivedTime", "enum" ["dateHeader" "receivedTime"], "enumDescriptions" ["" ""], "location" "query"}, "userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Directly inserts a message into only this user's mailbox similar to IMAP APPEND, bypassing most scanning and classification. Does not send a message."}, "gmail.users.settings.delegates.list" #:compute.gcp.descriptor{:http-method :get, :path "{userId}/settings/delegates", :response {"$ref" "ListDelegatesResponse"}, :parameters {"userId" {"type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Lists the delegates for the specified account.\n\nThis method is only available to service account clients that have been delegated domain-wide authority."}, "gmail.users.settings.sendAs.create" #:compute.gcp.descriptor{:http-method :post, :path "{userId}/settings/sendAs", :request {"$ref" "SendAs"}, :response {"$ref" "SendAs"}, :parameters {"userId" {"type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Creates a custom \"from\" send-as alias. If an SMTP MSA is specified, Gmail will attempt to connect to the SMTP service to validate the configuration before creating the alias. If ownership verification is required for the alias, a message will be sent to the email address and the resource's verification status will be set to pending; otherwise, the resource will be created with verification status set to accepted. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias.\n\nThis method is only available to service account clients that have been delegated domain-wide authority."}, "gmail.users.settings.updateImap" #:compute.gcp.descriptor{:http-method :put, :path "{userId}/settings/imap", :request {"$ref" "ImapSettings"}, :response {"$ref" "ImapSettings"}, :parameters {"userId" {"type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Updates IMAP settings."}, "gmail.users.settings.sendAs.smimeInfo.list" #:compute.gcp.descriptor{:http-method :get, :path "{userId}/settings/sendAs/{sendAsEmail}/smimeInfo", :response {"$ref" "ListSmimeInfoResponse"}, :parameters {"sendAsEmail" {"type" "string", "description" "The email address that appears in the \"From:\" header for mail sent using this alias.", "required" true, "location" "path"}, "userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Lists S/MIME configs for the specified send-as alias."}, "gmail.users.messages.trash" #:compute.gcp.descriptor{:http-method :post, :path "{userId}/messages/{id}/trash", :response {"$ref" "Message"}, :parameters {"id" {"type" "string", "description" "The ID of the message to Trash.", "required" true, "location" "path"}, "userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Moves the specified message to the trash."}, "gmail.users.settings.sendAs.smimeInfo.setDefault" #:compute.gcp.descriptor{:http-method :post, :path "{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault", :parameters {"id" {"type" "string", "description" "The immutable ID for the SmimeInfo.", "required" true, "location" "path"}, "sendAsEmail" {"type" "string", "description" "The email address that appears in the \"From:\" header for mail sent using this alias.", "required" true, "location" "path"}, "userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Sets the default S/MIME config for the specified send-as alias."}, "gmail.users.threads.trash" #:compute.gcp.descriptor{:http-method :post, :path "{userId}/threads/{id}/trash", :response {"$ref" "Thread"}, :parameters {"id" {"type" "string", "description" "The ID of the thread to Trash.", "required" true, "location" "path"}, "userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Moves the specified thread to the trash."}, "gmail.users.settings.sendAs.verify" #:compute.gcp.descriptor{:http-method :post, :path "{userId}/settings/sendAs/{sendAsEmail}/verify", :parameters {"sendAsEmail" {"type" "string", "description" "The send-as alias to be verified.", "required" true, "location" "path"}, "userId" {"type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Sends a verification email to the specified send-as alias address. The verification status must be pending.\n\nThis method is only available to service account clients that have been delegated domain-wide authority."}, "gmail.users.messages.delete" #:compute.gcp.descriptor{:http-method :delete, :path "{userId}/messages/{id}", :parameters {"id" {"type" "string", "description" "The ID of the message to delete.", "required" true, "location" "path"}, "userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Immediately and permanently deletes the specified message. This operation cannot be undone. Prefer messages.trash instead."}, "gmail.users.settings.delegates.create" #:compute.gcp.descriptor{:http-method :post, :path "{userId}/settings/delegates", :request {"$ref" "Delegate"}, :response {"$ref" "Delegate"}, :parameters {"userId" {"type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Adds a delegate with its verification status set directly to accepted, without sending any verification email. The delegate user must be a member of the same G Suite organization as the delegator user.\n\nGmail imposes limitations on the number of delegates and delegators each user in a G Suite organization can have. These limits depend on your organization, but in general each user can have up to 25 delegates and up to 10 delegators.\n\nNote that a delegate user must be referred to by their primary email address, and not an email alias.\n\nAlso note that when a new delegate is created, there may be up to a one minute delay before the new delegate is available for use.\n\nThis method is only available to service account clients that have been delegated domain-wide authority."}, "gmail.users.labels.update" #:compute.gcp.descriptor{:http-method :put, :path "{userId}/labels/{id}", :request {"$ref" "Label"}, :response {"$ref" "Label"}, :parameters {"id" {"type" "string", "description" "The ID of the label to update.", "required" true, "location" "path"}, "userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Updates the specified label."}, "gmail.users.settings.sendAs.smimeInfo.get" #:compute.gcp.descriptor{:http-method :get, :path "{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}", :response {"$ref" "SmimeInfo"}, :parameters {"id" {"type" "string", "description" "The immutable ID for the SmimeInfo.", "required" true, "location" "path"}, "sendAsEmail" {"type" "string", "description" "The email address that appears in the \"From:\" header for mail sent using this alias.", "required" true, "location" "path"}, "userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Gets the specified S/MIME config for the specified send-as alias."}, "gmail.users.settings.sendAs.get" #:compute.gcp.descriptor{:http-method :get, :path "{userId}/settings/sendAs/{sendAsEmail}", :response {"$ref" "SendAs"}, :parameters {"sendAsEmail" {"type" "string", "description" "The send-as alias to be retrieved.", "required" true, "location" "path"}, "userId" {"type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Gets the specified send-as alias. Fails with an HTTP 404 error if the specified address is not a member of the collection."}, "gmail.users.messages.list" #:compute.gcp.descriptor{:http-method :get, :path "{userId}/messages", :response {"$ref" "ListMessagesResponse"}, :parameters {"includeSpamTrash" {"type" "boolean", "description" "Include messages from SPAM and TRASH in the results.", "default" "false", "location" "query"}, "labelIds" {"type" "string", "description" "Only return messages with labels that match all of the specified label IDs.", "repeated" true, "location" "query"}, "maxResults" {"type" "integer", "description" "Maximum number of messages to return.", "default" "100", "format" "uint32", "location" "query"}, "pageToken" {"type" "string", "description" "Page token to retrieve a specific page of results in the list.", "location" "query"}, "q" {"type" "string", "description" "Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, \"from:someuser@example.com rfc822msgid:<somemsgid@example.com> is:unread\". Parameter cannot be used when accessing the api using the gmail.metadata scope.", "location" "query"}, "userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Lists the messages in the user's mailbox."}, "gmail.users.messages.send" #:compute.gcp.descriptor{:http-method :post, :path "{userId}/messages/send", :request {"$ref" "Message"}, :response {"$ref" "Message"}, :parameters {"userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Sends the specified message to the recipients in the To, Cc, and Bcc headers."}, "gmail.users.settings.updateVacation" #:compute.gcp.descriptor{:http-method :put, :path "{userId}/settings/vacation", :request {"$ref" "VacationSettings"}, :response {"$ref" "VacationSettings"}, :parameters {"userId" {"type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Updates vacation responder settings."}, "gmail.users.drafts.delete" #:compute.gcp.descriptor{:http-method :delete, :path "{userId}/drafts/{id}", :parameters {"id" {"type" "string", "description" "The ID of the draft to delete.", "required" true, "location" "path"}, "userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Immediately and permanently deletes the specified draft. Does not simply trash it."}, "gmail.users.settings.filters.delete" #:compute.gcp.descriptor{:http-method :delete, :path "{userId}/settings/filters/{id}", :parameters {"id" {"type" "string", "description" "The ID of the filter to be deleted.", "required" true, "location" "path"}, "userId" {"type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Deletes a filter."}, "gmail.users.threads.untrash" #:compute.gcp.descriptor{:http-method :post, :path "{userId}/threads/{id}/untrash", :response {"$ref" "Thread"}, :parameters {"id" {"type" "string", "description" "The ID of the thread to remove from Trash.", "required" true, "location" "path"}, "userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Removes the specified thread from the trash."}, "gmail.users.settings.updatePop" #:compute.gcp.descriptor{:http-method :put, :path "{userId}/settings/pop", :request {"$ref" "PopSettings"}, :response {"$ref" "PopSettings"}, :parameters {"userId" {"type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Updates POP settings."}, "gmail.users.settings.sendAs.update" #:compute.gcp.descriptor{:http-method :put, :path "{userId}/settings/sendAs/{sendAsEmail}", :request {"$ref" "SendAs"}, :response {"$ref" "SendAs"}, :parameters {"sendAsEmail" {"type" "string", "description" "The send-as alias to be updated.", "required" true, "location" "path"}, "userId" {"type" "string", "description" "User's email address. The special value \"me\" can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Updates a send-as alias. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias.\n\nAddresses other than the primary address for the account can only be updated by service account clients that have been delegated domain-wide authority."}, "gmail.users.drafts.get" #:compute.gcp.descriptor{:http-method :get, :path "{userId}/drafts/{id}", :response {"$ref" "Draft"}, :parameters {"format" {"type" "string", "description" "The format to return the draft in.", "default" "full", "enum" ["full" "metadata" "minimal" "raw"], "enumDescriptions" ["" "" "" ""], "location" "query"}, "id" {"type" "string", "description" "The ID of the draft to retrieve.", "required" true, "location" "path"}, "userId" {"type" "string", "description" "The user's email address. The special value me can be used to indicate the authenticated user.", "default" "me", "required" true, "location" "path"}}, :description "Gets the specified draft."}}, :schemas {"SmimeInfo" {"id" "SmimeInfo", "type" "object", "description" "An S/MIME email config.", "properties" {"encryptedKeyPassword" {"type" "string", "description" "Encrypted key password, when key is encrypted."}, "expiration" {"type" "string", "description" "When the certificate expires (in milliseconds since epoch).", "format" "int64"}, "id" {"type" "string", "description" "The immutable ID for the SmimeInfo."}, "isDefault" {"type" "boolean", "description" "Whether this SmimeInfo is the default one for this user's send-as address."}, "issuerCn" {"type" "string", "description" "The S/MIME certificate issuer's common name."}, "pem" {"type" "string", "description" "PEM formatted X509 concatenated certificate string (standard base64 encoding). Format used for returning key, which includes public key as well as certificate chain (not private key)."}, "pkcs12" {"type" "string", "description" "PKCS#12 format containing a single private/public key pair and certificate chain. This format is only accepted from client for creating a new SmimeInfo and is never returned, because the private key is not intended to be exported. PKCS#12 may be encrypted, in which case encryptedKeyPassword should be set appropriately.", "format" "byte"}}}, "ListHistoryResponse" {"id" "ListHistoryResponse", "type" "object", "properties" {"history" {"type" "array", "description" "List of history records. Any messages contained in the response will typically only have id and threadId fields populated.", "items" {"$ref" "History"}}, "historyId" {"type" "string", "description" "The ID of the mailbox's current history record.", "format" "uint64"}, "nextPageToken" {"type" "string", "description" "Page token to retrieve the next page of results in the list."}}}, "ImapSettings" {"id" "ImapSettings", "type" "object", "description" "IMAP settings for an account.", "properties" {"autoExpunge" {"type" "boolean", "description" "If this value is true, Gmail will immediately expunge a message when it is marked as deleted in IMAP. Otherwise, Gmail will wait for an update from the client before expunging messages marked as deleted."}, "enabled" {"type" "boolean", "description" "Whether IMAP is enabled for the account."}, "expungeBehavior" {"type" "string", "description" "The action that will be executed on a message when it is marked as deleted and expunged from the last visible IMAP folder.", "enum" ["archive" "deleteForever" "expungeBehaviorUnspecified" "trash"], "enumDescriptions" ["" "" "" ""]}, "maxFolderSize" {"type" "integer", "description" "An optional limit on the number of messages that an IMAP folder may contain. Legal values are 0, 1000, 2000, 5000 or 10000. A value of zero is interpreted to mean that there is no limit.", "format" "int32"}}}, "Draft" {"id" "Draft", "type" "object", "description" "A draft email in the user's mailbox.", "properties" {"id" {"type" "string", "description" "The immutable ID of the draft.", "annotations" {"required" ["gmail.users.drafts.send"]}}, "message" {"$ref" "Message", "description" "The message content of the draft."}}}, "Filter" {"id" "Filter", "type" "object", "description" "Resource definition for Gmail filters. Filters apply to specific messages instead of an entire email thread.", "properties" {"action" {"$ref" "FilterAction", "description" "Action that the filter performs."}, "criteria" {"$ref" "FilterCriteria", "description" "Matching criteria for the filter."}, "id" {"type" "string", "description" "The server assigned ID of the filter."}}}, "LanguageSettings" {"id" "LanguageSettings", "type" "object", "description" "Language settings for an account. These settings correspond to the \"Language settings\" feature in the web interface.", "properties" {"displayLanguage" {"type" "string", "description" "The language to display Gmail in, formatted as an RFC 3066 Language Tag (for example en-GB, fr or ja for British English, French, or Japanese respectively).\n\nThe set of languages supported by Gmail evolves over time, so please refer to the \"Language\" dropdown in the Gmail settings  for all available options, as described in the language settings help article. A table of sample values is also provided in the Managing Language Settings guide \n\nNot all Gmail clients can display the same set of languages. In the case that a user's display language is not available for use on a particular client, said client automatically chooses to display in the closest supported variant (or a reasonable default)."}}}, "HistoryMessageAdded" {"id" "HistoryMessageAdded", "type" "object", "properties" {"message" {"$ref" "Message"}}}, "Thread" {"id" "Thread", "type" "object", "description" "A collection of messages representing a conversation.", "properties" {"historyId" {"type" "string", "description" "The ID of the last history record that modified this thread.", "format" "uint64"}, "id" {"type" "string", "description" "The unique ID of the thread."}, "messages" {"type" "array", "description" "The list of messages in the thread.", "items" {"$ref" "Message"}}, "snippet" {"type" "string", "description" "A short part of the message text."}}}, "ListSmimeInfoResponse" {"id" "ListSmimeInfoResponse", "type" "object", "properties" {"smimeInfo" {"type" "array", "description" "List of SmimeInfo.", "items" {"$ref" "SmimeInfo"}}}}, "WatchRequest" {"id" "WatchRequest", "type" "object", "description" "Set up or update a new push notification watch on this user's mailbox.", "properties" {"labelFilterAction" {"type" "string", "description" "Filtering behavior of labelIds list specified.", "enum" ["exclude" "include"], "enumDescriptions" ["" ""]}, "labelIds" {"type" "array", "description" "List of label_ids to restrict notifications about. By default, if unspecified, all changes are pushed out. If specified then dictates which labels are required for a push notification to be generated.", "items" {"type" "string"}}, "topicName" {"type" "string", "description" "A fully qualified Google Cloud Pub/Sub API topic name to publish the events to. This topic name **must** already exist in Cloud Pub/Sub and you **must** have already granted gmail \"publish\" permission on it. For example, \"projects/my-project-identifier/topics/my-topic-name\" (using the Cloud Pub/Sub \"v1\" topic naming format).\n\nNote that the \"my-project-identifier\" portion must exactly match your Google developer project id (the one executing this watch request)."}}}, "ListSendAsResponse" {"id" "ListSendAsResponse", "type" "object", "description" "Response for the ListSendAs method.", "properties" {"sendAs" {"type" "array", "description" "List of send-as aliases.", "items" {"$ref" "SendAs"}}}}, "ModifyThreadRequest" {"id" "ModifyThreadRequest", "type" "object", "properties" {"addLabelIds" {"type" "array", "description" "A list of IDs of labels to add to this thread.", "items" {"type" "string"}}, "removeLabelIds" {"type" "array", "description" "A list of IDs of labels to remove from this thread.", "items" {"type" "string"}}}}, "BatchModifyMessagesRequest" {"id" "BatchModifyMessagesRequest", "type" "object", "properties" {"addLabelIds" {"type" "array", "description" "A list of label IDs to add to messages.", "items" {"type" "string"}}, "ids" {"type" "array", "description" "The IDs of the messages to modify. There is a limit of 1000 ids per request.", "items" {"type" "string"}}, "removeLabelIds" {"type" "array", "description" "A list of label IDs to remove from messages.", "items" {"type" "string"}}}}, "MessagePartBody" {"id" "MessagePartBody", "type" "object", "description" "The body of a single MIME message part.", "properties" {"attachmentId" {"type" "string", "description" "When present, contains the ID of an external attachment that can be retrieved in a separate messages.attachments.get request. When not present, the entire content of the message part body is contained in the data field."}, "data" {"type" "string", "description" "The body data of a MIME message part as a base64url encoded string. May be empty for MIME container types that have no message body or when the body data is sent as a separate attachment. An attachment ID is present if the body data is contained in a separate attachment.", "format" "byte"}, "size" {"type" "integer", "description" "Number of bytes for the message part data (encoding notwithstanding).", "format" "int32"}}}, "SendAs" {"id" "SendAs", "type" "object", "description" "Settings associated with a send-as alias, which can be either the primary login address associated with the account or a custom \"from\" address. Send-as aliases correspond to the \"Send Mail As\" feature in the web interface.", "properties" {"replyToAddress" {"type" "string", "description" "An optional email address that is included in a \"Reply-To:\" header for mail sent using this alias. If this is empty, Gmail will not generate a \"Reply-To:\" header."}, "displayName" {"type" "string", "description" "A name that appears in the \"From:\" header for mail sent using this alias. For custom \"from\" addresses, when this is empty, Gmail will populate the \"From:\" header with the name that is used for the primary address associated with the account. If the admin has disabled the ability for users to update their name format, requests to update this field for the primary login will silently fail."}, "smtpMsa" {"$ref" "SmtpMsa", "description" "An optional SMTP service that will be used as an outbound relay for mail sent using this alias. If this is empty, outbound mail will be sent directly from Gmail's servers to the destination SMTP service. This setting only applies to custom \"from\" aliases."}, "treatAsAlias" {"type" "boolean", "description" "Whether Gmail should  treat this address as an alias for the user's primary email address. This setting only applies to custom \"from\" aliases."}, "signature" {"type" "string", "description" "An optional HTML signature that is included in messages composed with this alias in the Gmail web UI."}, "verificationStatus" {"type" "string", "description" "Indicates whether this address has been verified for use as a send-as alias. Read-only. This setting only applies to custom \"from\" aliases.", "enum" ["accepted" "pending" "verificationStatusUnspecified"], "enumDescriptions" ["" "" ""]}, "sendAsEmail" {"type" "string", "description" "The email address that appears in the \"From:\" header for mail sent using this alias. This is read-only for all operations except create."}, "isDefault" {"type" "boolean", "description" "Whether this address is selected as the default \"From:\" address in situations such as composing a new message or sending a vacation auto-reply. Every Gmail account has exactly one default send-as address, so the only legal value that clients may write to this field is true. Changing this from false to true for an address will result in this field becoming false for the other previous default address."}, "isPrimary" {"type" "boolean", "description" "Whether this address is the primary address used to login to the account. Every Gmail account has exactly one primary address, and it cannot be deleted from the collection of send-as aliases. This field is read-only."}}}, "LabelColor" {"id" "LabelColor", "type" "object", "properties" {"backgroundColor" {"type" "string", "description" "The background color represented as hex string #RRGGBB (ex #000000). This field is required in order to set the color of a label. Only the following predefined set of color values are allowed:\n#000000, #434343, #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff, #fb4c2f, #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3, #f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5, #fcdee8, #efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9, #e66550, #ffbc6b, #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0, #cc3a21, #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798, #ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b, #b65775, #822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c #464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff, #711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706, #ffdeb5, #594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1, #c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46, #662e37, #ebdbde, #cca6ac, #094228, #42d692, #16a765"}, "textColor" {"type" "string", "description" "The text color of the label, represented as hex string. This field is required in order to set the color of a label. Only the following predefined set of color values are allowed:\n#000000, #434343, #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff, #fb4c2f, #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3, #f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5, #fcdee8, #efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9, #e66550, #ffbc6b, #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0, #cc3a21, #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798, #ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b, #b65775, #822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c #464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff, #711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706, #ffdeb5, #594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1, #c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46, #662e37, #ebdbde, #cca6ac, #094228, #42d692, #16a765"}}}, "ModifyMessageRequest" {"id" "ModifyMessageRequest", "type" "object", "properties" {"addLabelIds" {"type" "array", "description" "A list of IDs of labels to add to this message.", "items" {"type" "string"}}, "removeLabelIds" {"type" "array", "description" "A list IDs of labels to remove from this message.", "items" {"type" "string"}}}}, "History" {"id" "History", "type" "object", "description" "A record of a change to the user's mailbox. Each history change may affect multiple messages in multiple ways.", "properties" {"id" {"type" "string", "description" "The mailbox sequence ID.", "format" "uint64"}, "labelsAdded" {"type" "array", "description" "Labels added to messages in this history record.", "items" {"$ref" "HistoryLabelAdded"}}, "labelsRemoved" {"type" "array", "description" "Labels removed from messages in this history record.", "items" {"$ref" "HistoryLabelRemoved"}}, "messages" {"type" "array", "description" "List of messages changed in this history record. The fields for specific change types, such as messagesAdded may duplicate messages in this field. We recommend using the specific change-type fields instead of this.", "items" {"$ref" "Message"}}, "messagesAdded" {"type" "array", "description" "Messages added to the mailbox in this history record.", "items" {"$ref" "HistoryMessageAdded"}}, "messagesDeleted" {"type" "array", "description" "Messages deleted (not Trashed) from the mailbox in this history record.", "items" {"$ref" "HistoryMessageDeleted"}}}}, "ForwardingAddress" {"id" "ForwardingAddress", "type" "object", "description" "Settings for a forwarding address.", "properties" {"forwardingEmail" {"type" "string", "description" "An email address to which messages can be forwarded."}, "verificationStatus" {"type" "string", "description" "Indicates whether this address has been verified and is usable for forwarding. Read-only.", "enum" ["accepted" "pending" "verificationStatusUnspecified"], "enumDescriptions" ["" "" ""]}}}, "Profile" {"id" "Profile", "type" "object", "description" "Profile for a Gmail user.", "properties" {"emailAddress" {"type" "string", "description" "The user's email address."}, "historyId" {"type" "string", "description" "The ID of the mailbox's current history record.", "format" "uint64"}, "messagesTotal" {"type" "integer", "description" "The total number of messages in the mailbox.", "format" "int32"}, "threadsTotal" {"type" "integer", "description" "The total number of threads in the mailbox.", "format" "int32"}}}, "Delegate" {"id" "Delegate", "type" "object", "description" "Settings for a delegate. Delegates can read, send, and delete messages, as well as view and add contacts, for the delegator's account. See \"Set up mail delegation\" for more information about delegates.", "properties" {"delegateEmail" {"type" "string", "description" "The email address of the delegate."}, "verificationStatus" {"type" "string", "description" "Indicates whether this address has been verified and can act as a delegate for the account. Read-only.", "enum" ["accepted" "expired" "pending" "rejected" "verificationStatusUnspecified"], "enumDescriptions" ["" "" "" "" ""]}}}, "Message" {"id" "Message", "type" "object", "description" "An email message.", "properties" {"threadId" {"type" "string", "description" "The ID of the thread the message belongs to. To add a message or draft to a thread, the following criteria must be met: \n- The requested threadId must be specified on the Message or Draft.Message you supply with your request. \n- The References and In-Reply-To headers must be set in compliance with the RFC 2822 standard. \n- The Subject headers must match."}, "snippet" {"type" "string", "description" "A short part of the message text."}, "historyId" {"type" "string", "description" "The ID of the last history record that modified this message.", "format" "uint64"}, "labelIds" {"type" "array", "description" "List of IDs of labels applied to this message.", "items" {"type" "string"}}, "id" {"type" "string", "description" "The immutable ID of the message."}, "sizeEstimate" {"type" "integer", "description" "Estimated size in bytes of the message.", "format" "int32"}, "raw" {"type" "string", "description" "The entire email message in an RFC 2822 formatted and base64url encoded string. Returned in messages.get and drafts.get responses when the format=RAW parameter is supplied.", "format" "byte", "annotations" {"required" ["gmail.users.drafts.create" "gmail.users.drafts.update" "gmail.users.messages.insert" "gmail.users.messages.send"]}}, "payload" {"$ref" "MessagePart", "description" "The parsed email structure in the message parts."}, "internalDate" {"type" "string", "description" "The internal message creation timestamp (epoch ms), which determines ordering in the inbox. For normal SMTP-received email, this represents the time the message was originally accepted by Google, which is more reliable than the Date header. However, for API-migrated mail, it can be configured by client to be based on the Date header.", "format" "int64"}}}, "MessagePart" {"id" "MessagePart", "type" "object", "description" "A single MIME message part.", "properties" {"body" {"$ref" "MessagePartBody", "description" "The message part body for this part, which may be empty for container MIME message parts."}, "filename" {"type" "string", "description" "The filename of the attachment. Only present if this message part represents an attachment."}, "headers" {"type" "array", "description" "List of headers on this message part. For the top-level message part, representing the entire message payload, it will contain the standard RFC 2822 email headers such as To, From, and Subject.", "items" {"$ref" "MessagePartHeader"}}, "mimeType" {"type" "string", "description" "The MIME type of the message part."}, "partId" {"type" "string", "description" "The immutable ID of the message part."}, "parts" {"type" "array", "description" "The child MIME message parts of this part. This only applies to container MIME message parts, for example multipart/*. For non- container MIME message part types, such as text/plain, this field is empty. For more information, see RFC 1521.", "items" {"$ref" "MessagePart"}}}}, "HistoryLabelRemoved" {"id" "HistoryLabelRemoved", "type" "object", "properties" {"labelIds" {"type" "array", "description" "Label IDs removed from the message.", "items" {"type" "string"}}, "message" {"$ref" "Message"}}}, "AutoForwarding" {"id" "AutoForwarding", "type" "object", "description" "Auto-forwarding settings for an account.", "properties" {"disposition" {"type" "string", "description" "The state that a message should be left in after it has been forwarded.", "enum" ["archive" "dispositionUnspecified" "leaveInInbox" "markRead" "trash"], "enumDescriptions" ["" "" "" "" ""]}, "emailAddress" {"type" "string", "description" "Email address to which all incoming messages are forwarded. This email address must be a verified member of the forwarding addresses."}, "enabled" {"type" "boolean", "description" "Whether all incoming mail is automatically forwarded to another address."}}}, "ListForwardingAddressesResponse" {"id" "ListForwardingAddressesResponse", "type" "object", "description" "Response for the ListForwardingAddresses method.", "properties" {"forwardingAddresses" {"type" "array", "description" "List of addresses that may be used for forwarding.", "items" {"$ref" "ForwardingAddress"}}}}, "HistoryLabelAdded" {"id" "HistoryLabelAdded", "type" "object", "properties" {"labelIds" {"type" "array", "description" "Label IDs added to the message.", "items" {"type" "string"}}, "message" {"$ref" "Message"}}}, "FilterCriteria" {"id" "FilterCriteria", "type" "object", "description" "Message matching criteria.", "properties" {"hasAttachment" {"type" "boolean", "description" "Whether the message has any attachment."}, "negatedQuery" {"type" "string", "description" "Only return messages not matching the specified query. Supports the same query format as the Gmail search box. For example, \"from:someuser@example.com rfc822msgid: is:unread\"."}, "query" {"type" "string", "description" "Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, \"from:someuser@example.com rfc822msgid: is:unread\"."}, "sizeComparison" {"type" "string", "description" "How the message size in bytes should be in relation to the size field.", "enum" ["larger" "smaller" "unspecified"], "enumDescriptions" ["" "" ""]}, "subject" {"type" "string", "description" "Case-insensitive phrase found in the message's subject. Trailing and leading whitespace are be trimmed and adjacent spaces are collapsed."}, "excludeChats" {"type" "boolean", "description" "Whether the response should exclude chats."}, "from" {"type" "string", "description" "The sender's display name or email address."}, "size" {"type" "integer", "description" "The size of the entire RFC822 message in bytes, including all headers and attachments.", "format" "int32"}, "to" {"type" "string", "description" "The recipient's display name or email address. Includes recipients in the \"to\", \"cc\", and \"bcc\" header fields. You can use simply the local part of the email address. For example, \"example\" and \"example@\" both match \"example@gmail.com\". This field is case-insensitive."}}}, "Label" {"id" "Label", "type" "object", "description" "Labels are used to categorize messages and threads within the user's mailbox.", "properties" {"threadsUnread" {"type" "integer", "description" "The number of unread threads with the label.", "format" "int32"}, "messagesUnread" {"type" "integer", "description" "The number of unread messages with the label.", "format" "int32"}, "messageListVisibility" {"type" "string", "description" "The visibility of the label in the message list in the Gmail web interface.", "enum" ["hide" "show"], "enumDescriptions" ["" ""], "annotations" {"required" ["gmail.users.labels.create" "gmail.users.labels.update"]}}, "id" {"type" "string", "description" "The immutable ID of the label.", "annotations" {"required" ["gmail.users.labels.update"]}}, "threadsTotal" {"type" "integer", "description" "The total number of threads with the label.", "format" "int32"}, "name" {"type" "string", "description" "The display name of the label.", "annotations" {"required" ["gmail.users.labels.create" "gmail.users.labels.update"]}}, "type" {"type" "string", "description" "The owner type for the label. User labels are created by the user and can be modified and deleted by the user and can be applied to any message or thread. System labels are internally created and cannot be added, modified, or deleted. System labels may be able to be applied to or removed from messages and threads under some circumstances but this is not guaranteed. For example, users can apply and remove the INBOX and UNREAD labels from messages and threads, but cannot apply or remove the DRAFTS or SENT labels from messages or threads.", "enum" ["system" "user"], "enumDescriptions" ["" ""]}, "messagesTotal" {"type" "integer", "description" "The total number of messages with the label.", "format" "int32"}, "labelListVisibility" {"type" "string", "description" "The visibility of the label in the label list in the Gmail web interface.", "enum" ["labelHide" "labelShow" "labelShowIfUnread"], "enumDescriptions" ["" "" ""], "annotations" {"required" ["gmail.users.labels.create" "gmail.users.labels.update"]}}, "color" {"$ref" "LabelColor", "description" "The color to assign to the label. Color is only available for labels that have their type set to user."}}}, "ListMessagesResponse" {"id" "ListMessagesResponse", "type" "object", "properties" {"messages" {"type" "array", "description" "List of messages. Note that each message resource contains only an id and a threadId. Additional message details can be fetched using the messages.get method.", "items" {"$ref" "Message"}}, "nextPageToken" {"type" "string", "description" "Token to retrieve the next page of results in the list."}, "resultSizeEstimate" {"type" "integer", "description" "Estimated total number of results.", "format" "uint32"}}}, "VacationSettings" {"id" "VacationSettings", "type" "object", "description" "Vacation auto-reply settings for an account. These settings correspond to the \"Vacation responder\" feature in the web interface.", "properties" {"enableAutoReply" {"type" "boolean", "description" "Flag that controls whether Gmail automatically replies to messages."}, "endTime" {"type" "string", "description" "An optional end time for sending auto-replies (epoch ms). When this is specified, Gmail will automatically reply only to messages that it receives before the end time. If both startTime and endTime are specified, startTime must precede endTime.", "format" "int64"}, "responseBodyHtml" {"type" "string", "description" "Response body in HTML format. Gmail will sanitize the HTML before storing it."}, "responseBodyPlainText" {"type" "string", "description" "Response body in plain text format."}, "responseSubject" {"type" "string", "description" "Optional text to prepend to the subject line in vacation responses. In order to enable auto-replies, either the response subject or the response body must be nonempty."}, "restrictToContacts" {"type" "boolean", "description" "Flag that determines whether responses are sent to recipients who are not in the user's list of contacts."}, "restrictToDomain" {"type" "boolean", "description" "Flag that determines whether responses are sent to recipients who are outside of the user's domain. This feature is only available for G Suite users."}, "startTime" {"type" "string", "description" "An optional start time for sending auto-replies (epoch ms). When this is specified, Gmail will automatically reply only to messages that it receives after the start time. If both startTime and endTime are specified, startTime must precede endTime.", "format" "int64"}}}, "ListDraftsResponse" {"id" "ListDraftsResponse", "type" "object", "properties" {"drafts" {"type" "array", "description" "List of drafts. Note that the Message property in each Draft resource only contains an id and a threadId. The messages.get method can fetch additional message details.", "items" {"$ref" "Draft"}}, "nextPageToken" {"type" "string", "description" "Token to retrieve the next page of results in the list."}, "resultSizeEstimate" {"type" "integer", "description" "Estimated total number of results.", "format" "uint32"}}}, "PopSettings" {"id" "PopSettings", "type" "object", "description" "POP settings for an account.", "properties" {"accessWindow" {"type" "string", "description" "The range of messages which are accessible via POP.", "enum" ["accessWindowUnspecified" "allMail" "disabled" "fromNowOn"], "enumDescriptions" ["" "" "" ""]}, "disposition" {"type" "string", "description" "The action that will be executed on a message after it has been fetched via POP.", "enum" ["archive" "dispositionUnspecified" "leaveInInbox" "markRead" "trash"], "enumDescriptions" ["" "" "" "" ""]}}}, "ListThreadsResponse" {"id" "ListThreadsResponse", "type" "object", "properties" {"nextPageToken" {"type" "string", "description" "Page token to retrieve the next page of results in the list."}, "resultSizeEstimate" {"type" "integer", "description" "Estimated total number of results.", "format" "uint32"}, "threads" {"type" "array", "description" "List of threads. Note that each thread resource does not contain a list of messages. The list of messages for a given thread can be fetched using the threads.get method.", "items" {"$ref" "Thread"}}}}, "FilterAction" {"id" "FilterAction", "type" "object", "description" "A set of actions to perform on a message.", "properties" {"addLabelIds" {"type" "array", "description" "List of labels to add to the message.", "items" {"type" "string"}}, "forward" {"type" "string", "description" "Email address that the message should be forwarded to."}, "removeLabelIds" {"type" "array", "description" "List of labels to remove from the message.", "items" {"type" "string"}}}}, "BatchDeleteMessagesRequest" {"id" "BatchDeleteMessagesRequest", "type" "object", "properties" {"ids" {"type" "array", "description" "The IDs of the messages to delete.", "items" {"type" "string"}}}}, "HistoryMessageDeleted" {"id" "HistoryMessageDeleted", "type" "object", "properties" {"message" {"$ref" "Message"}}}, "MessagePartHeader" {"id" "MessagePartHeader", "type" "object", "properties" {"name" {"type" "string", "description" "The name of the header before the : separator. For example, To."}, "value" {"type" "string", "description" "The value of the header after the : separator. For example, someuser@example.com."}}}, "ListFiltersResponse" {"id" "ListFiltersResponse", "type" "object", "description" "Response for the ListFilters method.", "properties" {"filter" {"type" "array", "description" "List of a user's filters.", "items" {"$ref" "Filter"}}}}, "SmtpMsa" {"id" "SmtpMsa", "type" "object", "description" "Configuration for communication with an SMTP service.", "properties" {"host" {"type" "string", "description" "The hostname of the SMTP service. Required."}, "password" {"type" "string", "description" "The password that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses."}, "port" {"type" "integer", "description" "The port of the SMTP service. Required.", "format" "int32"}, "securityMode" {"type" "string", "description" "The protocol that will be used to secure communication with the SMTP service. Required.", "enum" ["none" "securityModeUnspecified" "ssl" "starttls"], "enumDescriptions" ["" "" "" ""]}, "username" {"type" "string", "description" "The username that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses."}}}, "ListDelegatesResponse" {"id" "ListDelegatesResponse", "type" "object", "description" "Response for the ListDelegates method.", "properties" {"delegates" {"type" "array", "description" "List of the user's delegates (with any verification status).", "items" {"$ref" "Delegate"}}}}, "ListLabelsResponse" {"id" "ListLabelsResponse", "type" "object", "properties" {"labels" {"type" "array", "description" "List of labels. Note that each label resource only contains an id, name, messageListVisibility, labelListVisibility, and type. The labels.get method can fetch additional label details.", "items" {"$ref" "Label"}}}}, "WatchResponse" {"id" "WatchResponse", "type" "object", "description" "Push notification watch response.", "properties" {"expiration" {"type" "string", "description" "When Gmail will stop sending notifications for mailbox updates (epoch millis). Call watch again before this time to renew the watch.", "format" "int64"}, "historyId" {"type" "string", "description" "The ID of the mailbox's current history record.", "format" "uint64"}}}}}