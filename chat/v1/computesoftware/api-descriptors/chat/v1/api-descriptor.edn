#:compute.gcp.descriptor{:name "chat", :title "Google Chat API", :api-version "v1", :revision "20210227", :endpoint #:compute.gcp.descriptor{:url "https://chat.googleapis.com/", :batch-path "batch", :service-path ""}, :parameters {"callback" {"description" "JSONP", "type" "string", "location" "query"}, "uploadType" {"location" "query", "description" "Legacy upload protocol for media (e.g. \"media\", \"multipart\").", "type" "string"}, "key" {"type" "string", "location" "query", "description" "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."}, "access_token" {"type" "string", "description" "OAuth access token.", "location" "query"}, "oauth_token" {"type" "string", "description" "OAuth 2.0 token for the current user.", "location" "query"}, "prettyPrint" {"type" "boolean", "location" "query", "description" "Returns response with indentations and line breaks.", "default" "true"}, "alt" {"enumDescriptions" ["Responses with Content-Type of application/json" "Media download with context-dependent Content-Type" "Responses with Content-Type of application/x-protobuf"], "location" "query", "type" "string", "enum" ["json" "media" "proto"], "default" "json", "description" "Data format for response."}, "$.xgafv" {"enum" ["1" "2"], "enumDescriptions" ["v1 error format" "v2 error format"], "description" "V1 error format.", "type" "string", "location" "query"}, "fields" {"location" "query", "description" "Selector specifying which fields to include in a partial response.", "type" "string"}, "upload_protocol" {"type" "string", "location" "query", "description" "Upload protocol for media (e.g. \"raw\", \"multipart\")."}, "quotaUser" {"location" "query", "description" "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.", "type" "string"}}, :op->info {"chat.rooms.conversations.messages" #:compute.gcp.descriptor{:http-method :post, :path "v1/{+parent}/messages", :request {"$ref" "Message"}, :response {"$ref" "Message"}, :parameters {"parent" {"required" true, "location" "path", "type" "string", "pattern" "^rooms/[^/]+/conversations/[^/]+$", "description" "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY"}, "threadKey" {"location" "query", "description" "Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Hangouts Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message.", "type" "string"}}, :description "Legacy path for creating message. Calling these will result in a BadRequest response."}, "chat.spaces.messages.create" #:compute.gcp.descriptor{:http-method :post, :path "v1/{+parent}/messages", :request {"$ref" "Message"}, :response {"$ref" "Message"}, :parameters {"parent" {"type" "string", "pattern" "^spaces/[^/]+$", "required" true, "description" "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY", "location" "path"}, "threadKey" {"description" "Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Hangouts Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message.", "location" "query", "type" "string"}}, :description "Creates a message."}, "chat.spaces.messages.attachments.get" #:compute.gcp.descriptor{:http-method :get, :path "v1/{+name}", :response {"$ref" "Attachment"}, :parameters {"name" {"pattern" "^spaces/[^/]+/messages/[^/]+/attachments/[^/]+$", "type" "string", "description" "Resource name of the attachment, in the form \"spaces/*/messages/*/attachments/*\".", "location" "path", "required" true}}, :description "Gets the metadata of a message attachment. The attachment data is fetched using the media API."}, "chat.spaces.get" #:compute.gcp.descriptor{:http-method :get, :path "v1/{+name}", :response {"$ref" "Space"}, :parameters {"name" {"type" "string", "pattern" "^spaces/[^/]+$", "description" "Required. Resource name of the space, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY", "location" "path", "required" true}}, :description "Returns a space."}, "chat.spaces.messages.get" #:compute.gcp.descriptor{:http-method :get, :path "v1/{+name}", :response {"$ref" "Message"}, :parameters {"name" {"location" "path", "pattern" "^spaces/[^/]+/messages/[^/]+$", "description" "Required. Resource name of the message to be retrieved, in the form \"spaces/*/messages/*\". Example: spaces/AAAAMpdlehY/messages/UMxbHmzDlr4.UMxbHmzDlr4", "type" "string", "required" true}}, :description "Returns a message."}, "chat.dms.conversations.messages" #:compute.gcp.descriptor{:http-method :post, :path "v1/{+parent}/messages", :request {"$ref" "Message"}, :response {"$ref" "Message"}, :parameters {"threadKey" {"description" "Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Hangouts Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message.", "location" "query", "type" "string"}, "parent" {"description" "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY", "type" "string", "location" "path", "required" true, "pattern" "^dms/[^/]+/conversations/[^/]+$"}}, :description "Legacy path for creating message. Calling these will result in a BadRequest response."}, "chat.spaces.members.get" #:compute.gcp.descriptor{:http-method :get, :path "v1/{+name}", :response {"$ref" "Membership"}, :parameters {"name" {"type" "string", "location" "path", "required" true, "pattern" "^spaces/[^/]+/members/[^/]+$", "description" "Required. Resource name of the membership to be retrieved, in the form \"spaces/*/members/*\". Example: spaces/AAAAMpdlehY/members/105115627578887013105"}}, :description "Returns a membership."}, "chat.rooms.messages" #:compute.gcp.descriptor{:http-method :post, :path "v1/{+parent}/messages", :request {"$ref" "Message"}, :response {"$ref" "Message"}, :parameters {"parent" {"required" true, "description" "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY", "type" "string", "location" "path", "pattern" "^rooms/[^/]+$"}, "threadKey" {"description" "Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Hangouts Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message.", "location" "query", "type" "string"}}, :description "Legacy path for creating message. Calling these will result in a BadRequest response."}, "chat.spaces.messages.delete" #:compute.gcp.descriptor{:http-method :delete, :path "v1/{+name}", :response {"$ref" "Empty"}, :parameters {"name" {"required" true, "description" "Required. Resource name of the message to be deleted, in the form \"spaces/*/messages/*\" Example: spaces/AAAAMpdlehY/messages/UMxbHmzDlr4.UMxbHmzDlr4", "type" "string", "pattern" "^spaces/[^/]+/messages/[^/]+$", "location" "path"}}, :description "Deletes a message."}, "chat.spaces.list" #:compute.gcp.descriptor{:http-method :get, :path "v1/spaces", :response {"$ref" "ListSpacesResponse"}, :parameters {"pageToken" {"location" "query", "type" "string", "description" "A token identifying a page of results the server should return."}, "pageSize" {"location" "query", "format" "int32", "description" "Requested page size. The value is capped at 1000. Server may return fewer results than requested. If unspecified, server will default to 100.", "type" "integer"}}, :description "Lists spaces the caller is a member of."}, "chat.spaces.members.list" #:compute.gcp.descriptor{:http-method :get, :path "v1/{+parent}/members", :response {"$ref" "ListMembershipsResponse"}, :parameters {"pageSize" {"description" "Requested page size. The value is capped at 1000. Server may return fewer results than requested. If unspecified, server will default to 100.", "type" "integer", "location" "query", "format" "int32"}, "parent" {"location" "path", "type" "string", "pattern" "^spaces/[^/]+$", "description" "Required. The resource name of the space for which membership list is to be fetched, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY", "required" true}, "pageToken" {"type" "string", "description" "A token identifying a page of results the server should return.", "location" "query"}}, :description "Lists human memberships in a space."}, "chat.dms.messages" #:compute.gcp.descriptor{:http-method :post, :path "v1/{+parent}/messages", :request {"$ref" "Message"}, :response {"$ref" "Message"}, :parameters {"threadKey" {"type" "string", "location" "query", "description" "Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Hangouts Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message."}, "parent" {"pattern" "^dms/[^/]+$", "description" "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY", "type" "string", "required" true, "location" "path"}}, :description "Legacy path for creating message. Calling these will result in a BadRequest response."}, "chat.dms.webhooks" #:compute.gcp.descriptor{:http-method :post, :path "v1/{+parent}/webhooks", :request {"$ref" "Message"}, :response {"$ref" "Message"}, :parameters {"threadKey" {"location" "query", "type" "string", "description" "Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Hangouts Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message."}, "parent" {"description" "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY", "required" true, "location" "path", "type" "string", "pattern" "^dms/[^/]+$"}}, :description "Legacy path for creating message. Calling these will result in a BadRequest response."}, "chat.rooms.webhooks" #:compute.gcp.descriptor{:http-method :post, :path "v1/{+parent}/webhooks", :request {"$ref" "Message"}, :response {"$ref" "Message"}, :parameters {"threadKey" {"description" "Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Hangouts Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message.", "location" "query", "type" "string"}, "parent" {"required" true, "pattern" "^rooms/[^/]+$", "type" "string", "location" "path", "description" "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY"}}, :description "Legacy path for creating message. Calling these will result in a BadRequest response."}, "chat.spaces.webhooks" #:compute.gcp.descriptor{:http-method :post, :path "v1/{+parent}/webhooks", :request {"$ref" "Message"}, :response {"$ref" "Message"}, :parameters {"parent" {"required" true, "location" "path", "pattern" "^spaces/[^/]+$", "description" "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY", "type" "string"}, "threadKey" {"type" "string", "description" "Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Hangouts Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message.", "location" "query"}}, :description "Legacy path for creating message. Calling these will result in a BadRequest response."}, "chat.spaces.messages.update" #:compute.gcp.descriptor{:http-method :put, :path "v1/{+name}", :request {"$ref" "Message"}, :response {"$ref" "Message"}, :parameters {"name" {"pattern" "^spaces/[^/]+/messages/[^/]+$", "required" true, "description" "Resource name, in the form \"spaces/*/messages/*\". Example: spaces/AAAAMpdlehY/messages/UMxbHmzDlr4.UMxbHmzDlr4", "type" "string", "location" "path"}, "updateMask" {"location" "query", "format" "google-fieldmask", "description" "Required. The field paths to be updated, comma separated if there are multiple. Currently supported field paths: * text * cards", "type" "string"}}, :description "Updates a message."}, "chat.media.download" #:compute.gcp.descriptor{:http-method :get, :path "v1/media/{+resourceName}", :response {"$ref" "Media"}, :parameters {"resourceName" {"pattern" "^.*$", "description" "Name of the media that is being downloaded. See ReadRequest.resource_name.", "required" true, "type" "string", "location" "path"}}, :description "Downloads media. Download is supported on the URI `/v1/media/{+name}?alt=media`."}}, :schemas {"Annotation" {"id" "Annotation", "description" "Annotations associated with the plain-text body of the message. Example plain-text message body: ``` Hello @FooBot how are you!\" ``` The corresponding annotations metadata: ``` \"annotations\":[{ \"type\":\"USER_MENTION\", \"startIndex\":6, \"length\":7, \"userMention\": { \"user\": { \"name\":\"users/107946847022116401880\", \"displayName\":\"FooBot\", \"avatarUrl\":\"https://goo.gl/aeDtrS\", \"type\":\"BOT\" }, \"type\":\"MENTION\" } }] ```", "type" "object", "properties" {"type" {"type" "string", "enum" ["ANNOTATION_TYPE_UNSPECIFIED" "USER_MENTION" "SLASH_COMMAND"], "enumDescriptions" ["Default value for the enum. DO NOT USE." "A user is mentioned." "A slash command is invoked."], "description" "The type of this annotation."}, "userMention" {"description" "The metadata of user mention.", "$ref" "UserMentionMetadata"}, "length" {"format" "int32", "description" "Length of the substring in the plain-text message body this annotation corresponds to.", "type" "integer"}, "startIndex" {"type" "integer", "format" "int32", "description" "Start index (0-based, inclusive) in the plain-text message body this annotation corresponds to."}, "slashCommand" {"description" "The metadata for a slash command.", "$ref" "SlashCommandMetadata"}}}, "Empty" {"id" "Empty", "type" "object", "description" "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.", "properties" {}}, "Attachment" {"properties" {"driveDataRef" {"$ref" "DriveDataRef", "description" "A reference to the drive attachment. This is used with the Drive API."}, "thumbnailUri" {"type" "string", "description" "Output only. The thumbnail URL which should be used to preview the attachment to a human user. Bots should not use this URL to download attachment content."}, "source" {"enum" ["SOURCE_UNSPECIFIED" "DRIVE_FILE" "UPLOADED_CONTENT"], "enumDescriptions" ["" "" ""], "description" "The source of the attachment.", "type" "string"}, "attachmentDataRef" {"description" "A reference to the attachment data. This is used with the media API to download the attachment data.", "$ref" "AttachmentDataRef"}, "downloadUri" {"description" "Output only. The download URL which should be used to allow a human user to download the attachment. Bots should not use this URL to download attachment content.", "type" "string"}, "contentType" {"description" "The content type (MIME type) of the file.", "type" "string"}, "name" {"type" "string", "description" "Resource name of the attachment, in the form \"spaces/*/messages/*/attachments/*\"."}, "contentName" {"type" "string", "description" "The original file name for the content, not the full path."}}, "description" "An attachment in Hangouts Chat.", "type" "object", "id" "Attachment"}, "Space" {"description" "A room or DM in Hangouts Chat.", "type" "object", "id" "Space", "properties" {"name" {"type" "string", "description" "Resource name of the space, in the form \"spaces/*\". Example: spaces/AAAAMpdlehYs"}, "type" {"type" "string", "enumDescriptions" ["" "Multi-user spaces such as rooms and DMs between humans." "1:1 Direct Message between a human and a bot, where all messages are flat."], "description" "Output only. The type of a space. This is deprecated. Use `single_user_bot_dm` instead.", "enum" ["TYPE_UNSPECIFIED" "ROOM" "DM"]}, "displayName" {"description" "Output only. The display name (only if the space is a room). Please note that this field might not be populated in direct messages between humans.", "type" "string"}, "threaded" {"description" "Whether the messages are threaded in this space.", "type" "boolean"}, "singleUserBotDm" {"type" "boolean", "description" "Whether the space is a DM between a bot and a single human."}}}, "SlashCommand" {"type" "object", "description" "A Slash Command in Hangouts Chat.", "id" "SlashCommand", "properties" {"commandId" {"description" "The id of the slash command invoked.", "type" "string", "format" "int64"}}}, "Membership" {"id" "Membership", "description" "Represents a membership relation in Hangouts Chat.", "properties" {"state" {"description" "State of the membership.", "type" "string", "enum" ["MEMBERSHIP_STATE_UNSPECIFIED" "JOINED" "INVITED" "NOT_A_MEMBER"], "enumDescriptions" ["Default, do not use." "The user has joined the space." "The user has been invited, is able to join the space, but currently has not joined." "The user is not a member of the space, has not been invited and is not able to join the space."]}, "member" {"description" "A User in Hangout Chat", "$ref" "User"}, "createTime" {"format" "google-datetime", "description" "The creation time of the membership a.k.a the time at which the member joined the space, if applicable.", "type" "string"}, "name" {"type" "string"}}, "type" "object"}, "CardAction" {"type" "object", "description" "A card action is the action associated with the card. For an invoice card, a typical action would be: delete invoice, email invoice or open the invoice in browser.", "id" "CardAction", "properties" {"onClick" {"description" "The onclick action for this action item.", "$ref" "OnClick"}, "actionLabel" {"description" "The label used to be displayed in the action menu item.", "type" "string"}}}, "Media" {"description" "Media resource.", "id" "Media", "properties" {"resourceName" {"type" "string", "description" "Name of the media resource."}}, "type" "object"}, "Thread" {"description" "A thread in Hangouts Chat.", "properties" {"name" {"type" "string", "description" "Resource name, in the form \"spaces/*/threads/*\". Example: spaces/AAAAMpdlehY/threads/UMxbHmzDlr4"}}, "type" "object", "id" "Thread"}, "Button" {"type" "object", "id" "Button", "description" "A button. Can be a text button or an image button.", "properties" {"textButton" {"$ref" "TextButton", "description" "A button with text and onclick action."}, "imageButton" {"description" "A button with image and onclick action.", "$ref" "ImageButton"}}}, "DriveDataRef" {"properties" {"driveFileId" {"description" "The id for the drive file, for use with the Drive API.", "type" "string"}}, "description" "A reference to the data of a drive attachment.", "type" "object", "id" "DriveDataRef"}, "KeyValue" {"properties" {"onClick" {"$ref" "OnClick", "description" "The onclick action. Only the top label, bottom label and content region are clickable."}, "topLabel" {"type" "string", "description" "The text of the top label. Formatted text supported."}, "button" {"$ref" "Button", "description" "A button that can be clicked to trigger an action."}, "contentMultiline" {"type" "boolean", "description" "If the content should be multiline."}, "iconUrl" {"type" "string", "description" "The icon specified by a URL."}, "content" {"description" "The text of the content. Formatted text supported and always required.", "type" "string"}, "bottomLabel" {"description" "The text of the bottom label. Formatted text supported.", "type" "string"}, "icon" {"enum" ["ICON_UNSPECIFIED" "AIRPLANE" "BOOKMARK" "BUS" "CAR" "CLOCK" "CONFIRMATION_NUMBER_ICON" "DOLLAR" "DESCRIPTION" "EMAIL" "EVENT_PERFORMER" "EVENT_SEAT" "FLIGHT_ARRIVAL" "FLIGHT_DEPARTURE" "HOTEL" "HOTEL_ROOM_TYPE" "INVITE" "MAP_PIN" "MEMBERSHIP" "MULTIPLE_PEOPLE" "OFFER" "PERSON" "PHONE" "RESTAURANT_ICON" "SHOPPING_CART" "STAR" "STORE" "TICKET" "TRAIN" "VIDEO_CAMERA" "VIDEO_PLAY"], "enumDescriptions" ["" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" ""], "type" "string", "description" "An enum value that will be replaced by the Chat API with the corresponding icon image."}}, "description" "A UI element contains a key (label) and a value (content). And this element may also contain some actions such as onclick button.", "id" "KeyValue", "type" "object"}, "ListSpacesResponse" {"id" "ListSpacesResponse", "properties" {"spaces" {"description" "List of spaces in the requested (or first) page.", "type" "array", "items" {"$ref" "Space"}}, "nextPageToken" {"type" "string", "description" "Continuation token to retrieve the next page of results. It will be empty for the last page of results. Tokens expire in an hour. An error is thrown if an expired token is passed."}}, "type" "object"}, "AttachmentDataRef" {"id" "AttachmentDataRef", "description" "A reference to the data of an attachment.", "type" "object", "properties" {"resourceName" {"type" "string", "description" "The resource name of the attachment data. This is used with the media API to download the attachment data."}}}, "ActionResponse" {"id" "ActionResponse", "properties" {"type" {"description" "The type of bot response.", "enum" ["TYPE_UNSPECIFIED" "NEW_MESSAGE" "UPDATE_MESSAGE" "REQUEST_CONFIG"], "type" "string", "enumDescriptions" ["Default type; will be handled as NEW_MESSAGE." "Post as a new message in the topic." "Update the bot's own message. (Only after CARD_CLICKED events.)" "Privately ask the user for additional auth or config."]}, "url" {"description" "URL for users to auth or config. (Only for REQUEST_CONFIG response types.)", "type" "string"}}, "description" "Parameters that a bot can use to configure how it's response is posted.", "type" "object"}, "User" {"type" "object", "id" "User", "description" "A user in Hangouts Chat.", "properties" {"displayName" {"type" "string", "description" "The user's display name."}, "type" {"enumDescriptions" ["Default value for the enum. DO NOT USE." "Human user." "Bot user."], "type" "string", "enum" ["TYPE_UNSPECIFIED" "HUMAN" "BOT"], "description" "User type."}, "name" {"type" "string", "description" "Resource name, in the format \"users/*\"."}, "domainId" {"type" "string", "description" "Obfuscated domain information."}, "isAnonymous" {"type" "boolean", "description" "True when the user is deleted or the user's proifle is not visible."}}}, "Card" {"properties" {"sections" {"description" "Sections are separated by a line divider.", "items" {"$ref" "Section"}, "type" "array"}, "header" {"$ref" "CardHeader", "description" "The header of the card. A header usually contains a title and an image."}, "cardActions" {"items" {"$ref" "CardAction"}, "type" "array", "description" "The actions of this card."}, "name" {"type" "string", "description" "Name of the card."}}, "id" "Card", "type" "object", "description" "A card is a UI element that can contain UI widgets such as texts, images."}, "ImageButton" {"description" "An image button with an onclick action.", "id" "ImageButton", "properties" {"onClick" {"$ref" "OnClick", "description" "The onclick action."}, "name" {"type" "string", "description" "The name of this image_button which will be used for accessibility. Default value will be provided if developers don't specify."}, "iconUrl" {"type" "string", "description" "The icon specified by a URL."}, "icon" {"description" "The icon specified by an enum that indices to an icon provided by Chat API.", "enum" ["ICON_UNSPECIFIED" "AIRPLANE" "BOOKMARK" "BUS" "CAR" "CLOCK" "CONFIRMATION_NUMBER_ICON" "DOLLAR" "DESCRIPTION" "EMAIL" "EVENT_PERFORMER" "EVENT_SEAT" "FLIGHT_ARRIVAL" "FLIGHT_DEPARTURE" "HOTEL" "HOTEL_ROOM_TYPE" "INVITE" "MAP_PIN" "MEMBERSHIP" "MULTIPLE_PEOPLE" "OFFER" "PERSON" "PHONE" "RESTAURANT_ICON" "SHOPPING_CART" "STAR" "STORE" "TICKET" "TRAIN" "VIDEO_CAMERA" "VIDEO_PLAY"], "enumDescriptions" ["" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" ""], "type" "string"}}, "type" "object"}, "FormAction" {"properties" {"parameters" {"items" {"$ref" "ActionParameter"}, "description" "List of action parameters.", "type" "array"}, "actionMethodName" {"type" "string", "description" "The method name is used to identify which part of the form triggered the form submission. This information is echoed back to the bot as part of the card click event. The same method name can be used for several elements that trigger a common behavior if desired."}}, "description" "A form action describes the behavior when the form is submitted. For example, an Apps Script can be invoked to handle the form.", "id" "FormAction", "type" "object"}, "Message" {"description" "A message in Hangouts Chat.", "id" "Message", "type" "object", "properties" {"space" {"$ref" "Space", "description" "The space the message belongs to."}, "fallbackText" {"description" "A plain-text description of the message's cards, used when the actual cards cannot be displayed (e.g. mobile notifications).", "type" "string"}, "attachment" {"type" "array", "items" {"$ref" "Attachment"}, "description" "User uploaded attachment."}, "name" {"type" "string", "description" "Resource name, in the form \"spaces/*/messages/*\". Example: spaces/AAAAMpdlehY/messages/UMxbHmzDlr4.UMxbHmzDlr4"}, "createTime" {"type" "string", "format" "google-datetime", "description" "Output only. The time at which the message was created in Hangouts Chat server."}, "slashCommand" {"$ref" "SlashCommand", "description" "Slash command information, if applicable."}, "text" {"type" "string", "description" "Plain-text body of the message."}, "annotations" {"type" "array", "description" "Output only. Annotations associated with the text in this message.", "items" {"$ref" "Annotation"}}, "actionResponse" {"$ref" "ActionResponse", "description" "Input only. Parameters that a bot can use to configure how its response is posted."}, "previewText" {"type" "string", "description" "Text for generating preview chips. This text will not be displayed to the user, but any links to images, web pages, videos, etc. included here will generate preview chips."}, "thread" {"description" "The thread the message belongs to.", "$ref" "Thread"}, "argumentText" {"description" "Plain-text body of the message with all bot mentions stripped out.", "type" "string"}, "sender" {"description" "The user who created the message.", "$ref" "User"}, "cards" {"type" "array", "items" {"$ref" "Card"}, "description" "Rich, formatted and interactive cards that can be used to display UI elements such as: formatted texts, buttons, clickable images. Cards are normally displayed below the plain-text body of the message."}}}, "Section" {"type" "object", "id" "Section", "description" "A section contains a collection of widgets that are rendered (vertically) in the order that they are specified. Across all platforms, cards have a narrow fixed width, so there is currently no need for layout properties (e.g. float).", "properties" {"header" {"type" "string", "description" "The header of the section, text formatted supported."}, "widgets" {"type" "array", "items" {"$ref" "WidgetMarkup"}, "description" "A section must contain at least 1 widget."}}}, "TextButton" {"type" "object", "properties" {"text" {"description" "The text of the button.", "type" "string"}, "onClick" {"description" "The onclick action of the button.", "$ref" "OnClick"}}, "id" "TextButton", "description" "A button with text and onclick action."}, "UserMentionMetadata" {"description" "Annotation metadata for user mentions (@).", "properties" {"type" {"description" "The type of user mention.", "enumDescriptions" ["Default value for the enum. DO NOT USE." "Add user to space." "Mention user in space."], "enum" ["TYPE_UNSPECIFIED" "ADD" "MENTION"], "type" "string"}, "user" {"$ref" "User", "description" "The user mentioned."}}, "id" "UserMentionMetadata", "type" "object"}, "ListMembershipsResponse" {"type" "object", "properties" {"memberships" {"description" "List of memberships in the requested (or first) page.", "items" {"$ref" "Membership"}, "type" "array"}, "nextPageToken" {"type" "string", "description" "Continuation token to retrieve the next page of results. It will be empty for the last page of results."}}, "id" "ListMembershipsResponse"}, "WidgetMarkup" {"properties" {"buttons" {"description" "A list of buttons. Buttons is also oneof data and only one of these fields should be set.", "items" {"$ref" "Button"}, "type" "array"}, "keyValue" {"description" "Display a key value item in this widget.", "$ref" "KeyValue"}, "image" {"$ref" "Image", "description" "Display an image in this widget."}, "textParagraph" {"$ref" "TextParagraph", "description" "Display a text paragraph in this widget."}}, "type" "object", "description" "A widget is a UI element that presents texts, images, etc.", "id" "WidgetMarkup"}, "CardHeader" {"properties" {"imageStyle" {"type" "string", "enum" ["IMAGE_STYLE_UNSPECIFIED" "IMAGE" "AVATAR"], "description" "The image's type (e.g. square border or circular border).", "enumDescriptions" ["" "Square border." "Circular border."]}, "title" {"type" "string", "description" "The title must be specified. The header has a fixed height: if both a title and subtitle is specified, each will take up 1 line. If only the title is specified, it will take up both lines."}, "imageUrl" {"type" "string", "description" "The URL of the image in the card header."}, "subtitle" {"description" "The subtitle of the card header.", "type" "string"}}, "type" "object", "id" "CardHeader"}, "DeprecatedEvent" {"description" "Google Chat events.", "id" "DeprecatedEvent", "properties" {"message" {"description" "The message that triggered the event, if applicable.", "$ref" "Message"}, "space" {"description" "The room or DM in which the event occurred.", "$ref" "Space"}, "token" {"type" "string", "description" "A secret value that bots can use to verify if a request is from Google. The token is randomly generated by Google, remains static, and can be obtained from the Google Chat API configuration page in the Cloud Console. Developers can revoke/regenerate it if needed from the same page."}, "user" {"description" "The user that triggered the event.", "$ref" "User"}, "action" {"description" "The form action data associated with an interactive card that was clicked. Only populated for CARD_CLICKED events. See the [Interactive Cards guide](/hangouts/chat/how-tos/cards-onclick) for more information.", "$ref" "FormAction"}, "type" {"type" "string", "enum" ["UNSPECIFIED" "MESSAGE" "ADDED_TO_SPACE" "REMOVED_FROM_SPACE" "CARD_CLICKED"], "enumDescriptions" ["Default value for the enum. DO NOT USE." "A message was sent in a room or direct message." "The bot was added to a room or DM." "The bot was removed from a room or DM." "The bot's interactive card was clicked."], "description" "The type of the event."}, "configCompleteRedirectUrl" {"type" "string", "description" "The URL the bot should redirect the user to after they have completed an authorization or configuration flow outside of Google Chat. See the [Authorizing access to 3p services guide](/hangouts/chat/how-tos/auth-3p) for more information."}, "threadKey" {"type" "string", "description" "The bot-defined key for the thread related to the event. See the thread_key field of the `spaces.message.create` request for more information."}, "eventTime" {"format" "google-datetime", "type" "string", "description" "The timestamp indicating when the event was dispatched."}}, "type" "object"}, "OpenLink" {"type" "object", "id" "OpenLink", "properties" {"url" {"description" "The URL to open.", "type" "string"}}, "description" "A link that opens a new window."}, "ActionParameter" {"description" "List of string parameters to supply when the action method is invoked. For example, consider three snooze buttons: snooze now, snooze 1 day, snooze next week. You might use action method = snooze(), passing the snooze type and snooze time in the list of string parameters.", "properties" {"value" {"description" "The value of the parameter.", "type" "string"}, "key" {"description" "The name of the parameter for the action script.", "type" "string"}}, "type" "object", "id" "ActionParameter"}, "SlashCommandMetadata" {"properties" {"commandId" {"type" "string", "description" "The command id of the invoked slash command.", "format" "int64"}, "triggersDialog" {"description" "Indicating whether the slash command is for a dialog.", "type" "boolean"}, "commandName" {"type" "string", "description" "The name of the invoked slash command."}, "bot" {"$ref" "User", "description" "The bot whose command was invoked."}, "type" {"description" "The type of slash command.", "type" "string", "enumDescriptions" ["Default value for the enum. DO NOT USE." "Add bot to space." "Invoke slash command in space."], "enum" ["TYPE_UNSPECIFIED" "ADD" "INVOKE"]}}, "id" "SlashCommandMetadata", "description" "Annotation metadata for slash commands (/).", "type" "object"}, "Image" {"type" "object", "properties" {"aspectRatio" {"type" "number", "format" "double", "description" "The aspect ratio of this image (width/height). This field allows clients to reserve the right height for the image while waiting for it to load. It's not meant to override the native aspect ratio of the image. If unset, the server fills it by prefetching the image."}, "onClick" {"$ref" "OnClick", "description" "The onclick action."}, "imageUrl" {"type" "string", "description" "The URL of the image."}}, "id" "Image", "description" "An image that is specified by a URL and can have an onclick action."}, "OnClick" {"description" "An onclick action (e.g. open a link).", "id" "OnClick", "properties" {"openLink" {"$ref" "OpenLink", "description" "This onclick triggers an open link action if specified."}, "action" {"$ref" "FormAction", "description" "A form action will be triggered by this onclick if specified."}}, "type" "object"}, "TextParagraph" {"properties" {"text" {"type" "string"}}, "description" "A paragraph of text. Formatted text supported.", "type" "object", "id" "TextParagraph"}}}