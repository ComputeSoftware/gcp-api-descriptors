#:compute.api-descriptor{:endpoint {:schemes ["https"], :host "binaryauthorization.googleapis.com", :base-path "/"}, :op->spec {"binaryauthorization.projects.attestors.delete" {:description "Deletes an attestor. Returns NOT_FOUND if the\nattestor does not exist.", :responses {"200" {:description "Successful response", :schema {"$ref" "#/definitions/Empty"}}}, :parameters [{:description "Required. The name of the attestors to delete, in the format\n`projects/*/attestors/*`.", :in "path", :name "name", :required true, :type "string", :x-reservedExpansion true}], :operationId "binaryauthorization.projects.attestors.delete", :compute.gcp.impl.descriptor/http-method :delete, :compute.gcp.impl.descriptor/http-path "/v1/{name}", :compute.gcp.impl.descriptor/path-parameters [{"$ref" "#/parameters/$.xgafv"} {"$ref" "#/parameters/access_token"} {"$ref" "#/parameters/alt"} {"$ref" "#/parameters/callback"} {"$ref" "#/parameters/fields"} {"$ref" "#/parameters/key"} {"$ref" "#/parameters/oauth_token"} {"$ref" "#/parameters/prettyPrint"} {"$ref" "#/parameters/quotaUser"} {"$ref" "#/parameters/uploadType"} {"$ref" "#/parameters/upload_protocol"}]}, "binaryauthorization.projects.attestors.get" {:description "Gets an attestor.\nReturns NOT_FOUND if the attestor does not exist.", :responses {"200" {:description "Successful response", :schema {"$ref" "#/definitions/Attestor"}}}, :parameters [{:description "Required. The name of the attestor to retrieve, in the format\n`projects/*/attestors/*`.", :in "path", :name "name", :required true, :type "string", :x-reservedExpansion true}], :operationId "binaryauthorization.projects.attestors.get", :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/v1/{name}", :compute.gcp.impl.descriptor/path-parameters [{"$ref" "#/parameters/$.xgafv"} {"$ref" "#/parameters/access_token"} {"$ref" "#/parameters/alt"} {"$ref" "#/parameters/callback"} {"$ref" "#/parameters/fields"} {"$ref" "#/parameters/key"} {"$ref" "#/parameters/oauth_token"} {"$ref" "#/parameters/prettyPrint"} {"$ref" "#/parameters/quotaUser"} {"$ref" "#/parameters/uploadType"} {"$ref" "#/parameters/upload_protocol"}]}, "binaryauthorization.projects.attestors.update" {:description "Updates an attestor.\nReturns NOT_FOUND if the attestor does not exist.", :responses {"200" {:description "Successful response", :schema {"$ref" "#/definitions/Attestor"}}}, :parameters [{:in "body", :name "body", :schema {"$ref" "#/definitions/Attestor"}} {:description "Required. The resource name, in the format:\n`projects/*/attestors/*`. This field may not be updated.", :in "path", :name "name", :required true, :type "string", :x-reservedExpansion true}], :operationId "binaryauthorization.projects.attestors.update", :compute.gcp.impl.descriptor/http-method :put, :compute.gcp.impl.descriptor/http-path "/v1/{name}", :compute.gcp.impl.descriptor/path-parameters [{"$ref" "#/parameters/$.xgafv"} {"$ref" "#/parameters/access_token"} {"$ref" "#/parameters/alt"} {"$ref" "#/parameters/callback"} {"$ref" "#/parameters/fields"} {"$ref" "#/parameters/key"} {"$ref" "#/parameters/oauth_token"} {"$ref" "#/parameters/prettyPrint"} {"$ref" "#/parameters/quotaUser"} {"$ref" "#/parameters/uploadType"} {"$ref" "#/parameters/upload_protocol"}]}, "binaryauthorization.projects.attestors.list" {:description "Lists attestors.\nReturns INVALID_ARGUMENT if the project does not exist.", :responses {"200" {:description "Successful response", :schema {"$ref" "#/definitions/ListAttestorsResponse"}}}, :parameters [{:description "Requested page size. The server may return fewer results than requested. If\nunspecified, the server will pick an appropriate default.", :in "query", :name "pageSize", :type "integer"} {:description "A token identifying a page of results the server should return. Typically,\nthis is the value of ListAttestorsResponse.next_page_token returned\nfrom the previous call to the `ListAttestors` method.", :in "query", :name "pageToken", :type "string"} {:description "Required. The resource name of the project associated with the\nattestors, in the format `projects/*`.", :in "path", :name "parent", :required true, :type "string", :x-reservedExpansion true}], :operationId "binaryauthorization.projects.attestors.list", :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/v1/{parent}/attestors", :compute.gcp.impl.descriptor/path-parameters [{"$ref" "#/parameters/$.xgafv"} {"$ref" "#/parameters/access_token"} {"$ref" "#/parameters/alt"} {"$ref" "#/parameters/callback"} {"$ref" "#/parameters/fields"} {"$ref" "#/parameters/key"} {"$ref" "#/parameters/oauth_token"} {"$ref" "#/parameters/prettyPrint"} {"$ref" "#/parameters/quotaUser"} {"$ref" "#/parameters/uploadType"} {"$ref" "#/parameters/upload_protocol"}]}, "binaryauthorization.projects.attestors.create" {:description "Creates an attestor, and returns a copy of the new\nattestor. Returns NOT_FOUND if the project does not exist,\nINVALID_ARGUMENT if the request is malformed, ALREADY_EXISTS if the\nattestor already exists.", :responses {"200" {:description "Successful response", :schema {"$ref" "#/definitions/Attestor"}}}, :parameters [{:description "Required. The attestors ID.", :in "query", :name "attestorId", :type "string"} {:in "body", :name "body", :schema {"$ref" "#/definitions/Attestor"}} {:description "Required. The parent of this attestor.", :in "path", :name "parent", :required true, :type "string", :x-reservedExpansion true}], :operationId "binaryauthorization.projects.attestors.create", :compute.gcp.impl.descriptor/http-method :post, :compute.gcp.impl.descriptor/http-path "/v1/{parent}/attestors", :compute.gcp.impl.descriptor/path-parameters [{"$ref" "#/parameters/$.xgafv"} {"$ref" "#/parameters/access_token"} {"$ref" "#/parameters/alt"} {"$ref" "#/parameters/callback"} {"$ref" "#/parameters/fields"} {"$ref" "#/parameters/key"} {"$ref" "#/parameters/oauth_token"} {"$ref" "#/parameters/prettyPrint"} {"$ref" "#/parameters/quotaUser"} {"$ref" "#/parameters/uploadType"} {"$ref" "#/parameters/upload_protocol"}]}, "binaryauthorization.projects.attestors.getIamPolicy" {:description "Gets the access control policy for a resource.\nReturns an empty policy if the resource exists and does not have a policy\nset.", :responses {"200" {:description "Successful response", :schema {"$ref" "#/definitions/IamPolicy"}}}, :parameters [{:description "Optional. The policy format version to be returned.\n\nValid values are 0, 1, and 3. Requests specifying an invalid value will be\nrejected.\n\nRequests for policies with any conditional bindings must specify version 3.\nPolicies without any conditional bindings may specify any valid value or\nleave the field unset.", :in "query", :name "options.requestedPolicyVersion", :type "integer"} {:description "REQUIRED: The resource for which the policy is being requested.\nSee the operation documentation for the appropriate value for this field.", :in "path", :name "resource", :required true, :type "string", :x-reservedExpansion true}], :operationId "binaryauthorization.projects.attestors.getIamPolicy", :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/v1/{resource}:getIamPolicy", :compute.gcp.impl.descriptor/path-parameters [{"$ref" "#/parameters/$.xgafv"} {"$ref" "#/parameters/access_token"} {"$ref" "#/parameters/alt"} {"$ref" "#/parameters/callback"} {"$ref" "#/parameters/fields"} {"$ref" "#/parameters/key"} {"$ref" "#/parameters/oauth_token"} {"$ref" "#/parameters/prettyPrint"} {"$ref" "#/parameters/quotaUser"} {"$ref" "#/parameters/uploadType"} {"$ref" "#/parameters/upload_protocol"}]}, "binaryauthorization.projects.attestors.setIamPolicy" {:description "Sets the access control policy on the specified resource. Replaces any\nexisting policy.\n\nCan return Public Errors: NOT_FOUND, INVALID_ARGUMENT and PERMISSION_DENIED", :responses {"200" {:description "Successful response", :schema {"$ref" "#/definitions/IamPolicy"}}}, :parameters [{:in "body", :name "body", :schema {"$ref" "#/definitions/SetIamPolicyRequest"}} {:description "REQUIRED: The resource for which the policy is being specified.\nSee the operation documentation for the appropriate value for this field.", :in "path", :name "resource", :required true, :type "string", :x-reservedExpansion true}], :operationId "binaryauthorization.projects.attestors.setIamPolicy", :compute.gcp.impl.descriptor/http-method :post, :compute.gcp.impl.descriptor/http-path "/v1/{resource}:setIamPolicy", :compute.gcp.impl.descriptor/path-parameters [{"$ref" "#/parameters/$.xgafv"} {"$ref" "#/parameters/access_token"} {"$ref" "#/parameters/alt"} {"$ref" "#/parameters/callback"} {"$ref" "#/parameters/fields"} {"$ref" "#/parameters/key"} {"$ref" "#/parameters/oauth_token"} {"$ref" "#/parameters/prettyPrint"} {"$ref" "#/parameters/quotaUser"} {"$ref" "#/parameters/uploadType"} {"$ref" "#/parameters/upload_protocol"}]}, "binaryauthorization.projects.attestors.testIamPermissions" {:description "Returns permissions that a caller has on the specified resource.\nIf the resource does not exist, this will return an empty set of\npermissions, not a NOT_FOUND error.\n\nNote: This operation is designed to be used for building permission-aware\nUIs and command-line tools, not for authorization checking. This operation\nmay \"fail open\" without warning.", :responses {"200" {:description "Successful response", :schema {"$ref" "#/definitions/TestIamPermissionsResponse"}}}, :parameters [{:in "body", :name "body", :schema {"$ref" "#/definitions/TestIamPermissionsRequest"}} {:description "REQUIRED: The resource for which the policy detail is being requested.\nSee the operation documentation for the appropriate value for this field.", :in "path", :name "resource", :required true, :type "string", :x-reservedExpansion true}], :operationId "binaryauthorization.projects.attestors.testIamPermissions", :compute.gcp.impl.descriptor/http-method :post, :compute.gcp.impl.descriptor/http-path "/v1/{resource}:testIamPermissions", :compute.gcp.impl.descriptor/path-parameters [{"$ref" "#/parameters/$.xgafv"} {"$ref" "#/parameters/access_token"} {"$ref" "#/parameters/alt"} {"$ref" "#/parameters/callback"} {"$ref" "#/parameters/fields"} {"$ref" "#/parameters/key"} {"$ref" "#/parameters/oauth_token"} {"$ref" "#/parameters/prettyPrint"} {"$ref" "#/parameters/quotaUser"} {"$ref" "#/parameters/uploadType"} {"$ref" "#/parameters/upload_protocol"}]}}, :parameters {:quotaUser {:description "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.", :in "query", :name "quotaUser", :type "string"}, :key {:description "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.", :in "query", :name "key", :type "string"}, :alt {:default "json", :description "Data format for response.", :enum ["json" "media" "proto"], :in "query", :name "alt", :type "string"}, :access_token {:description "OAuth access token.", :in "query", :name "access_token", :type "string"}, :fields {:description "Selector specifying which fields to include in a partial response.", :in "query", :name "fields", :type "string"}, :upload_protocol {:description "Upload protocol for media (e.g. \"raw\", \"multipart\").", :in "query", :name "upload_protocol", :type "string"}, :uploadType {:description "Legacy upload protocol for media (e.g. \"media\", \"multipart\").", :in "query", :name "uploadType", :type "string"}, :oauth_token {:description "OAuth 2.0 token for the current user.", :in "query", :name "oauth_token", :type "string"}, :prettyPrint {:default true, :description "Returns response with indentations and line breaks.", :in "query", :name "prettyPrint", :type "boolean"}, "$.xgafv" {:description "V1 error format.", :enum ["1" "2"], :in "query", :name "$.xgafv", :type "string"}, :callback {:description "JSONP", :in "query", :name "callback", :type "string"}}, :definitions {:IamPolicy {:description "Defines an Identity and Access Management (IAM) policy. It is used to\nspecify access control policies for Cloud Platform resources.\n\n\nA `Policy` is a collection of `bindings`. A `binding` binds one or more\n`members` to a single `role`. Members can be user accounts, service accounts,\nGoogle groups, and domains (such as G Suite). A `role` is a named list of\npermissions (defined by IAM or configured by users). A `binding` can\noptionally specify a `condition`, which is a logic expression that further\nconstrains the role binding based on attributes about the request and/or\ntarget resource.\n\n**JSON Example**\n\n    {\n      \"bindings\": [\n        {\n          \"role\": \"roles/resourcemanager.organizationAdmin\",\n          \"members\": [\n            \"user:mike@example.com\",\n            \"group:admins@example.com\",\n            \"domain:google.com\",\n            \"serviceAccount:my-project-id@appspot.gserviceaccount.com\"\n          ]\n        },\n        {\n          \"role\": \"roles/resourcemanager.organizationViewer\",\n          \"members\": [\"user:eve@example.com\"],\n          \"condition\": {\n            \"title\": \"expirable access\",\n            \"description\": \"Does not grant access after Sep 2020\",\n            \"expression\": \"request.time <\n            timestamp('2020-10-01T00:00:00.000Z')\",\n          }\n        }\n      ]\n    }\n\n**YAML Example**\n\n    bindings:\n    - members:\n      - user:mike@example.com\n      - group:admins@example.com\n      - domain:google.com\n      - serviceAccount:my-project-id@appspot.gserviceaccount.com\n      role: roles/resourcemanager.organizationAdmin\n    - members:\n      - user:eve@example.com\n      role: roles/resourcemanager.organizationViewer\n      condition:\n        title: expirable access\n        description: Does not grant access after Sep 2020\n        expression: request.time < timestamp('2020-10-01T00:00:00.000Z')\n\nFor a description of IAM and its features, see the\n[IAM developer's guide](https://cloud.google.com/iam/docs).", :properties {:bindings {:description "Associates a list of `members` to a `role`. Optionally may specify a\n`condition` that determines when binding is in effect.\n`bindings` with no members will result in an error.", :items {"$ref" "#/definitions/Binding"}, :type "array"}, :etag {:description "`etag` is used for optimistic concurrency control as a way to help\nprevent simultaneous updates of a policy from overwriting each other.\nIt is strongly suggested that systems make use of the `etag` in the\nread-modify-write cycle to perform policy updates in order to avoid race\nconditions: An `etag` is returned in the response to `getIamPolicy`, and\nsystems are expected to put that etag in the request to `setIamPolicy` to\nensure that their change will be applied to the same version of the policy.\n\nIf no `etag` is provided in the call to `setIamPolicy`, then the existing\npolicy is overwritten. Due to blind-set semantics of an etag-less policy,\n'setIamPolicy' will not fail even if either of incoming or stored policy\ndoes not meet the version requirements.", :format "byte", :type "string"}, :version {:description "Specifies the format of the policy.\n\nValid values are 0, 1, and 3. Requests specifying an invalid value will be\nrejected.\n\nOperations affecting conditional bindings must specify version 3. This can\nbe either setting a conditional policy, modifying a conditional binding,\nor removing a conditional binding from the stored conditional policy.\nOperations on non-conditional policies may specify any valid value or\nleave the field unset.\n\nIf no etag is provided in the call to `setIamPolicy`, any version\ncompliance checks on the incoming and/or stored policy is skipped.", :format "int32", :type "integer"}}, :type "object"}, :AdmissionRule {:description "An admission rule specifies either that all container images\nused in a pod creation request must be attested to by one or more\nattestors, that all pod creations will be allowed, or that all\npod creations will be denied.\n\nImages matching an admission whitelist pattern\nare exempted from admission rules and will never block a pod creation.", :properties {:enforcementMode {:description "Required. The action when a pod creation is denied by the admission rule.", :enum ["ENFORCEMENT_MODE_UNSPECIFIED" "ENFORCED_BLOCK_AND_AUDIT_LOG" "DRYRUN_AUDIT_LOG_ONLY"], :type "string"}, :evaluationMode {:description "Required. How this admission rule will be evaluated.", :enum ["EVALUATION_MODE_UNSPECIFIED" "ALWAYS_ALLOW" "REQUIRE_ATTESTATION" "ALWAYS_DENY"], :type "string"}, :requireAttestationsBy {:description "Optional. The resource names of the attestors that must attest to\na container image, in the format `projects/*/attestors/*`. Each\nattestor must exist before a policy can reference it.  To add an attestor\nto a policy the principal issuing the policy change request must be able\nto read the attestor resource.\n\nNote: this field must be non-empty when the evaluation_mode field specifies\nREQUIRE_ATTESTATION, otherwise it must be empty.", :items {:type "string"}, :type "array"}}, :type "object"}, :SetIamPolicyRequest {:description "Request message for `SetIamPolicy` method.", :properties {:policy {"$ref" "#/definitions/IamPolicy", :description "REQUIRED: The complete policy to be applied to the `resource`. The size of\nthe policy is limited to a few 10s of KB. An empty policy is a\nvalid policy but certain Cloud Platform services (such as Projects)\nmight reject them."}}, :type "object"}, :AttestorPublicKey {:description "An attestor public key that will be used to verify\nattestations signed by this attestor.", :properties {:asciiArmoredPgpPublicKey {:description "ASCII-armored representation of a PGP public key, as the entire output by\nthe command `gpg --export --armor foo@example.com` (either LF or CRLF\nline endings).\nWhen using this field, `id` should be left blank.  The BinAuthz API\nhandlers will calculate the ID and fill it in automatically.  BinAuthz\ncomputes this ID as the OpenPGP RFC4880 V4 fingerprint, represented as\nupper-case hex.  If `id` is provided by the caller, it will be\noverwritten by the API-calculated ID.", :type "string"}, :comment {:description "Optional. A descriptive comment. This field may be updated.", :type "string"}, :id {:description "The ID of this public key.\nSignatures verified by BinAuthz must include the ID of the public key that\ncan be used to verify them, and that ID must match the contents of this\nfield exactly.\nAdditional restrictions on this field can be imposed based on which public\nkey type is encapsulated. See the documentation on `public_key` cases below\nfor details.", :type "string"}, :pkixPublicKey {"$ref" "#/definitions/PkixPublicKey", :description "A raw PKIX SubjectPublicKeyInfo format public key.\n\nNOTE: `id` may be explicitly provided by the caller when using this\ntype of public key, but it MUST be a valid RFC3986 URI. If `id` is left\nblank, a default one will be computed based on the digest of the DER\nencoding of the public key."}}, :type "object"}, :Binding {:description "Associates `members` with a `role`.", :properties {:condition {"$ref" "#/definitions/Expr", :description "The condition that is associated with this binding.\nNOTE: An unsatisfied condition will not allow user access via current\nbinding. Different bindings, including their conditions, are examined\nindependently."}, :members {:description "Specifies the identities requesting access for a Cloud Platform resource.\n`members` can have the following values:\n\n* `allUsers`: A special identifier that represents anyone who is\n   on the internet; with or without a Google account.\n\n* `allAuthenticatedUsers`: A special identifier that represents anyone\n   who is authenticated with a Google account or a service account.\n\n* `user:{emailid}`: An email address that represents a specific Google\n   account. For example, `alice@example.com` .\n\n\n* `serviceAccount:{emailid}`: An email address that represents a service\n   account. For example, `my-other-app@appspot.gserviceaccount.com`.\n\n* `group:{emailid}`: An email address that represents a Google group.\n   For example, `admins@example.com`.\n\n\n* `domain:{domain}`: The G Suite domain (primary) that represents all the\n   users of that domain. For example, `google.com` or `example.com`.\n\n", :items {:type "string"}, :type "array"}, :role {:description "Role that is assigned to `members`.\nFor example, `roles/viewer`, `roles/editor`, or `roles/owner`.", :type "string"}}, :type "object"}, :Empty {:description "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.", :properties {}, :type "object"}, :TestIamPermissionsRequest {:description "Request message for `TestIamPermissions` method.", :properties {:permissions {:description "The set of permissions to check for the `resource`. Permissions with\nwildcards (such as '*' or 'storage.*') are not allowed. For more\ninformation see\n[IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).", :items {:type "string"}, :type "array"}}, :type "object"}, :UserOwnedGrafeasNote {:description "An user owned Grafeas note references a Grafeas\nAttestation.Authority Note created by the user.", :properties {:delegationServiceAccountEmail {:description "Output only. This field will contain the service account email address\nthat this Attestor will use as the principal when querying Container\nAnalysis. Attestor administrators must grant this service account the\nIAM role needed to read attestations from the note_reference in\nContainer Analysis (`containeranalysis.notes.occurrences.viewer`).\n\nThis email address is fixed for the lifetime of the Attestor, but callers\nshould not make any other assumptions about the service account email;\nfuture versions may use an email based on a different naming pattern.", :type "string"}, :noteReference {:description "Required. The Grafeas resource name of a Attestation.Authority Note,\ncreated by the user, in the format: `projects/*/notes/*`. This field may\nnot be updated.\n\nAn attestation by this attestor is stored as a Grafeas\nAttestation.Authority Occurrence that names a container image and that\nlinks to this Note. Grafeas is an external dependency.", :type "string"}, :publicKeys {:description "Optional. Public keys that verify attestations signed by this\nattestor.  This field may be updated.\n\nIf this field is non-empty, one of the specified public keys must\nverify that an attestation was signed by this attestor for the\nimage specified in the admission request.\n\nIf this field is empty, this attestor always returns that no\nvalid attestations exist.", :items {"$ref" "#/definitions/AttestorPublicKey"}, :type "array"}}, :type "object"}, :TestIamPermissionsResponse {:description "Response message for `TestIamPermissions` method.", :properties {:permissions {:description "A subset of `TestPermissionsRequest.permissions` that the caller is\nallowed.", :items {:type "string"}, :type "array"}}, :type "object"}, :Attestor {:description "An attestor that attests to container image\nartifacts. An existing attestor cannot be modified except where\nindicated.", :properties {:description {:description "Optional. A descriptive comment.  This field may be updated.\nThe field may be displayed in chooser dialogs.", :type "string"}, :name {:description "Required. The resource name, in the format:\n`projects/*/attestors/*`. This field may not be updated.", :type "string"}, :updateTime {:description "Output only. Time when the attestor was last updated.", :format "google-datetime", :type "string"}, :userOwnedGrafeasNote {"$ref" "#/definitions/UserOwnedGrafeasNote", :description "A Grafeas Attestation.Authority Note, created by the user."}}, :type "object"}, :Expr {:description "Represents an expression text. Example:\n\n    title: \"User account presence\"\n    description: \"Determines whether the request has a user account\"\n    expression: \"size(request.user) > 0\"", :properties {:description {:description "An optional description of the expression. This is a longer text which\ndescribes the expression, e.g. when hovered over it in a UI.", :type "string"}, :expression {:description "Textual representation of an expression in\nCommon Expression Language syntax.\n\nThe application context of the containing message determines which\nwell-known feature set of CEL is supported.", :type "string"}, :location {:description "An optional string indicating the location of the expression for error\nreporting, e.g. a file name and a position in the file.", :type "string"}, :title {:description "An optional title for the expression, i.e. a short string describing\nits purpose. This can be used e.g. in UIs which allow to enter the\nexpression.", :type "string"}}, :type "object"}, :AdmissionWhitelistPattern {:description "An admission whitelist pattern exempts images\nfrom checks by admission rules.", :properties {:namePattern {:description "An image name pattern to whitelist, in the form `registry/path/to/image`.\nThis supports a trailing `*` as a wildcard, but this is allowed only in\ntext after the `registry/` part.", :type "string"}}, :type "object"}, :ListAttestorsResponse {:description "Response message for BinauthzManagementService.ListAttestors.", :properties {:attestors {:description "The list of attestors.", :items {"$ref" "#/definitions/Attestor"}, :type "array"}, :nextPageToken {:description "A token to retrieve the next page of results. Pass this value in the\nListAttestorsRequest.page_token field in the subsequent call to the\n`ListAttestors` method to retrieve the next page of results.", :type "string"}}, :type "object"}, :PkixPublicKey {:description "A public key in the PkixPublicKey format (see\nhttps://tools.ietf.org/html/rfc5280#section-4.1.2.7 for details).\nPublic keys of this type are typically textually encoded using the PEM\nformat.", :properties {:publicKeyPem {:description "A PEM-encoded public key, as described in\nhttps://tools.ietf.org/html/rfc7468#section-13", :type "string"}, :signatureAlgorithm {:description "The signature algorithm used to verify a message against a signature using\nthis key.\nThese signature algorithm must match the structure and any object\nidentifiers encoded in `public_key_pem` (i.e. this algorithm must match\nthat of the public key).", :enum ["SIGNATURE_ALGORITHM_UNSPECIFIED" "RSA_PSS_2048_SHA256" "RSA_PSS_3072_SHA256" "RSA_PSS_4096_SHA256" "RSA_PSS_4096_SHA512" "RSA_SIGN_PKCS1_2048_SHA256" "RSA_SIGN_PKCS1_3072_SHA256" "RSA_SIGN_PKCS1_4096_SHA256" "RSA_SIGN_PKCS1_4096_SHA512" "ECDSA_P256_SHA256" "ECDSA_P384_SHA384" "ECDSA_P521_SHA512"], :type "string"}}, :type "object"}, :Policy {:description "A policy for container image binary authorization.", :properties {:admissionWhitelistPatterns {:description "Optional. Admission policy whitelisting. A matching admission request will\nalways be permitted. This feature is typically used to exclude Google or\nthird-party infrastructure images from Binary Authorization policies.", :items {"$ref" "#/definitions/AdmissionWhitelistPattern"}, :type "array"}, :clusterAdmissionRules {:additionalProperties {"$ref" "#/definitions/AdmissionRule"}, :description "Optional. Per-cluster admission rules. Cluster spec format:\n`location.clusterId`. There can be at most one admission rule per cluster\nspec.\nA `location` is either a compute zone (e.g. us-central1-a) or a region\n(e.g. us-central1).\nFor `clusterId` syntax restrictions see\nhttps://cloud.google.com/container-engine/reference/rest/v1/projects.zones.clusters.", :type "object"}, :defaultAdmissionRule {"$ref" "#/definitions/AdmissionRule", :description "Required. Default admission rule for a cluster without a per-cluster, per-\nkubernetes-service-account, or per-istio-service-identity admission rule."}, :description {:description "Optional. A descriptive comment.", :type "string"}, :globalPolicyEvaluationMode {:description "Optional. Controls the evaluation of a Google-maintained global admission\npolicy for common system-level images. Images not covered by the global\npolicy will be subject to the project admission policy. This setting\nhas no effect when specified inside a global admission policy.", :enum ["GLOBAL_POLICY_EVALUATION_MODE_UNSPECIFIED" "ENABLE" "DISABLE"], :type "string"}, :name {:description "Output only. The resource name, in the format `projects/*/policy`. There is\nat most one policy per project.", :type "string"}, :updateTime {:description "Output only. Time when the policy was last updated.", :format "google-datetime", :type "string"}}, :type "object"}}}