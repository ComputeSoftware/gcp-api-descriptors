#:compute.api-descriptor{:endpoint #:compute.gcp.impl.descriptor{:url "https://www.googleapis.com/tasks/v1"}, :op->spec {"tasks.tasklists.list" {:operationId "tasks.tasklists.list", :description "Returns all the authenticated user's task lists.", :parameters [{:description "Maximum number of task lists returned on one page. Optional. The default is 20 (max allowed: 100).", :in "query", :name "maxResults", :schema {:type "string"}} {:description "Token specifying the result page to return. Optional.", :in "query", :name "pageToken", :schema {:type "string"}}], :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/users/@me/lists"}, "tasks.tasks.insert" {:operationId "tasks.tasks.insert", :description "Creates a new task on the specified task list. Fails with HTTP code 403 or 429 after reaching the storage limit of 100,000 tasks per account.", :parameters [{:description "Task list identifier.", :in "path", :name "tasklist", :required true, :schema {:type "string"}} {:description "Parent task identifier. If the task is created at the top level, this parameter is omitted. Optional.", :in "query", :name "parent", :schema {:type "string"}} {:description "Previous sibling task identifier. If the task is created at the first position among its siblings, this parameter is omitted. Optional.", :in "query", :name "previous", :schema {:type "string"}}], :requestBody {:content {"application/json" {:schema {:$ref "#/components/schemas/Task"}}}}, :compute.gcp.impl.descriptor/http-method :post, :compute.gcp.impl.descriptor/http-path "/lists/{tasklist}/tasks"}, "tasks.tasks.delete" {:operationId "tasks.tasks.delete", :description "Deletes the specified task from the task list.", :parameters [{:description "Task list identifier.", :in "path", :name "tasklist", :required true, :schema {:type "string"}} {:description "Task identifier.", :in "path", :name "task", :required true, :schema {:type "string"}}], :compute.gcp.impl.descriptor/http-method :delete, :compute.gcp.impl.descriptor/http-path "/lists/{tasklist}/tasks/{task}"}, "tasks.tasks.list" {:operationId "tasks.tasks.list", :description "Returns all tasks in the specified task list.", :parameters [{:description "Task list identifier.", :in "path", :name "tasklist", :required true, :schema {:type "string"}} {:description "Upper bound for a task's completion date (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by completion date.", :in "query", :name "completedMax", :schema {:type "string"}} {:description "Lower bound for a task's completion date (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by completion date.", :in "query", :name "completedMin", :schema {:type "string"}} {:description "Upper bound for a task's due date (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by due date.", :in "query", :name "dueMax", :schema {:type "string"}} {:description "Lower bound for a task's due date (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by due date.", :in "query", :name "dueMin", :schema {:type "string"}} {:description "Maximum number of task lists returned on one page. Optional. The default is 20 (max allowed: 100).", :in "query", :name "maxResults", :schema {:type "string"}} {:description "Token specifying the result page to return. Optional.", :in "query", :name "pageToken", :schema {:type "string"}} {:description "Flag indicating whether completed tasks are returned in the result. Optional. The default is True.", :in "query", :name "showCompleted", :schema {:type "boolean"}} {:description "Flag indicating whether deleted tasks are returned in the result. Optional. The default is False.", :in "query", :name "showDeleted", :schema {:type "boolean"}} {:description "Flag indicating whether hidden tasks are returned in the result. Optional. The default is False.", :in "query", :name "showHidden", :schema {:type "boolean"}} {:description "Lower bound for a task's last modification time (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by last modification time.", :in "query", :name "updatedMin", :schema {:type "string"}}], :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/lists/{tasklist}/tasks"}, "tasks.tasks.patch" {:operationId "tasks.tasks.patch", :description "Updates the specified task. This method supports patch semantics.", :parameters [{:description "Task list identifier.", :in "path", :name "tasklist", :required true, :schema {:type "string"}} {:description "Task identifier.", :in "path", :name "task", :required true, :schema {:type "string"}}], :requestBody {:content {"application/json" {:schema {:$ref "#/components/schemas/Task"}}}}, :compute.gcp.impl.descriptor/http-method :patch, :compute.gcp.impl.descriptor/http-path "/lists/{tasklist}/tasks/{task}"}, "tasks.tasklists.update" {:operationId "tasks.tasklists.update", :description "Updates the authenticated user's specified task list.", :parameters [{:description "Task list identifier.", :in "path", :name "tasklist", :required true, :schema {:type "string"}}], :requestBody {:content {"application/json" {:schema {:$ref "#/components/schemas/TaskList"}}}}, :compute.gcp.impl.descriptor/http-method :put, :compute.gcp.impl.descriptor/http-path "/users/@me/lists/{tasklist}"}, "tasks.tasklists.insert" {:operationId "tasks.tasklists.insert", :description "Creates a new task list and adds it to the authenticated user's task lists. Fails with HTTP code 403 or 429 after reaching the storage limit of 2,000 lists.", :requestBody {:content {"application/json" {:schema {:$ref "#/components/schemas/TaskList"}}}}, :compute.gcp.impl.descriptor/http-method :post, :compute.gcp.impl.descriptor/http-path "/users/@me/lists"}, "tasks.tasks.clear" {:operationId "tasks.tasks.clear", :description "Clears all completed tasks from the specified task list. The affected tasks will be marked as 'hidden' and no longer be returned by default when retrieving all tasks for a task list.", :parameters [{:description "Task list identifier.", :in "path", :name "tasklist", :required true, :schema {:type "string"}}], :compute.gcp.impl.descriptor/http-method :post, :compute.gcp.impl.descriptor/http-path "/lists/{tasklist}/clear"}, "tasks.tasks.update" {:operationId "tasks.tasks.update", :description "Updates the specified task.", :parameters [{:description "Task list identifier.", :in "path", :name "tasklist", :required true, :schema {:type "string"}} {:description "Task identifier.", :in "path", :name "task", :required true, :schema {:type "string"}}], :requestBody {:content {"application/json" {:schema {:$ref "#/components/schemas/Task"}}}}, :compute.gcp.impl.descriptor/http-method :put, :compute.gcp.impl.descriptor/http-path "/lists/{tasklist}/tasks/{task}"}, "tasks.tasklists.delete" {:operationId "tasks.tasklists.delete", :description "Deletes the authenticated user's specified task list.", :parameters [{:description "Task list identifier.", :in "path", :name "tasklist", :required true, :schema {:type "string"}}], :compute.gcp.impl.descriptor/http-method :delete, :compute.gcp.impl.descriptor/http-path "/users/@me/lists/{tasklist}"}, "tasks.tasks.get" {:operationId "tasks.tasks.get", :description "Returns the specified task.", :parameters [{:description "Task list identifier.", :in "path", :name "tasklist", :required true, :schema {:type "string"}} {:description "Task identifier.", :in "path", :name "task", :required true, :schema {:type "string"}}], :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/lists/{tasklist}/tasks/{task}"}, "tasks.tasklists.patch" {:operationId "tasks.tasklists.patch", :description "Updates the authenticated user's specified task list. This method supports patch semantics.", :parameters [{:description "Task list identifier.", :in "path", :name "tasklist", :required true, :schema {:type "string"}}], :requestBody {:content {"application/json" {:schema {:$ref "#/components/schemas/TaskList"}}}}, :compute.gcp.impl.descriptor/http-method :patch, :compute.gcp.impl.descriptor/http-path "/users/@me/lists/{tasklist}"}, "tasks.tasklists.get" {:operationId "tasks.tasklists.get", :description "Returns the authenticated user's specified task list.", :parameters [{:description "Task list identifier.", :in "path", :name "tasklist", :required true, :schema {:type "string"}}], :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/users/@me/lists/{tasklist}"}, "tasks.tasks.move" {:operationId "tasks.tasks.move", :description "Moves the specified task to another position in the task list. This can include putting it as a child task under a new parent and/or move it to a different position among its sibling tasks.", :parameters [{:description "Task list identifier.", :in "path", :name "tasklist", :required true, :schema {:type "string"}} {:description "Task identifier.", :in "path", :name "task", :required true, :schema {:type "string"}} {:description "New parent task identifier. If the task is moved to the top level, this parameter is omitted. Optional.", :in "query", :name "parent", :schema {:type "string"}} {:description "New previous sibling task identifier. If the task is moved to the first position among its siblings, this parameter is omitted. Optional.", :in "query", :name "previous", :schema {:type "string"}}], :compute.gcp.impl.descriptor/http-method :post, :compute.gcp.impl.descriptor/http-path "/lists/{tasklist}/tasks/{task}/move"}}, :resolve {:components {:parameters {:alt {:description "Data format for the response.", :in "query", :name "alt", :schema {:default "json", :enum ["json"], :type "string"}}, :fields {:description "Selector specifying which fields to include in a partial response.", :in "query", :name "fields", :schema {:type "string"}}, :key {:description "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.", :in "query", :name "key", :schema {:type "string"}}, :oauth_token {:description "OAuth 2.0 token for the current user.", :in "query", :name "oauth_token", :schema {:type "string"}}, :prettyPrint {:description "Returns response with indentations and line breaks.", :in "query", :name "prettyPrint", :schema {:default true, :type "boolean"}}, :quotaUser {:description "An opaque string that represents a user for quota purposes. Must not exceed 40 characters.", :in "query", :name "quotaUser", :schema {:type "string"}}, :userIp {:description "Deprecated. Please use quotaUser instead.", :in "query", :name "userIp", :schema {:type "string"}}}, :requestBodies {:Task {:content {"application/json" {:schema {:$ref "#/components/schemas/Task"}}}}, :TaskList {:content {"application/json" {:schema {:$ref "#/components/schemas/TaskList"}}}}}, :schemas {:Task {:properties {:deleted {:description "Flag indicating whether the task has been deleted. The default if False.", :type "boolean"}, :parent {:description "Parent task identifier. This field is omitted if it is a top-level task. This field is read-only. Use the \"move\" method to move the task under a different parent or to the top level.", :type "string"}, :updated {:description "Last modification time of the task (as a RFC 3339 timestamp).", :format "date-time", :type "string"}, :completed {:description "Completion date of the task (as a RFC 3339 timestamp). This field is omitted if the task has not been completed.", :format "date-time", :type "string"}, :selfLink {:description "URL pointing to this task. Used to retrieve, update, or delete this task.", :type "string"}, :etag {:description "ETag of the resource.", :type "string"}, :due {:description "Due date of the task (as a RFC 3339 timestamp). Optional. The due date only records date information; the time portion of the timestamp is discarded when setting the due date. It isn't possible to read or write the time that a task is due via the API.", :format "date-time", :type "string"}, :title {:description "Title of the task.", :type "string"}, :status {:description "Status of the task. This is either \"needsAction\" or \"completed\".", :type "string"}, :hidden {:description "Flag indicating whether the task is hidden. This is the case if the task had been marked completed when the task list was last cleared. The default is False. This field is read-only.", :type "boolean"}, :id {:description "Task identifier.", :type "string"}, :kind {:default "tasks#task", :description "Type of the resource. This is always \"tasks#task\".", :type "string"}, :notes {:description "Notes describing the task. Optional.", :type "string"}, :position {:description "String indicating the position of the task among its sibling tasks under the same parent task or at the top level. If this string is greater than another task's corresponding position string according to lexicographical ordering, the task is positioned after the other task under the same parent task (or at the top level). This field is read-only. Use the \"move\" method to move the task to another position.", :type "string"}, :links {:description "Collection of links. This collection is read-only.", :items {:properties {:description {:description "The description. In HTML speak: Everything between <a> and </a>.", :type "string"}, :link {:description "The URL.", :type "string"}, :type {:description "Type of the link, e.g. \"email\".", :type "string"}}, :type "object"}, :type "array"}}, :type "object"}, :TaskList {:properties {:etag {:description "ETag of the resource.", :type "string"}, :id {:description "Task list identifier.", :type "string"}, :kind {:default "tasks#taskList", :description "Type of the resource. This is always \"tasks#taskList\".", :type "string"}, :selfLink {:description "URL pointing to this task list. Used to retrieve, update, or delete this task list.", :type "string"}, :title {:description "Title of the task list.", :type "string"}, :updated {:description "Last modification time of the task list (as a RFC 3339 timestamp).", :format "date-time", :type "string"}}, :type "object"}, :TaskLists {:properties {:etag {:description "ETag of the resource.", :type "string"}, :items {:description "Collection of task lists.", :items {:$ref "#/components/schemas/TaskList"}, :type "array"}, :kind {:default "tasks#taskLists", :description "Type of the resource. This is always \"tasks#taskLists\".", :type "string"}, :nextPageToken {:description "Token that can be used to request the next page of this result.", :type "string"}}, :type "object"}, :Tasks {:properties {:etag {:description "ETag of the resource.", :type "string"}, :items {:description "Collection of tasks.", :items {:$ref "#/components/schemas/Task"}, :type "array"}, :kind {:default "tasks#tasks", :description "Type of the resource. This is always \"tasks#tasks\".", :type "string"}, :nextPageToken {:description "Token used to access the next page of this result.", :type "string"}}, :type "object"}}, :securitySchemes {:Oauth2 {:description "Oauth 2.0 implicit authentication", :flows {:implicit {:authorizationUrl "https://accounts.google.com/o/oauth2/auth", :scopes {"https://www.googleapis.com/auth/tasks" "Create, edit, organize, and delete all your tasks", "https://www.googleapis.com/auth/tasks.readonly" "View your tasks"}}}, :type "oauth2"}, :Oauth2c {:description "Oauth 2.0 accessCode authentication", :flows {:authorizationCode {:authorizationUrl "https://accounts.google.com/o/oauth2/auth", :scopes {"https://www.googleapis.com/auth/tasks" "Create, edit, organize, and delete all your tasks", "https://www.googleapis.com/auth/tasks.readonly" "View your tasks"}, :tokenUrl "https://accounts.google.com/o/oauth2/token"}}, :type "oauth2"}}}}}