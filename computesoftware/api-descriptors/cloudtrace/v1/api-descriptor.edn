#:compute.gcp.descriptor{:name "cloudtrace", :title "Cloud Trace API", :api-version "v1", :revision "20200405", :endpoint #:compute.gcp.descriptor{:url "https://cloudtrace.googleapis.com/", :batch-path "batch", :service-path ""}, :parameters {"callback" {"location" "query", "description" "JSONP", "type" "string"}, "uploadType" {"description" "Legacy upload protocol for media (e.g. \"media\", \"multipart\").", "type" "string", "location" "query"}, "key" {"description" "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.", "type" "string", "location" "query"}, "access_token" {"location" "query", "description" "OAuth access token.", "type" "string"}, "oauth_token" {"description" "OAuth 2.0 token for the current user.", "type" "string", "location" "query"}, "prettyPrint" {"location" "query", "description" "Returns response with indentations and line breaks.", "type" "boolean", "default" "true"}, "alt" {"type" "string", "enumDescriptions" ["Responses with Content-Type of application/json" "Media download with context-dependent Content-Type" "Responses with Content-Type of application/x-protobuf"], "location" "query", "description" "Data format for response.", "default" "json", "enum" ["json" "media" "proto"]}, "$.xgafv" {"enumDescriptions" ["v1 error format" "v2 error format"], "location" "query", "enum" ["1" "2"], "description" "V1 error format.", "type" "string"}, "fields" {"type" "string", "location" "query", "description" "Selector specifying which fields to include in a partial response."}, "upload_protocol" {"location" "query", "description" "Upload protocol for media (e.g. \"raw\", \"multipart\").", "type" "string"}, "quotaUser" {"location" "query", "description" "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.", "type" "string"}}, :op->info {"cloudtrace.projects.patchTraces" #:compute.gcp.descriptor{:http-method :patch, :path "v1/projects/{projectId}/traces", :request {"$ref" "Traces"}, :response {"$ref" "Empty"}, :parameters {"projectId" {"description" "Required. ID of the Cloud project where the trace data is stored.", "required" true, "type" "string", "location" "path"}}, :description "Sends new traces to Stackdriver Trace or updates existing traces. If the ID\nof a trace that you send matches that of an existing trace, any fields\nin the existing trace and its spans are overwritten by the provided values,\nand any new fields provided are merged with the existing trace data. If the\nID does not match, a new trace is created.\nIn this case, writing traces is not considered an active developer\nmethod since traces are machine generated."}}, :schemas {"Trace" {"description" "A trace describes how long it takes for an application to perform an\noperation. It consists of a set of spans, each of which represent a single\ntimed event within the operation.", "type" "object", "properties" {"projectId" {"description" "Project ID of the Cloud project where the trace data is stored.", "type" "string"}, "spans" {"description" "Collection of spans in the trace.", "type" "array", "items" {"$ref" "TraceSpan"}}, "traceId" {"description" "Globally unique identifier for the trace. This identifier is a 128-bit\nnumeric value formatted as a 32-byte hex string. For example,\n`382d4f4c6b7bb2f4a972559d9085001d`.", "type" "string"}}, "id" "Trace"}, "Traces" {"type" "object", "properties" {"traces" {"description" "List of traces.", "type" "array", "items" {"$ref" "Trace"}}}, "id" "Traces", "description" "List of new or updated traces."}, "TraceSpan" {"description" "A span represents a single timed event within a trace. Spans can be nested\nand form a trace tree. Often, a trace contains a root span that describes the\nend-to-end latency of an operation and, optionally, one or more subspans for\nits suboperations. Spans do not need to be contiguous. There may be gaps\nbetween spans in a trace.", "type" "object", "properties" {"labels" {"additionalProperties" {"type" "string"}, "description" "Collection of labels associated with the span. Label keys must be less than\n128 bytes. Label values must be less than 16 kilobytes (10MB for\n`/stacktrace` values).\n\nSome predefined label keys exist, or you may create your own. When creating\nyour own, we recommend the following formats:\n\n* `/category/product/key` for agents of well-known products (e.g.\n  `/db/mongodb/read_size`).\n* `short_host/path/key` for domain-specific keys (e.g.\n  `foo.com/myproduct/bar`)\n\nPredefined labels include:\n\n*   `/agent`\n*   `/component`\n*   `/error/message`\n*   `/error/name`\n*   `/http/client_city`\n*   `/http/client_country`\n*   `/http/client_protocol`\n*   `/http/client_region`\n*   `/http/host`\n*   `/http/method`\n*   `/http/path`\n*   `/http/redirected_url`\n*   `/http/request/size`\n*   `/http/response/size`\n*   `/http/route`\n*   `/http/status_code`\n*   `/http/url`\n*   `/http/user_agent`\n*   `/pid`\n*   `/stacktrace`\n*   `/tid`", "type" "object"}, "name" {"description" "Name of the span. Must be less than 128 bytes. The span name is sanitized\nand displayed in the Stackdriver Trace tool in the\nGoogle Cloud Platform Console.\nThe name may be a method name or some other per-call site name.\nFor the same executable and the same call point, a best practice is\nto use a consistent name, which makes it easier to correlate\ncross-trace spans.", "type" "string"}, "spanId" {"description" "Identifier for the span. Must be a 64-bit integer other than 0 and\nunique within a trace. For example, `2205310701640571284`.", "format" "uint64", "type" "string"}, "parentSpanId" {"description" "Optional. ID of the parent span, if any.", "format" "uint64", "type" "string"}, "endTime" {"description" "End time of the span in nanoseconds from the UNIX epoch.", "format" "google-datetime", "type" "string"}, "startTime" {"description" "Start time of the span in nanoseconds from the UNIX epoch.", "format" "google-datetime", "type" "string"}, "kind" {"description" "Distinguishes between spans generated in a particular context. For example,\ntwo spans with the same name may be distinguished using `RPC_CLIENT`\nand `RPC_SERVER` to identify queueing latency associated with the span.", "type" "string", "enumDescriptions" ["Unspecified." "Indicates that the span covers server-side handling of an RPC or other\nremote network request." "Indicates that the span covers the client-side wrapper around an RPC or\nother remote request."], "enum" ["SPAN_KIND_UNSPECIFIED" "RPC_SERVER" "RPC_CLIENT"]}}, "id" "TraceSpan"}, "ListTracesResponse" {"properties" {"traces" {"description" "List of trace records as specified by the view parameter.", "type" "array", "items" {"$ref" "Trace"}}, "nextPageToken" {"description" "If defined, indicates that there are more traces that match the request\nand that this value should be passed to the next request to continue\nretrieving additional traces.", "type" "string"}}, "id" "ListTracesResponse", "description" "The response message for the `ListTraces` method.", "type" "object"}, "Empty" {"description" "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.", "type" "object", "properties" {}, "id" "Empty"}}}