#:compute.gcp.descriptor{:name "identitytoolkit", :title "Google Identity Toolkit API", :api-version "v3", :revision "20180723", :endpoint #:compute.gcp.descriptor{:url "https://www.googleapis.com/", :batch-path "batch/identitytoolkit/v3", :service-path "identitytoolkit/v3/relyingparty/"}, :parameters {"key" {"location" "query", "type" "string", "description" "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."}, "quotaUser" {"description" "An opaque string that represents a user for quota purposes. Must not exceed 40 characters.", "type" "string", "location" "query"}, "fields" {"type" "string", "description" "Selector specifying which fields to include in a partial response.", "location" "query"}, "oauth_token" {"description" "OAuth 2.0 token for the current user.", "location" "query", "type" "string"}, "userIp" {"type" "string", "description" "Deprecated. Please use quotaUser instead.", "location" "query"}, "alt" {"type" "string", "enumDescriptions" ["Responses with Content-Type of application/json"], "enum" ["json"], "location" "query", "description" "Data format for the response.", "default" "json"}, "prettyPrint" {"description" "Returns response with indentations and line breaks.", "location" "query", "default" "true", "type" "boolean"}}, :op->info {"identitytoolkit.relyingparty.verifyCustomToken" #:compute.gcp.descriptor{:http-method :post, :path "verifyCustomToken", :request {"$ref" "IdentitytoolkitRelyingpartyVerifyCustomTokenRequest"}, :response {"$ref" "VerifyCustomTokenResponse"}, :description "Verifies the developer asserted ID token."}, "identitytoolkit.relyingparty.uploadAccount" #:compute.gcp.descriptor{:http-method :post, :path "uploadAccount", :request {"$ref" "IdentitytoolkitRelyingpartyUploadAccountRequest"}, :response {"$ref" "UploadAccountResponse"}, :description "Batch upload existing user accounts."}, "identitytoolkit.relyingparty.sendVerificationCode" #:compute.gcp.descriptor{:http-method :post, :path "sendVerificationCode", :request {"$ref" "IdentitytoolkitRelyingpartySendVerificationCodeRequest"}, :response {"$ref" "IdentitytoolkitRelyingpartySendVerificationCodeResponse"}, :description "Send SMS verification code."}, "identitytoolkit.relyingparty.deleteAccount" #:compute.gcp.descriptor{:http-method :post, :path "deleteAccount", :request {"$ref" "IdentitytoolkitRelyingpartyDeleteAccountRequest"}, :response {"$ref" "DeleteAccountResponse"}, :description "Delete user account."}, "identitytoolkit.relyingparty.verifyPhoneNumber" #:compute.gcp.descriptor{:http-method :post, :path "verifyPhoneNumber", :request {"$ref" "IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest"}, :response {"$ref" "IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse"}, :description "Verifies ownership of a phone number and creates/updates the user account accordingly."}, "identitytoolkit.relyingparty.getProjectConfig" #:compute.gcp.descriptor{:http-method :get, :path "getProjectConfig", :response {"$ref" "IdentitytoolkitRelyingpartyGetProjectConfigResponse"}, :parameters {"delegatedProjectNumber" {"type" "string", "description" "Delegated GCP project number of the request.", "location" "query"}, "projectNumber" {"location" "query", "type" "string", "description" "GCP project number of the request."}}, :description "Get project configuration."}, "identitytoolkit.relyingparty.verifyAssertion" #:compute.gcp.descriptor{:http-method :post, :path "verifyAssertion", :request {"$ref" "IdentitytoolkitRelyingpartyVerifyAssertionRequest"}, :response {"$ref" "VerifyAssertionResponse"}, :description "Verifies the assertion returned by the IdP."}, "identitytoolkit.relyingparty.resetPassword" #:compute.gcp.descriptor{:http-method :post, :path "resetPassword", :request {"$ref" "IdentitytoolkitRelyingpartyResetPasswordRequest"}, :response {"$ref" "ResetPasswordResponse"}, :description "Reset password for a user."}, "identitytoolkit.relyingparty.signupNewUser" #:compute.gcp.descriptor{:http-method :post, :path "signupNewUser", :request {"$ref" "IdentitytoolkitRelyingpartySignupNewUserRequest"}, :response {"$ref" "SignupNewUserResponse"}, :description "Signup new user."}, "identitytoolkit.relyingparty.verifyPassword" #:compute.gcp.descriptor{:http-method :post, :path "verifyPassword", :request {"$ref" "IdentitytoolkitRelyingpartyVerifyPasswordRequest"}, :response {"$ref" "VerifyPasswordResponse"}, :description "Verifies the user entered password."}, "identitytoolkit.relyingparty.setAccountInfo" #:compute.gcp.descriptor{:http-method :post, :path "setAccountInfo", :request {"$ref" "IdentitytoolkitRelyingpartySetAccountInfoRequest"}, :response {"$ref" "SetAccountInfoResponse"}, :description "Set account info for a user."}, "identitytoolkit.relyingparty.downloadAccount" #:compute.gcp.descriptor{:http-method :post, :path "downloadAccount", :request {"$ref" "IdentitytoolkitRelyingpartyDownloadAccountRequest"}, :response {"$ref" "DownloadAccountResponse"}, :description "Batch download user accounts."}, "identitytoolkit.relyingparty.getAccountInfo" #:compute.gcp.descriptor{:http-method :post, :path "getAccountInfo", :request {"$ref" "IdentitytoolkitRelyingpartyGetAccountInfoRequest"}, :response {"$ref" "GetAccountInfoResponse"}, :description "Returns the account info."}, "identitytoolkit.relyingparty.getRecaptchaParam" #:compute.gcp.descriptor{:http-method :get, :path "getRecaptchaParam", :response {"$ref" "GetRecaptchaParamResponse"}, :description "Get recaptcha secure param."}, "identitytoolkit.relyingparty.signOutUser" #:compute.gcp.descriptor{:http-method :post, :path "signOutUser", :request {"$ref" "IdentitytoolkitRelyingpartySignOutUserRequest"}, :response {"$ref" "IdentitytoolkitRelyingpartySignOutUserResponse"}, :description "Sign out user."}, "identitytoolkit.relyingparty.getPublicKeys" #:compute.gcp.descriptor{:http-method :get, :path "publicKeys", :response {"$ref" "IdentitytoolkitRelyingpartyGetPublicKeysResponse"}, :description "Get token signing public key."}, "identitytoolkit.relyingparty.createAuthUri" #:compute.gcp.descriptor{:http-method :post, :path "createAuthUri", :request {"$ref" "IdentitytoolkitRelyingpartyCreateAuthUriRequest"}, :response {"$ref" "CreateAuthUriResponse"}, :description "Creates the URI used by the IdP to authenticate the user."}, "identitytoolkit.relyingparty.getOobConfirmationCode" #:compute.gcp.descriptor{:http-method :post, :path "getOobConfirmationCode", :request {"$ref" "Relyingparty"}, :response {"$ref" "GetOobConfirmationCodeResponse"}, :description "Get a code for user action confirmation."}, "identitytoolkit.relyingparty.setProjectConfig" #:compute.gcp.descriptor{:http-method :post, :path "setProjectConfig", :request {"$ref" "IdentitytoolkitRelyingpartySetProjectConfigRequest"}, :response {"$ref" "IdentitytoolkitRelyingpartySetProjectConfigResponse"}, :description "Set project configuration."}, "identitytoolkit.relyingparty.emailLinkSignin" #:compute.gcp.descriptor{:http-method :post, :path "emailLinkSignin", :request {"$ref" "IdentitytoolkitRelyingpartyEmailLinkSigninRequest"}, :response {"$ref" "EmailLinkSigninResponse"}, :description "Reset password for a user."}}, :schemas {"IdentitytoolkitRelyingpartyGetPublicKeysResponse" {"description" "Respone of getting public keys.", "additionalProperties" {"type" "string"}, "id" "IdentitytoolkitRelyingpartyGetPublicKeysResponse", "type" "object"}, "IdentitytoolkitRelyingpartySendVerificationCodeResponse" {"type" "object", "description" "Response for Identitytoolkit-SendVerificationCode", "id" "IdentitytoolkitRelyingpartySendVerificationCodeResponse", "properties" {"sessionInfo" {"type" "string", "description" "Encrypted session information"}}}, "IdentitytoolkitRelyingpartyVerifyAssertionRequest" {"properties" {"returnSecureToken" {"description" "Whether return sts id token and refresh token instead of gitkit token.", "type" "boolean"}, "sessionId" {"type" "string", "description" "Session ID, which should match the one in previous createAuthUri request."}, "autoCreate" {"type" "boolean", "description" "When it's true, automatically creates a new account if the user doesn't exist. When it's false, allows existing user to sign in normally and throws exception if the user doesn't exist."}, "postBody" {"description" "The post body if the request is a HTTP POST.", "type" "string"}, "returnIdpCredential" {"description" "Whether return 200 and IDP credential rather than throw exception when federated id is already linked.", "type" "boolean"}, "tenantProjectNumber" {"format" "uint64", "description" "Tenant project number to be used for idp discovery.", "type" "string"}, "pendingIdToken" {"description" "The GITKit token for the non-trusted IDP pending to be confirmed by the user.", "type" "string"}, "tenantId" {"type" "string", "description" "For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from."}, "delegatedProjectNumber" {"description" "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.", "type" "string", "format" "int64"}, "returnRefreshToken" {"description" "Whether to return refresh tokens.", "type" "boolean"}, "instanceId" {"description" "Instance id token of the app.", "type" "string"}, "idToken" {"type" "string", "description" "The GITKit token of the authenticated user."}, "requestUri" {"description" "The URI to which the IDP redirects the user back. It may contain federated login result params added by the IDP.", "type" "string"}}, "id" "IdentitytoolkitRelyingpartyVerifyAssertionRequest", "type" "object", "description" "Request to verify the IDP assertion."}, "IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest" {"properties" {"operation" {"type" "string"}, "sessionInfo" {"type" "string", "description" "The session info previously returned by IdentityToolkit-SendVerificationCode."}, "temporaryProof" {"type" "string"}, "verificationProof" {"type" "string"}, "idToken" {"type" "string"}, "phoneNumber" {"type" "string"}, "code" {"type" "string"}}, "id" "IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest", "description" "Request for Identitytoolkit-VerifyPhoneNumber", "type" "object"}, "IdentitytoolkitRelyingpartyVerifyCustomTokenRequest" {"properties" {"delegatedProjectNumber" {"type" "string", "format" "int64", "description" "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration."}, "token" {"description" "The custom token to verify", "type" "string"}, "returnSecureToken" {"description" "Whether return sts id token and refresh token instead of gitkit token.", "type" "boolean"}, "instanceId" {"type" "string", "description" "Instance id token of the app."}}, "id" "IdentitytoolkitRelyingpartyVerifyCustomTokenRequest", "type" "object", "description" "Request to verify a custom token"}, "IdentitytoolkitRelyingpartyUploadAccountRequest" {"type" "object", "id" "IdentitytoolkitRelyingpartyUploadAccountRequest", "description" "Request to upload user account in batch.", "properties" {"signerKey" {"format" "byte", "description" "The key for to hash the password.", "type" "string"}, "hashAlgorithm" {"description" "The password hash algorithm.", "type" "string"}, "saltSeparator" {"description" "The salt separator.", "format" "byte", "type" "string"}, "allowOverwrite" {"description" "Whether allow overwrite existing account when user local_id exists.", "type" "boolean"}, "users" {"type" "array", "description" "The account info to be stored.", "items" {"$ref" "UserInfo"}}, "sanityCheck" {"description" "If true, backend will do sanity check(including duplicate email and federated id) when uploading account.", "type" "boolean"}, "blockSize" {"type" "integer", "format" "int32"}, "memoryCost" {"type" "integer", "description" "Memory cost for hash calculation. Used by scrypt similar algorithms.", "format" "int32"}, "cpuMemCost" {"type" "integer", "description" "The following 4 fields are for standard scrypt algorithm.", "format" "int32"}, "dkLen" {"type" "integer", "format" "int32"}, "rounds" {"type" "integer", "format" "int32", "description" "Rounds for hash calculation. Used by scrypt and similar algorithms."}, "delegatedProjectNumber" {"format" "int64", "description" "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.", "type" "string"}, "parallelization" {"format" "int32", "type" "integer"}, "targetProjectId" {"description" "Specify which project (field value is actually project id) to operate. Only used when provided credential.", "type" "string"}}}, "ResetPasswordResponse" {"id" "ResetPasswordResponse", "properties" {"newEmail" {"type" "string", "description" "If the out-of-band code is for email recovery, the user's new email."}, "requestType" {"type" "string", "description" "The request type."}, "kind" {"description" "The fixed string \"identitytoolkit#ResetPasswordResponse\".", "type" "string", "default" "identitytoolkit#ResetPasswordResponse"}, "email" {"type" "string", "description" "The user's email. If the out-of-band code is for email recovery, the user's original email."}}, "description" "Response of resetting the password.", "type" "object"}, "IdentitytoolkitRelyingpartyVerifyPasswordRequest" {"properties" {"returnSecureToken" {"type" "boolean", "description" "Whether return sts id token and refresh token instead of gitkit token."}, "captchaResponse" {"description" "Response to the captcha.", "type" "string"}, "email" {"type" "string", "description" "The email of the user."}, "tenantProjectNumber" {"description" "Tenant project number to be used for idp discovery.", "format" "uint64", "type" "string"}, "pendingIdToken" {"type" "string", "description" "The GITKit token for the non-trusted IDP, which is to be confirmed by the user."}, "password" {"description" "The password inputed by the user.", "type" "string"}, "tenantId" {"type" "string", "description" "For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from."}, "delegatedProjectNumber" {"format" "int64", "type" "string", "description" "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration."}, "captchaChallenge" {"type" "string", "description" "The captcha challenge."}, "instanceId" {"type" "string", "description" "Instance id token of the app."}, "idToken" {"description" "The GITKit token of the authenticated user.", "type" "string"}}, "description" "Request to verify the password.", "id" "IdentitytoolkitRelyingpartyVerifyPasswordRequest", "type" "object"}, "DeleteAccountResponse" {"id" "DeleteAccountResponse", "properties" {"kind" {"description" "The fixed string \"identitytoolkit#DeleteAccountResponse\".", "type" "string", "default" "identitytoolkit#DeleteAccountResponse"}}, "type" "object", "description" "Respone of deleting account."}, "EmailLinkSigninResponse" {"description" "Response of email signIn.", "type" "object", "id" "EmailLinkSigninResponse", "properties" {"expiresIn" {"description" "Expiration time of STS id token in seconds.", "format" "int64", "type" "string"}, "idToken" {"description" "The STS id token to login the newly signed in user.", "type" "string"}, "refreshToken" {"description" "The refresh token for the signed in user.", "type" "string"}, "email" {"description" "The user's email.", "type" "string"}, "kind" {"description" "The fixed string \"identitytoolkit#EmailLinkSigninResponse\".", "type" "string", "default" "identitytoolkit#EmailLinkSigninResponse"}, "localId" {"type" "string", "description" "The RP local ID of the user."}, "isNewUser" {"description" "Whether the user is new.", "type" "boolean"}}}, "IdentitytoolkitRelyingpartySendVerificationCodeRequest" {"id" "IdentitytoolkitRelyingpartySendVerificationCodeRequest", "description" "Request for Identitytoolkit-SendVerificationCode", "type" "object", "properties" {"iosReceipt" {"type" "string", "description" "Receipt of successful app token validation with APNS."}, "phoneNumber" {"description" "The phone number to send the verification code to in E.164 format.", "type" "string"}, "iosSecret" {"type" "string", "description" "Secret delivered to iOS app via APNS."}, "recaptchaToken" {"description" "Recaptcha solution.", "type" "string"}}}, "IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse" {"properties" {"verificationProof" {"type" "string"}, "refreshToken" {"type" "string"}, "phoneNumber" {"type" "string"}, "localId" {"type" "string"}, "temporaryProofExpiresIn" {"type" "string", "format" "int64"}, "verificationProofExpiresIn" {"format" "int64", "type" "string"}, "isNewUser" {"type" "boolean"}, "expiresIn" {"type" "string", "format" "int64"}, "idToken" {"type" "string"}, "temporaryProof" {"type" "string"}}, "description" "Response for Identitytoolkit-VerifyPhoneNumber", "type" "object", "id" "IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse"}, "IdentitytoolkitRelyingpartySetProjectConfigRequest" {"type" "object", "description" "Request to set the project configuration.", "id" "IdentitytoolkitRelyingpartySetProjectConfigRequest", "properties" {"resetPasswordTemplate" {"$ref" "EmailTemplate", "description" "Reset password email template."}, "verifyEmailTemplate" {"$ref" "EmailTemplate", "description" "Verify email template."}, "enableAnonymousUser" {"description" "Whether to enable anonymous user.", "type" "boolean"}, "useEmailSending" {"description" "Whether to use email sending provided by Firebear.", "type" "boolean"}, "legacyResetPasswordTemplate" {"$ref" "EmailTemplate", "description" "Legacy reset password email template."}, "allowPasswordUser" {"type" "boolean", "description" "Whether to allow password user sign in or sign up."}, "apiKey" {"description" "Browser API key, needed when making http request to Apiary.", "type" "string"}, "idpConfig" {"type" "array", "items" {"$ref" "IdpConfig"}, "description" "Oauth2 provider configuration."}, "changeEmailTemplate" {"description" "Change email template.", "$ref" "EmailTemplate"}, "delegatedProjectNumber" {"type" "string", "format" "int64", "description" "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration."}, "authorizedDomains" {"items" {"type" "string"}, "type" "array", "description" "Authorized domains for widget redirect."}}}, "VerifyPasswordResponse" {"description" "Request of verifying the password.", "id" "VerifyPasswordResponse", "type" "object", "properties" {"oauthExpireIn" {"type" "integer", "format" "int32", "description" "The lifetime in seconds of the OAuth2 access token."}, "displayName" {"type" "string", "description" "The name of the user."}, "oauthAccessToken" {"description" "The OAuth2 access token.", "type" "string"}, "email" {"description" "The email returned by the IdP. NOTE: The federated login user may not own the email.", "type" "string"}, "refreshToken" {"type" "string", "description" "If idToken is STS id token, then this field will be refresh token."}, "oauthAuthorizationCode" {"description" "The OAuth2 authorization code.", "type" "string"}, "kind" {"description" "The fixed string \"identitytoolkit#VerifyPasswordResponse\".", "type" "string", "default" "identitytoolkit#VerifyPasswordResponse"}, "localId" {"description" "The RP local ID if it's already been mapped to the IdP account identified by the federated ID.", "type" "string"}, "photoUrl" {"description" "The URI of the user's photo at IdP", "type" "string"}, "registered" {"type" "boolean", "description" "Whether the email is registered."}, "expiresIn" {"format" "int64", "description" "If idToken is STS id token, then this field will be expiration time of STS id token in seconds.", "type" "string"}, "idToken" {"description" "The GITKit token for authenticated user.", "type" "string"}}}, "CreateAuthUriResponse" {"description" "Response of creating the IDP authentication URL.", "properties" {"providerId" {"type" "string", "description" "The provider ID of the auth URI."}, "allProviders" {"items" {"type" "string"}, "description" "all providers the user has once used to do federated login", "type" "array"}, "sessionId" {"type" "string", "description" "Session ID which should be passed in the following verifyAssertion request."}, "forExistingProvider" {"type" "boolean", "description" "True if the authUri is for user's existing provider."}, "kind" {"default" "identitytoolkit#CreateAuthUriResponse", "type" "string", "description" "The fixed string identitytoolkit#CreateAuthUriResponse\"."}, "signinMethods" {"type" "array", "items" {"type" "string"}, "description" "All sign-in methods this user has used."}, "captchaRequired" {"description" "True if captcha is required.", "type" "boolean"}, "registered" {"description" "Whether the user is registered if the identifier is an email.", "type" "boolean"}, "authUri" {"description" "The URI used by the IDP to authenticate the user.", "type" "string"}}, "type" "object", "id" "CreateAuthUriResponse"}, "IdentitytoolkitRelyingpartyDeleteAccountRequest" {"type" "object", "description" "Request to delete account.", "id" "IdentitytoolkitRelyingpartyDeleteAccountRequest", "properties" {"delegatedProjectNumber" {"format" "int64", "description" "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.", "type" "string"}, "localId" {"type" "string", "description" "The local ID of the user."}, "idToken" {"type" "string", "description" "The GITKit token or STS id token of the authenticated user."}}}, "IdentitytoolkitRelyingpartyEmailLinkSigninRequest" {"type" "object", "id" "IdentitytoolkitRelyingpartyEmailLinkSigninRequest", "properties" {"oobCode" {"description" "The confirmation code.", "type" "string"}, "email" {"description" "The email address of the user.", "type" "string"}, "idToken" {"type" "string", "description" "Token for linking flow."}}, "description" "Request to sign in with email."}, "EmailTemplate" {"type" "object", "properties" {"from" {"description" "From address of the email.", "type" "string"}, "subject" {"type" "string", "description" "Subject of the email."}, "fromDisplayName" {"description" "From display name.", "type" "string"}, "body" {"description" "Email body.", "type" "string"}, "format" {"description" "Email body format.", "type" "string"}, "replyTo" {"type" "string", "description" "Reply-to address."}}, "description" "Template for an email template.", "id" "EmailTemplate"}, "IdentitytoolkitRelyingpartySetAccountInfoRequest" {"description" "Request to set the account information.", "id" "IdentitytoolkitRelyingpartySetAccountInfoRequest", "type" "object", "properties" {"lastLoginAt" {"format" "int64", "description" "Last login timestamp.", "type" "string"}, "oobCode" {"type" "string", "description" "The out-of-band code of the change email request."}, "returnSecureToken" {"description" "Whether return sts id token and refresh token instead of gitkit token.", "type" "boolean"}, "captchaResponse" {"type" "string", "description" "Response to the captcha."}, "createdAt" {"type" "string", "description" "The timestamp when the account is created.", "format" "int64"}, "customAttributes" {"type" "string", "description" "The custom attributes to be set in the user's id token."}, "upgradeToFederatedLogin" {"description" "Mark the user to upgrade to federated login.", "type" "boolean"}, "displayName" {"type" "string", "description" "The name of the user."}, "disableUser" {"description" "Whether to disable the user.", "type" "boolean"}, "deleteProvider" {"items" {"type" "string"}, "type" "array", "description" "The IDPs the user request to delete."}, "email" {"type" "string", "description" "The email of the user."}, "emailVerified" {"type" "boolean", "description" "Mark the email as verified or not."}, "provider" {"type" "array", "items" {"type" "string"}, "description" "The associated IDPs of the user."}, "deleteAttribute" {"description" "The attributes users request to delete.", "items" {"type" "string"}, "type" "array"}, "phoneNumber" {"type" "string", "description" "Privileged caller can update user with specified phone number."}, "localId" {"type" "string", "description" "The local ID of the user."}, "password" {"type" "string", "description" "The new password of the user."}, "photoUrl" {"type" "string", "description" "The photo url of the user."}, "validSince" {"format" "int64", "description" "Timestamp in seconds for valid login token.", "type" "string"}, "delegatedProjectNumber" {"format" "int64", "type" "string", "description" "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration."}, "captchaChallenge" {"description" "The captcha challenge.", "type" "string"}, "instanceId" {"type" "string", "description" "Instance id token of the app."}, "idToken" {"description" "The GITKit token of the authenticated user.", "type" "string"}}}, "IdentitytoolkitRelyingpartyGetProjectConfigResponse" {"description" "Response of getting the project configuration.", "properties" {"resetPasswordTemplate" {"$ref" "EmailTemplate", "description" "Reset password email template."}, "verifyEmailTemplate" {"description" "Verify email template.", "$ref" "EmailTemplate"}, "enableAnonymousUser" {"description" "Whether anonymous user is enabled.", "type" "boolean"}, "useEmailSending" {"type" "boolean", "description" "Whether to use email sending provided by Firebear."}, "legacyResetPasswordTemplate" {"description" "Legacy reset password email template.", "$ref" "EmailTemplate"}, "allowPasswordUser" {"description" "Whether to allow password user sign in or sign up.", "type" "boolean"}, "dynamicLinksDomain" {"type" "string"}, "apiKey" {"description" "Browser API key, needed when making http request to Apiary.", "type" "string"}, "idpConfig" {"type" "array", "items" {"$ref" "IdpConfig"}, "description" "OAuth2 provider configuration."}, "changeEmailTemplate" {"description" "Change email template.", "$ref" "EmailTemplate"}, "projectId" {"type" "string", "description" "Project ID of the relying party."}, "authorizedDomains" {"items" {"type" "string"}, "description" "Authorized domains.", "type" "array"}}, "type" "object", "id" "IdentitytoolkitRelyingpartyGetProjectConfigResponse"}, "VerifyAssertionResponse" {"id" "VerifyAssertionResponse", "properties" {"oauthExpireIn" {"description" "The lifetime in seconds of the OAuth2 access token.", "type" "integer", "format" "int32"}, "oauthRequestToken" {"description" "The user approved request token for the OpenID OAuth extension.", "type" "string"}, "errorMessage" {"description" "Client error code.", "type" "string"}, "providerId" {"type" "string", "description" "The IdP ID. For white listed IdPs it's a short domain name e.g. google.com, aol.com, live.net and yahoo.com. If the \"providerId\" param is set to OpenID OP identifer other than the whilte listed IdPs the OP identifier is returned. If the \"identifier\" param is federated ID in the createAuthUri request. The domain part of the federated ID is returned."}, "displayName" {"type" "string", "description" "The display name of the user."}, "oauthAccessToken" {"description" "The OAuth2 access token.", "type" "string"}, "timeZone" {"description" "The timezone of the user.", "type" "string"}, "lastName" {"type" "string", "description" "The last name of the user."}, "needEmail" {"type" "boolean", "description" "Whether need client to supply email to complete the federated login flow."}, "dateOfBirth" {"description" "The birth date of the IdP account.", "type" "string"}, "email" {"description" "The email returned by the IdP. NOTE: The federated login user may not own the email.", "type" "string"}, "refreshToken" {"description" "If idToken is STS id token, then this field will be refresh token.", "type" "string"}, "emailVerified" {"type" "boolean", "description" "The value is true if the IDP is also the email provider. It means the user owns the email."}, "inputEmail" {"description" "It's the identifier param in the createAuthUri request if the identifier is an email. It can be used to check whether the user input email is different from the asserted email.", "type" "string"}, "fullName" {"type" "string", "description" "The full name of the user."}, "needConfirmation" {"description" "Whether the assertion is from a non-trusted IDP and need account linking confirmation.", "type" "boolean"}, "context" {"type" "string", "description" "The opaque value used by the client to maintain context info between the authentication request and the IDP callback."}, "emailRecycled" {"description" "It's true if the email is recycled.", "type" "boolean"}, "firstName" {"type" "string", "description" "The first name of the user."}, "action" {"type" "string", "description" "The action code."}, "rawUserInfo" {"type" "string", "description" "Raw IDP-returned user info."}, "screenName" {"description" "The screen_name of a Twitter user or the login name at Github.", "type" "string"}, "oauthIdToken" {"description" "The OIDC id token.", "type" "string"}, "oauthAuthorizationCode" {"type" "string", "description" "The OAuth2 authorization code."}, "kind" {"default" "identitytoolkit#VerifyAssertionResponse", "description" "The fixed string \"identitytoolkit#VerifyAssertionResponse\".", "type" "string"}, "localId" {"description" "The RP local ID if it's already been mapped to the IdP account identified by the federated ID.", "type" "string"}, "federatedId" {"description" "The unique ID identifies the IdP account.", "type" "string"}, "oauthTokenSecret" {"description" "The OAuth1 access token secret.", "type" "string"}, "verifiedProvider" {"type" "array", "description" "When action is 'map', contains the idps which can be used for confirmation.", "items" {"type" "string"}}, "photoUrl" {"description" "The URI of the public accessible profiel picture.", "type" "string"}, "oauthScope" {"description" "The scope for the OpenID OAuth extension.", "type" "string"}, "appScheme" {"description" "The custom scheme used by mobile app.", "type" "string"}, "appInstallationUrl" {"type" "string", "description" "URL for OTA app installation."}, "nickName" {"description" "The nick name of the user.", "type" "string"}, "isNewUser" {"type" "boolean", "description" "True if it's a new user sign-in, false if it's a returning user."}, "language" {"type" "string", "description" "The language preference of the user."}, "expiresIn" {"description" "If idToken is STS id token, then this field will be expiration time of STS id token in seconds.", "type" "string", "format" "int64"}, "idToken" {"description" "The ID token.", "type" "string"}, "originalEmail" {"type" "string", "description" "The original email stored in the mapping storage. It's returned when the federated ID is associated to a different email."}}, "type" "object", "description" "Response of verifying the IDP assertion."}, "GetRecaptchaParamResponse" {"id" "GetRecaptchaParamResponse", "properties" {"recaptchaSiteKey" {"description" "Site key registered at recaptcha.", "type" "string"}, "recaptchaStoken" {"description" "The stoken field for the recaptcha widget, used to request captcha challenge.", "type" "string"}, "kind" {"type" "string", "description" "The fixed string \"identitytoolkit#GetRecaptchaParamResponse\".", "default" "identitytoolkit#GetRecaptchaParamResponse"}}, "type" "object", "description" "Response of getting recaptcha param."}, "SetAccountInfoResponse" {"type" "object", "id" "SetAccountInfoResponse", "description" "Respone of setting the account information.", "properties" {"newEmail" {"type" "string", "description" "The new email the user attempts to change to."}, "passwordHash" {"description" "The user's hashed password.", "type" "string", "format" "byte"}, "displayName" {"type" "string", "description" "The name of the user."}, "email" {"type" "string", "description" "The email of the user."}, "refreshToken" {"type" "string", "description" "If idToken is STS id token, then this field will be refresh token."}, "emailVerified" {"type" "boolean", "description" "If email has been verified."}, "providerUserInfo" {"description" "The user's profiles at the associated IdPs.", "items" {"type" "object", "properties" {"displayName" {"description" "The user's display name at the IDP.", "type" "string"}, "providerId" {"type" "string", "description" "The IdP ID. For whitelisted IdPs it's a short domain name, e.g., google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier."}, "federatedId" {"type" "string", "description" "User's identifier at IDP."}, "photoUrl" {"description" "The user's photo url at the IDP.", "type" "string"}}}, "type" "array"}, "kind" {"default" "identitytoolkit#SetAccountInfoResponse", "description" "The fixed string \"identitytoolkit#SetAccountInfoResponse\".", "type" "string"}, "localId" {"type" "string", "description" "The local ID of the user."}, "photoUrl" {"type" "string", "description" "The photo url of the user."}, "expiresIn" {"type" "string", "description" "If idToken is STS id token, then this field will be expiration time of STS id token in seconds.", "format" "int64"}, "idToken" {"type" "string", "description" "The Gitkit id token to login the newly sign up user."}}}, "UploadAccountResponse" {"description" "Respone of uploading accounts in batch.", "id" "UploadAccountResponse", "type" "object", "properties" {"kind" {"default" "identitytoolkit#UploadAccountResponse", "description" "The fixed string \"identitytoolkit#UploadAccountResponse\".", "type" "string"}, "error" {"description" "The error encountered while processing the account info.", "items" {"type" "object", "properties" {"index" {"type" "integer", "description" "The index of the malformed account, starting from 0.", "format" "int32"}, "message" {"type" "string", "description" "Detailed error message for the account info."}}}, "type" "array"}}}, "IdentitytoolkitRelyingpartySetProjectConfigResponse" {"description" "Response of setting the project configuration.", "properties" {"projectId" {"type" "string", "description" "Project ID of the relying party."}}, "type" "object", "id" "IdentitytoolkitRelyingpartySetProjectConfigResponse"}, "IdentitytoolkitRelyingpartySignOutUserResponse" {"properties" {"localId" {"type" "string", "description" "The local ID of the user."}}, "id" "IdentitytoolkitRelyingpartySignOutUserResponse", "description" "Response of signing out user.", "type" "object"}, "GetAccountInfoResponse" {"properties" {"kind" {"description" "The fixed string \"identitytoolkit#GetAccountInfoResponse\".", "default" "identitytoolkit#GetAccountInfoResponse", "type" "string"}, "users" {"items" {"$ref" "UserInfo"}, "description" "The info of the users.", "type" "array"}}, "id" "GetAccountInfoResponse", "description" "Response of getting account information.", "type" "object"}, "VerifyCustomTokenResponse" {"properties" {"kind" {"description" "The fixed string \"identitytoolkit#VerifyCustomTokenResponse\".", "type" "string", "default" "identitytoolkit#VerifyCustomTokenResponse"}, "idToken" {"description" "The GITKit token for authenticated user.", "type" "string"}, "isNewUser" {"description" "True if it's a new user sign-in, false if it's a returning user.", "type" "boolean"}, "refreshToken" {"description" "If idToken is STS id token, then this field will be refresh token.", "type" "string"}, "expiresIn" {"description" "If idToken is STS id token, then this field will be expiration time of STS id token in seconds.", "format" "int64", "type" "string"}}, "id" "VerifyCustomTokenResponse", "description" "Response from verifying a custom token", "type" "object"}, "IdentitytoolkitRelyingpartySignOutUserRequest" {"description" "Request to sign out user.", "properties" {"localId" {"description" "The local ID of the user.", "type" "string"}, "instanceId" {"description" "Instance id token of the app.", "type" "string"}}, "type" "object", "id" "IdentitytoolkitRelyingpartySignOutUserRequest"}, "IdentitytoolkitRelyingpartySignupNewUserRequest" {"id" "IdentitytoolkitRelyingpartySignupNewUserRequest", "type" "object", "properties" {"captchaResponse" {"description" "Response to the captcha.", "type" "string"}, "displayName" {"description" "The name of the user.", "type" "string"}, "email" {"type" "string", "description" "The email of the user."}, "emailVerified" {"type" "boolean", "description" "Mark the email as verified or not. Only can be used by service account."}, "phoneNumber" {"type" "string", "description" "Privileged caller can create user with specified phone number."}, "localId" {"description" "Privileged caller can create user with specified user id.", "type" "string"}, "tenantProjectNumber" {"type" "string", "description" "Tenant project number to be used for idp discovery.", "format" "uint64"}, "password" {"description" "The new password of the user.", "type" "string"}, "photoUrl" {"type" "string", "description" "The photo url of the user."}, "tenantId" {"description" "For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.", "type" "string"}, "disabled" {"description" "Whether to disable the user. Only can be used by service account.", "type" "boolean"}, "captchaChallenge" {"description" "The captcha challenge.", "type" "string"}, "instanceId" {"type" "string", "description" "Instance id token of the app."}, "idToken" {"description" "The GITKit token of the authenticated user.", "type" "string"}}, "description" "Request to signup new user, create anonymous user or anonymous user reauth."}, "IdpConfig" {"properties" {"experimentPercent" {"type" "integer", "format" "int32", "description" "Percent of users who will be prompted/redirected federated login for this IDP."}, "enabled" {"description" "Whether this IDP is enabled.", "type" "boolean"}, "clientId" {"type" "string", "description" "OAuth2 client ID."}, "secret" {"type" "string", "description" "OAuth2 client secret."}, "provider" {"description" "OAuth2 provider.", "type" "string"}, "whitelistedAudiences" {"description" "Whitelisted client IDs for audience check.", "type" "array", "items" {"type" "string"}}}, "description" "Template for a single idp configuration.", "type" "object", "id" "IdpConfig"}, "SignupNewUserResponse" {"type" "object", "description" "Response of signing up new user, creating anonymous user or anonymous user reauth.", "id" "SignupNewUserResponse", "properties" {"refreshToken" {"type" "string", "description" "If idToken is STS id token, then this field will be refresh token."}, "kind" {"description" "The fixed string \"identitytoolkit#SignupNewUserResponse\".", "default" "identitytoolkit#SignupNewUserResponse", "type" "string"}, "idToken" {"type" "string", "description" "The Gitkit id token to login the newly sign up user."}, "email" {"description" "The email of the user.", "type" "string"}, "localId" {"description" "The RP local ID of the user.", "type" "string"}, "displayName" {"description" "The name of the user.", "type" "string"}, "expiresIn" {"type" "string", "description" "If idToken is STS id token, then this field will be expiration time of STS id token in seconds.", "format" "int64"}}}, "Relyingparty" {"description" "Request of getting a code for user confirmation (reset password, change email etc.)", "properties" {"newEmail" {"description" "The new email if the code is for email change.", "type" "string"}, "iOSBundleId" {"type" "string", "description" "the iOS bundle id of iOS app to handle the action code"}, "androidMinimumVersion" {"description" "minimum version of the app. if the version on the device is lower than this version then the user is taken to the play store to upgrade the app", "type" "string"}, "captchaResp" {"type" "string", "description" "The recaptcha response from the user."}, "email" {"type" "string", "description" "The email of the user."}, "canHandleCodeInApp" {"description" "whether or not the app can handle the oob code without first going to web", "type" "boolean"}, "androidInstallApp" {"type" "boolean", "description" "whether or not to install the android app on the device where the link is opened"}, "challenge" {"type" "string", "description" "The recaptcha challenge presented to the user."}, "kind" {"description" "The fixed string \"identitytoolkit#relyingparty\".", "type" "string", "default" "identitytoolkit#relyingparty"}, "iOSAppStoreId" {"type" "string", "description" "iOS app store id to download the app if it's not already installed"}, "continueUrl" {"type" "string", "description" "The url to continue to the Gitkit app"}, "requestType" {"description" "The request type.", "type" "string"}, "androidPackageName" {"type" "string", "description" "android package name of the android app to handle the action code"}, "idToken" {"description" "The user's Gitkit login token for email change.", "type" "string"}, "userIp" {"type" "string", "description" "The IP address of the user."}}, "type" "object", "id" "Relyingparty"}, "IdentitytoolkitRelyingpartyDownloadAccountRequest" {"properties" {"nextPageToken" {"type" "string", "description" "The token for the next page. This should be taken from the previous response."}, "maxResults" {"description" "The max number of results to return in the response.", "type" "integer", "format" "uint32"}, "delegatedProjectNumber" {"type" "string", "format" "int64", "description" "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration."}, "targetProjectId" {"type" "string", "description" "Specify which project (field value is actually project id) to operate. Only used when provided credential."}}, "description" "Request to download user account in batch.", "id" "IdentitytoolkitRelyingpartyDownloadAccountRequest", "type" "object"}, "GetOobConfirmationCodeResponse" {"properties" {"oobCode" {"type" "string", "description" "The code to be send to the user."}, "email" {"type" "string", "description" "The email address that the email is sent to."}, "kind" {"description" "The fixed string \"identitytoolkit#GetOobConfirmationCodeResponse\".", "default" "identitytoolkit#GetOobConfirmationCodeResponse", "type" "string"}}, "description" "Response of getting a code for user confirmation (reset password, change email etc.).", "id" "GetOobConfirmationCodeResponse", "type" "object"}, "IdentitytoolkitRelyingpartyGetAccountInfoRequest" {"type" "object", "properties" {"phoneNumber" {"items" {"type" "string"}, "description" "Privileged caller can query users by specified phone number.", "type" "array"}, "delegatedProjectNumber" {"type" "string", "description" "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.", "format" "int64"}, "idToken" {"description" "The GITKit token of the authenticated user.", "type" "string"}, "localId" {"type" "array", "description" "The list of local ID's of the users to inquiry.", "items" {"type" "string"}}, "email" {"items" {"type" "string"}, "description" "The list of emails of the users to inquiry.", "type" "array"}}, "id" "IdentitytoolkitRelyingpartyGetAccountInfoRequest", "description" "Request to get the account information."}, "IdentitytoolkitRelyingpartyResetPasswordRequest" {"properties" {"newPassword" {"type" "string", "description" "The new password inputted by the user."}, "oobCode" {"type" "string", "description" "The confirmation code."}, "oldPassword" {"type" "string", "description" "The old password inputted by the user."}, "email" {"type" "string", "description" "The email address of the user."}}, "id" "IdentitytoolkitRelyingpartyResetPasswordRequest", "type" "object", "description" "Request to reset the password."}, "DownloadAccountResponse" {"properties" {"nextPageToken" {"type" "string", "description" "The next page token. To be used in a subsequent request to return the next page of results."}, "kind" {"type" "string", "default" "identitytoolkit#DownloadAccountResponse", "description" "The fixed string \"identitytoolkit#DownloadAccountResponse\"."}, "users" {"items" {"$ref" "UserInfo"}, "description" "The user accounts data.", "type" "array"}}, "description" "Response of downloading accounts in batch.", "id" "DownloadAccountResponse", "type" "object"}, "IdentitytoolkitRelyingpartyCreateAuthUriRequest" {"properties" {"providerId" {"description" "The IdP ID. For white listed IdPs it's a short domain name e.g. google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier.", "type" "string"}, "customParameter" {"type" "object", "additionalProperties" {"type" "string", "description" "The customized query parameter."}, "description" "The query parameter that client can customize by themselves in auth url. The following parameters are reserved for server so that they cannot be customized by clients: client_id, response_type, scope, redirect_uri, state, oauth_token."}, "otaApp" {"type" "string", "description" "The native app package for OTA installation."}, "sessionId" {"description" "The session_id passed by client.", "type" "string"}, "authFlowType" {"description" "Explicitly specify the auth flow type. Currently only support \"CODE_FLOW\" type. The field is only used for Google provider.", "type" "string"}, "context" {"description" "The opaque value used by the client to maintain context info between the authentication request and the IDP callback.", "type" "string"}, "hostedDomain" {"description" "The hosted domain to restrict sign-in to accounts at that domain for Google Apps hosted accounts.", "type" "string"}, "identifier" {"type" "string", "description" "The email or federated ID of the user."}, "oauthConsumerKey" {"description" "The developer's consumer key for OpenId OAuth Extension", "type" "string"}, "clientId" {"type" "string", "description" "The relying party OAuth client ID."}, "continueUri" {"description" "The URI to which the IDP redirects the user after the federated login flow.", "type" "string"}, "appId" {"type" "string", "description" "The app ID of the mobile app, base64(CERT_SHA1):PACKAGE_NAME for Android, BUNDLE_ID for iOS."}, "tenantProjectNumber" {"description" "Tenant project number to be used for idp discovery.", "type" "string", "format" "uint64"}, "openidRealm" {"type" "string", "description" "Optional realm for OpenID protocol. The sub string \"scheme://domain:port\" of the param \"continueUri\" is used if this is not set."}, "oauthScope" {"type" "string", "description" "Additional oauth scopes, beyond the basid user profile, that the user would be prompted to grant"}, "tenantId" {"description" "For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.", "type" "string"}}, "id" "IdentitytoolkitRelyingpartyCreateAuthUriRequest", "description" "Request to get the IDP authentication URL.", "type" "object"}, "UserInfo" {"type" "object", "description" "Template for an individual account info.", "id" "UserInfo", "properties" {"lastLoginAt" {"format" "int64", "type" "string", "description" "last login timestamp."}, "passwordHash" {"description" "The user's hashed password.", "format" "byte", "type" "string"}, "createdAt" {"description" "User creation timestamp.", "format" "int64", "type" "string"}, "customAttributes" {"description" "The custom attributes to be set in the user's id token.", "type" "string"}, "displayName" {"description" "The name of the user.", "type" "string"}, "email" {"type" "string", "description" "The email of the user."}, "emailVerified" {"description" "Whether the email has been verified.", "type" "boolean"}, "providerUserInfo" {"type" "array", "items" {"properties" {"screenName" {"type" "string", "description" "User's screen name at Twitter or login name at Github."}, "email" {"description" "User's email at IDP.", "type" "string"}, "providerId" {"description" "The IdP ID. For white listed IdPs it's a short domain name, e.g., google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier.", "type" "string"}, "phoneNumber" {"type" "string", "description" "User's phone number."}, "photoUrl" {"description" "The user's photo url at the IDP.", "type" "string"}, "rawId" {"type" "string", "description" "User's raw identifier directly returned from IDP."}, "displayName" {"description" "The user's display name at the IDP.", "type" "string"}, "federatedId" {"type" "string", "description" "User's identifier at IDP."}}, "type" "object"}, "description" "The IDP of the user."}, "rawPassword" {"description" "The user's plain text password.", "type" "string"}, "screenName" {"description" "User's screen name at Twitter or login name at Github.", "type" "string"}, "phoneNumber" {"description" "User's phone number.", "type" "string"}, "salt" {"description" "The user's password salt.", "type" "string", "format" "byte"}, "localId" {"type" "string", "description" "The local ID of the user."}, "passwordUpdatedAt" {"type" "number", "format" "double", "description" "The timestamp when the password was last updated."}, "version" {"format" "int32", "type" "integer", "description" "Version of the user's password."}, "photoUrl" {"type" "string", "description" "The URL of the user profile photo."}, "validSince" {"type" "string", "format" "int64", "description" "Timestamp in seconds for valid login token."}, "customAuth" {"type" "boolean", "description" "Whether the user is authenticated by the developer."}, "disabled" {"description" "Whether the user is disabled.", "type" "boolean"}}}}}