#:compute.gcp.descriptor{:name "blogger", :title "Blogger API", :api-version "v2", :revision "20200204", :endpoint #:compute.gcp.descriptor{:url "https://www.googleapis.com/", :batch-path "batch/blogger/v2", :service-path "blogger/v2/"}, :parameters {"alt" {"type" "string", "description" "Data format for the response.", "default" "json", "enum" ["json"], "enumDescriptions" ["Responses with Content-Type of application/json"], "location" "query"}, "fields" {"type" "string", "description" "Selector specifying which fields to include in a partial response.", "location" "query"}, "key" {"type" "string", "description" "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.", "location" "query"}, "oauth_token" {"type" "string", "description" "OAuth 2.0 token for the current user.", "location" "query"}, "prettyPrint" {"type" "boolean", "description" "Returns response with indentations and line breaks.", "default" "true", "location" "query"}, "quotaUser" {"type" "string", "description" "An opaque string that represents a user for quota purposes. Must not exceed 40 characters.", "location" "query"}, "userIp" {"type" "string", "description" "Deprecated. Please use quotaUser instead.", "location" "query"}}, :op->info {"blogger.blogs.get" #:compute.gcp.descriptor{:http-method :get, :path "blogs/{blogId}", :response {"$ref" "Blog"}, :parameters {"blogId" {"type" "string", "description" "The ID of the blog to get.", "required" true, "location" "path"}}, :description "Gets one blog by id."}, "blogger.comments.get" #:compute.gcp.descriptor{:http-method :get, :path "blogs/{blogId}/posts/{postId}/comments/{commentId}", :response {"$ref" "Comment"}, :parameters {"blogId" {"type" "string", "description" "ID of the blog to containing the comment.", "required" true, "location" "path"}, "commentId" {"type" "string", "description" "The ID of the comment to get.", "required" true, "location" "path"}, "postId" {"type" "string", "description" "ID of the post to fetch posts from.", "required" true, "location" "path"}}, :description "Gets one comment by id."}, "blogger.comments.list" #:compute.gcp.descriptor{:http-method :get, :path "blogs/{blogId}/posts/{postId}/comments", :response {"$ref" "CommentList"}, :parameters {"blogId" {"type" "string", "description" "ID of the blog to fetch comments from.", "required" true, "location" "path"}, "fetchBodies" {"type" "boolean", "description" "Whether the body content of the comments is included.", "location" "query"}, "maxResults" {"type" "integer", "description" "Maximum number of comments to include in the result.", "format" "uint32", "location" "query"}, "pageToken" {"type" "string", "description" "Continuation token if request is paged.", "location" "query"}, "postId" {"type" "string", "description" "ID of the post to fetch posts from.", "required" true, "location" "path"}, "startDate" {"type" "string", "description" "Earliest date of comment to fetch, a date-time with RFC 3339 formatting.", "format" "date-time", "location" "query"}}, :description "Retrieves the comments for a blog, possibly filtered."}, "blogger.pages.get" #:compute.gcp.descriptor{:http-method :get, :path "blogs/{blogId}/pages/{pageId}", :response {"$ref" "Page"}, :parameters {"blogId" {"type" "string", "description" "ID of the blog containing the page.", "required" true, "location" "path"}, "pageId" {"type" "string", "description" "The ID of the page to get.", "required" true, "location" "path"}}, :description "Gets one blog page by id."}, "blogger.pages.list" #:compute.gcp.descriptor{:http-method :get, :path "blogs/{blogId}/pages", :response {"$ref" "PageList"}, :parameters {"blogId" {"type" "string", "description" "ID of the blog to fetch pages from.", "required" true, "location" "path"}, "fetchBodies" {"type" "boolean", "description" "Whether to retrieve the Page bodies.", "location" "query"}}, :description "Retrieves pages for a blog, possibly filtered."}, "blogger.posts.get" #:compute.gcp.descriptor{:http-method :get, :path "blogs/{blogId}/posts/{postId}", :response {"$ref" "Post"}, :parameters {"blogId" {"type" "string", "description" "ID of the blog to fetch the post from.", "required" true, "location" "path"}, "postId" {"type" "string", "description" "The ID of the post", "required" true, "location" "path"}}, :description "Get a post by id."}, "blogger.posts.list" #:compute.gcp.descriptor{:http-method :get, :path "blogs/{blogId}/posts", :response {"$ref" "PostList"}, :parameters {"blogId" {"type" "string", "description" "ID of the blog to fetch posts from.", "required" true, "location" "path"}, "fetchBodies" {"type" "boolean", "description" "Whether the body content of posts is included.", "location" "query"}, "maxResults" {"type" "integer", "description" "Maximum number of posts to fetch.", "format" "uint32", "location" "query"}, "pageToken" {"type" "string", "description" "Continuation token if the request is paged.", "location" "query"}, "startDate" {"type" "string", "description" "Earliest post date to fetch, a date-time with RFC 3339 formatting.", "format" "date-time", "location" "query"}}, :description "Retrieves a list of posts, possibly filtered."}, "blogger.users.get" #:compute.gcp.descriptor{:http-method :get, :path "users/{userId}", :response {"$ref" "User"}, :parameters {"userId" {"type" "string", "description" "The ID of the user to get.", "required" true, "location" "path"}}, :description "Gets one user by id."}}, :schemas {"Post" {"id" "Post", "type" "object", "properties" {"url" {"type" "string", "description" "The URL where this Post is displayed."}, "author" {"type" "object", "description" "The author of this Post.", "properties" {"displayName" {"type" "string", "description" "The display name."}, "id" {"type" "string", "description" "The identifier of the Post creator."}, "image" {"type" "object", "description" "The Post author's avatar.", "properties" {"url" {"type" "string", "description" "The Post author's avatar URL."}}}, "url" {"type" "string", "description" "The URL of the Post creator's Profile page."}}}, "id" {"type" "string", "description" "The identifier of this Post.", "format" "int64"}, "labels" {"type" "array", "description" "The list of labels this Post was tagged with.", "items" {"type" "string"}}, "published" {"type" "string", "description" "RFC 3339 date-time when this Post was published.", "format" "date-time"}, "blog" {"type" "object", "description" "Data about the blog containing this Post.", "properties" {"id" {"type" "string", "description" "The identifier of the Blog that contains this Post.", "format" "int64"}}}, "selfLink" {"type" "string", "description" "The API REST URL to fetch this resource from."}, "content" {"type" "string", "description" "The content of the Post. May contain HTML markup."}, "kind" {"type" "string", "description" "The kind of this entity. Always blogger#post", "default" "blogger#post"}, "title" {"type" "string", "description" "The title of the Post."}, "replies" {"type" "object", "description" "The container of comments on this Post.", "properties" {"selfLink" {"type" "string", "description" "The URL of the comments on this post."}, "totalItems" {"type" "string", "description" "The count of comments on this post.", "format" "int64"}}}, "updated" {"type" "string", "description" "RFC 3339 date-time when this Post was last updated.", "format" "date-time"}}}, "Comment" {"id" "Comment", "type" "object", "properties" {"inReplyTo" {"type" "object", "description" "Data about the comment this is in reply to.", "properties" {"id" {"type" "string", "description" "The identified of the parent of this comment.", "format" "int64"}}}, "author" {"type" "object", "description" "The author of this Comment.", "properties" {"displayName" {"type" "string", "description" "The display name."}, "id" {"type" "string", "description" "The identifier of the Comment creator."}, "image" {"type" "object", "description" "The comment creator's avatar.", "properties" {"url" {"type" "string", "description" "The comment creator's avatar URL."}}}, "url" {"type" "string", "description" "The URL of the Comment creator's Profile page."}}}, "id" {"type" "string", "description" "The identifier for this resource.", "format" "int64"}, "post" {"type" "object", "description" "Data about the post containing this comment.", "properties" {"id" {"type" "string", "description" "The identifier of the post containing this comment.", "format" "int64"}}}, "published" {"type" "string", "description" "RFC 3339 date-time when this comment was published.", "format" "date-time"}, "blog" {"type" "object", "description" "Data about the blog containing this comment.", "properties" {"id" {"type" "string", "description" "The identifier of the blog containing this comment.", "format" "int64"}}}, "selfLink" {"type" "string", "description" "The API REST URL to fetch this resource from."}, "content" {"type" "string", "description" "The actual content of the comment. May include HTML markup."}, "kind" {"type" "string", "description" "The kind of this entry. Always blogger#comment", "default" "blogger#comment"}, "updated" {"type" "string", "description" "RFC 3339 date-time when this comment was last updated.", "format" "date-time"}}}, "User" {"id" "User", "type" "object", "properties" {"created" {"type" "string", "description" "The timestamp of when this profile was created, in seconds since epoch.", "format" "date-time"}, "url" {"type" "string", "description" "The user's profile page."}, "blogs" {"type" "object", "description" "The container of blogs for this user.", "properties" {"selfLink" {"type" "string", "description" "The URL of the Blogs for this user."}}}, "displayName" {"type" "string", "description" "The display name."}, "about" {"type" "string", "description" "Profile summary information."}, "id" {"type" "string", "description" "The identifier for this User."}, "locale" {"type" "object", "description" "This user's locale", "properties" {"country" {"type" "string", "description" "The user's country setting."}, "language" {"type" "string", "description" "The user's language setting."}, "variant" {"type" "string", "description" "The user's language variant setting."}}}, "selfLink" {"type" "string", "description" "The API REST URL to fetch this resource from."}, "kind" {"type" "string", "description" "The kind of this entity. Always blogger#user", "default" "blogger#user"}}}, "CommentList" {"id" "CommentList", "type" "object", "properties" {"items" {"type" "array", "description" "The List of Comments for a Post.", "items" {"$ref" "Comment"}}, "kind" {"type" "string", "description" "The kind of this entry. Always blogger#commentList", "default" "blogger#commentList"}, "nextPageToken" {"type" "string", "description" "Pagination token to fetch the next page, if one exists."}, "prevPageToken" {"type" "string", "description" "Pagination token to fetch the previous page, if one exists."}}}, "Blog" {"id" "Blog", "type" "object", "properties" {"url" {"type" "string", "description" "The URL where this blog is published."}, "pages" {"type" "object", "description" "The container of pages in this blog.", "properties" {"selfLink" {"type" "string", "description" "The URL of the container for pages in this blog."}, "totalItems" {"type" "integer", "description" "The count of pages in this blog.", "format" "int32"}}}, "id" {"type" "string", "description" "The identifier for this resource.", "format" "int64"}, "name" {"type" "string", "description" "The name of this blog. This is displayed as the title."}, "locale" {"type" "object", "description" "The locale this Blog is set to.", "properties" {"country" {"type" "string", "description" "The country this blog's locale is set to."}, "language" {"type" "string", "description" "The language this blog is authored in."}, "variant" {"type" "string", "description" "The language variant this blog is authored in."}}}, "published" {"type" "string", "description" "RFC 3339 date-time when this blog was published.", "format" "date-time"}, "posts" {"type" "object", "description" "The container of posts in this blog.", "properties" {"selfLink" {"type" "string", "description" "The URL of the container for posts in this blog."}, "totalItems" {"type" "integer", "description" "The count of posts in this blog.", "format" "int32"}}}, "selfLink" {"type" "string", "description" "The API REST URL to fetch this resource from."}, "kind" {"type" "string", "description" "The kind of this entry. Always blogger#blog", "default" "blogger#blog"}, "updated" {"type" "string", "description" "RFC 3339 date-time when this blog was last updated.", "format" "date-time"}, "description" {"type" "string", "description" "The description of this blog. This is displayed underneath the title."}}}, "Page" {"id" "Page", "type" "object", "properties" {"url" {"type" "string", "description" "The URL that this Page is displayed at."}, "author" {"type" "object", "description" "The author of this Page.", "properties" {"displayName" {"type" "string", "description" "The display name."}, "id" {"type" "string", "description" "The identifier of the Page creator."}, "image" {"type" "object", "description" "The page author's avatar.", "properties" {"url" {"type" "string", "description" "The page author's avatar URL."}}}, "url" {"type" "string", "description" "The URL of the Page creator's Profile page."}}}, "id" {"type" "string", "description" "The identifier for this resource.", "format" "int64"}, "published" {"type" "string", "description" "RFC 3339 date-time when this Page was published.", "format" "date-time"}, "blog" {"type" "object", "description" "Data about the blog containing this Page.", "properties" {"id" {"type" "string", "description" "The identifier of the blog containing this page.", "format" "int64"}}}, "selfLink" {"type" "string", "description" "The API REST URL to fetch this resource from."}, "content" {"type" "string", "description" "The body content of this Page, in HTML."}, "kind" {"type" "string", "description" "The kind of this entity. Always blogger#page", "default" "blogger#page"}, "title" {"type" "string", "description" "The title of this entity. This is the name displayed in the Admin user interface."}, "updated" {"type" "string", "description" "RFC 3339 date-time when this Page was last updated.", "format" "date-time"}}}, "BlogList" {"id" "BlogList", "type" "object", "properties" {"items" {"type" "array", "description" "The list of Blogs this user has Authorship or Admin rights over.", "items" {"$ref" "Blog"}}, "kind" {"type" "string", "description" "The kind of this entity. Always blogger#blogList", "default" "blogger#blogList"}}}, "PageList" {"id" "PageList", "type" "object", "properties" {"items" {"type" "array", "description" "The list of Pages for a Blog.", "items" {"$ref" "Page"}}, "kind" {"type" "string", "description" "The kind of this entity. Always blogger#pageList", "default" "blogger#pageList"}}}, "PostList" {"id" "PostList", "type" "object", "properties" {"items" {"type" "array", "description" "The list of Posts for this Blog.", "items" {"$ref" "Post"}}, "kind" {"type" "string", "description" "The kind of this entity. Always blogger#postList", "default" "blogger#postList"}, "nextPageToken" {"type" "string", "description" "Pagination token to fetch the next page, if one exists."}, "prevPageToken" {"type" "string", "description" "Pagination token to fetch the previous page, if one exists."}}}}}