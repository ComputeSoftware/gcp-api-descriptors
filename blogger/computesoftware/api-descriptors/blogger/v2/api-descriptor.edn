#:compute.api-descriptor{:endpoint #:compute.gcp.impl.descriptor{:url "https://www.googleapis.com/blogger/v2"}, :op->spec {"blogger.comments.list" {:operationId "blogger.comments.list", :description "Retrieves the comments for a blog, possibly filtered.", :parameters [{:description "ID of the blog to fetch comments from.", :in "path", :name "blogId", :required true, :schema {:type "string"}} {:description "ID of the post to fetch posts from.", :in "path", :name "postId", :required true, :schema {:type "string"}} {:description "Whether the body content of the comments is included.", :in "query", :name "fetchBodies", :schema {:type "boolean"}} {:description "Maximum number of comments to include in the result.", :in "query", :name "maxResults", :schema {:type "integer"}} {:description "Continuation token if request is paged.", :in "query", :name "pageToken", :schema {:type "string"}} {:description "Earliest date of comment to fetch, a date-time with RFC 3339 formatting.", :in "query", :name "startDate", :schema {:type "string"}}], :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/blogs/{blogId}/posts/{postId}/comments"}, "blogger.pages.list" {:operationId "blogger.pages.list", :description "Retrieves pages for a blog, possibly filtered.", :parameters [{:description "ID of the blog to fetch pages from.", :in "path", :name "blogId", :required true, :schema {:type "string"}} {:description "Whether to retrieve the Page bodies.", :in "query", :name "fetchBodies", :schema {:type "boolean"}}], :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/blogs/{blogId}/pages"}, "blogger.users.get" {:operationId "blogger.users.get", :description "Gets one user by id.", :parameters [{:description "The ID of the user to get.", :in "path", :name "userId", :required true, :schema {:type "string"}}], :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/users/{userId}"}, "blogger.posts.list" {:operationId "blogger.posts.list", :description "Retrieves a list of posts, possibly filtered.", :parameters [{:description "ID of the blog to fetch posts from.", :in "path", :name "blogId", :required true, :schema {:type "string"}} {:description "Whether the body content of posts is included.", :in "query", :name "fetchBodies", :schema {:type "boolean"}} {:description "Maximum number of posts to fetch.", :in "query", :name "maxResults", :schema {:type "integer"}} {:description "Continuation token if the request is paged.", :in "query", :name "pageToken", :schema {:type "string"}} {:description "Earliest post date to fetch, a date-time with RFC 3339 formatting.", :in "query", :name "startDate", :schema {:type "string"}}], :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/blogs/{blogId}/posts"}, "blogger.pages.get" {:operationId "blogger.pages.get", :description "Gets one blog page by id.", :parameters [{:description "ID of the blog containing the page.", :in "path", :name "blogId", :required true, :schema {:type "string"}} {:description "The ID of the page to get.", :in "path", :name "pageId", :required true, :schema {:type "string"}}], :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/blogs/{blogId}/pages/{pageId}"}, "blogger.users.blogs.list" {:operationId "blogger.users.blogs.list", :description "Retrieves a list of blogs, possibly filtered.", :parameters [{:description "ID of the user whose blogs are to be fetched. Either the word 'self' (sans quote marks) or the user's profile identifier.", :in "path", :name "userId", :required true, :schema {:type "string"}}], :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/users/{userId}/blogs"}, "blogger.posts.get" {:operationId "blogger.posts.get", :description "Get a post by id.", :parameters [{:description "ID of the blog to fetch the post from.", :in "path", :name "blogId", :required true, :schema {:type "string"}} {:description "The ID of the post", :in "path", :name "postId", :required true, :schema {:type "string"}}], :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/blogs/{blogId}/posts/{postId}"}, "blogger.comments.get" {:operationId "blogger.comments.get", :description "Gets one comment by id.", :parameters [{:description "ID of the blog to containing the comment.", :in "path", :name "blogId", :required true, :schema {:type "string"}} {:description "ID of the post to fetch posts from.", :in "path", :name "postId", :required true, :schema {:type "string"}} {:description "The ID of the comment to get.", :in "path", :name "commentId", :required true, :schema {:type "string"}}], :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/blogs/{blogId}/posts/{postId}/comments/{commentId}"}, "blogger.blogs.get" {:operationId "blogger.blogs.get", :description "Gets one blog by id.", :parameters [{:description "The ID of the blog to get.", :in "path", :name "blogId", :required true, :schema {:type "string"}}], :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/blogs/{blogId}"}}, :resolve {:components {:parameters {:alt {:description "Data format for the response.", :in "query", :name "alt", :schema {:default "json", :enum ["json"], :type "string"}}, :fields {:description "Selector specifying which fields to include in a partial response.", :in "query", :name "fields", :schema {:type "string"}}, :key {:description "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.", :in "query", :name "key", :schema {:type "string"}}, :oauth_token {:description "OAuth 2.0 token for the current user.", :in "query", :name "oauth_token", :schema {:type "string"}}, :prettyPrint {:description "Returns response with indentations and line breaks.", :in "query", :name "prettyPrint", :schema {:default true, :type "boolean"}}, :quotaUser {:description "An opaque string that represents a user for quota purposes. Must not exceed 40 characters.", :in "query", :name "quotaUser", :schema {:type "string"}}, :userIp {:description "Deprecated. Please use quotaUser instead.", :in "query", :name "userIp", :schema {:type "string"}}}, :schemas {:Post {:properties {:labels {:description "The list of labels this Post was tagged with.", :items {:type "string"}, :type "array"}, :content {:description "The content of the Post. May contain HTML markup.", :type "string"}, :updated {:description "RFC 3339 date-time when this Post was last updated.", :format "date-time", :type "string"}, :selfLink {:description "The API REST URL to fetch this resource from.", :type "string"}, :title {:description "The title of the Post.", :type "string"}, :author {:description "The author of this Post.", :properties {:displayName {:description "The display name.", :type "string"}, :id {:description "The identifier of the Post creator.", :type "string"}, :image {:description "The Post author's avatar.", :properties {:url {:description "The Post author's avatar URL.", :type "string"}}, :type "object"}, :url {:description "The URL of the Post creator's Profile page.", :type "string"}}, :type "object"}, :replies {:description "The container of comments on this Post.", :properties {:selfLink {:description "The URL of the comments on this post.", :type "string"}, :totalItems {:description "The count of comments on this post.", :format "int64", :type "string"}}, :type "object"}, :id {:description "The identifier of this Post.", :format "int64", :type "string"}, :kind {:default "blogger#post", :description "The kind of this entity. Always blogger#post", :type "string"}, :url {:description "The URL where this Post is displayed.", :type "string"}, :blog {:description "Data about the blog containing this Post.", :properties {:id {:description "The identifier of the Blog that contains this Post.", :format "int64", :type "string"}}, :type "object"}, :published {:description "RFC 3339 date-time when this Post was published.", :format "date-time", :type "string"}}, :type "object"}, :CommentList {:properties {:items {:description "The List of Comments for a Post.", :items {:$ref "#/components/schemas/Comment"}, :type "array"}, :kind {:default "blogger#commentList", :description "The kind of this entry. Always blogger#commentList", :type "string"}, :nextPageToken {:description "Pagination token to fetch the next page, if one exists.", :type "string"}, :prevPageToken {:description "Pagination token to fetch the previous page, if one exists.", :type "string"}}, :type "object"}, :Comment {:properties {:inReplyTo {:description "Data about the comment this is in reply to.", :properties {:id {:description "The identified of the parent of this comment.", :format "int64", :type "string"}}, :type "object"}, :content {:description "The actual content of the comment. May include HTML markup.", :type "string"}, :updated {:description "RFC 3339 date-time when this comment was last updated.", :format "date-time", :type "string"}, :selfLink {:description "The API REST URL to fetch this resource from.", :type "string"}, :author {:description "The author of this Comment.", :properties {:displayName {:description "The display name.", :type "string"}, :id {:description "The identifier of the Comment creator.", :type "string"}, :image {:description "The comment creator's avatar.", :properties {:url {:description "The comment creator's avatar URL.", :type "string"}}, :type "object"}, :url {:description "The URL of the Comment creator's Profile page.", :type "string"}}, :type "object"}, :id {:description "The identifier for this resource.", :format "int64", :type "string"}, :kind {:default "blogger#comment", :description "The kind of this entry. Always blogger#comment", :type "string"}, :post {:description "Data about the post containing this comment.", :properties {:id {:description "The identifier of the post containing this comment.", :format "int64", :type "string"}}, :type "object"}, :blog {:description "Data about the blog containing this comment.", :properties {:id {:description "The identifier of the blog containing this comment.", :format "int64", :type "string"}}, :type "object"}, :published {:description "RFC 3339 date-time when this comment was published.", :format "date-time", :type "string"}}, :type "object"}, :BlogList {:properties {:items {:description "The list of Blogs this user has Authorship or Admin rights over.", :items {:$ref "#/components/schemas/Blog"}, :type "array"}, :kind {:default "blogger#blogList", :description "The kind of this entity. Always blogger#blogList", :type "string"}}, :type "object"}, :Page {:properties {:content {:description "The body content of this Page, in HTML.", :type "string"}, :updated {:description "RFC 3339 date-time when this Page was last updated.", :format "date-time", :type "string"}, :selfLink {:description "The API REST URL to fetch this resource from.", :type "string"}, :title {:description "The title of this entity. This is the name displayed in the Admin user interface.", :type "string"}, :author {:description "The author of this Page.", :properties {:displayName {:description "The display name.", :type "string"}, :id {:description "The identifier of the Page creator.", :type "string"}, :image {:description "The page author's avatar.", :properties {:url {:description "The page author's avatar URL.", :type "string"}}, :type "object"}, :url {:description "The URL of the Page creator's Profile page.", :type "string"}}, :type "object"}, :id {:description "The identifier for this resource.", :format "int64", :type "string"}, :kind {:default "blogger#page", :description "The kind of this entity. Always blogger#page", :type "string"}, :url {:description "The URL that this Page is displayed at.", :type "string"}, :blog {:description "Data about the blog containing this Page.", :properties {:id {:description "The identifier of the blog containing this page.", :format "int64", :type "string"}}, :type "object"}, :published {:description "RFC 3339 date-time when this Page was published.", :format "date-time", :type "string"}}, :type "object"}, :Blog {:properties {:description {:description "The description of this blog. This is displayed underneath the title.", :type "string"}, :locale {:description "The locale this Blog is set to.", :properties {:country {:description "The country this blog's locale is set to.", :type "string"}, :language {:description "The language this blog is authored in.", :type "string"}, :variant {:description "The language variant this blog is authored in.", :type "string"}}, :type "object"}, :updated {:description "RFC 3339 date-time when this blog was last updated.", :format "date-time", :type "string"}, :name {:description "The name of this blog. This is displayed as the title.", :type "string"}, :selfLink {:description "The API REST URL to fetch this resource from.", :type "string"}, :pages {:description "The container of pages in this blog.", :properties {:selfLink {:description "The URL of the container for pages in this blog.", :type "string"}, :totalItems {:description "The count of pages in this blog.", :format "int32", :type "integer"}}, :type "object"}, :id {:description "The identifier for this resource.", :format "int64", :type "string"}, :kind {:default "blogger#blog", :description "The kind of this entry. Always blogger#blog", :type "string"}, :url {:description "The URL where this blog is published.", :type "string"}, :posts {:description "The container of posts in this blog.", :properties {:selfLink {:description "The URL of the container for posts in this blog.", :type "string"}, :totalItems {:description "The count of posts in this blog.", :format "int32", :type "integer"}}, :type "object"}, :published {:description "RFC 3339 date-time when this blog was published.", :format "date-time", :type "string"}}, :type "object"}, :User {:properties {:locale {:description "This user's locale", :properties {:country {:description "The user's country setting.", :type "string"}, :language {:description "The user's language setting.", :type "string"}, :variant {:description "The user's language variant setting.", :type "string"}}, :type "object"}, :displayName {:description "The display name.", :type "string"}, :selfLink {:description "The API REST URL to fetch this resource from.", :type "string"}, :created {:description "The timestamp of when this profile was created, in seconds since epoch.", :format "date-time", :type "string"}, :blogs {:description "The container of blogs for this user.", :properties {:selfLink {:description "The URL of the Blogs for this user.", :type "string"}}, :type "object"}, :id {:description "The identifier for this User.", :type "string"}, :kind {:default "blogger#user", :description "The kind of this entity. Always blogger#user", :type "string"}, :url {:description "The user's profile page.", :type "string"}, :about {:description "Profile summary information.", :type "string"}}, :type "object"}, :PageList {:properties {:items {:description "The list of Pages for a Blog.", :items {:$ref "#/components/schemas/Page"}, :type "array"}, :kind {:default "blogger#pageList", :description "The kind of this entity. Always blogger#pageList", :type "string"}}, :type "object"}, :PostList {:properties {:items {:description "The list of Posts for this Blog.", :items {:$ref "#/components/schemas/Post"}, :type "array"}, :kind {:default "blogger#postList", :description "The kind of this entity. Always blogger#postList", :type "string"}, :nextPageToken {:description "Pagination token to fetch the next page, if one exists.", :type "string"}, :prevPageToken {:description "Pagination token to fetch the previous page, if one exists.", :type "string"}}, :type "object"}}, :securitySchemes {:Oauth2 {:description "Oauth 2.0 implicit authentication", :flows {:implicit {:authorizationUrl "https://accounts.google.com/o/oauth2/auth", :scopes {"https://www.googleapis.com/auth/blogger" "Manage your Blogger account"}}}, :type "oauth2"}, :Oauth2c {:description "Oauth 2.0 accessCode authentication", :flows {:authorizationCode {:authorizationUrl "https://accounts.google.com/o/oauth2/auth", :scopes {"https://www.googleapis.com/auth/blogger" "Manage your Blogger account"}, :tokenUrl "https://accounts.google.com/o/oauth2/token"}}, :type "oauth2"}}}}}