#:compute.api-descriptor{:endpoint #:compute.gcp.impl.descriptor{:url "https://cloudtrace.googleapis.com/"}, :op->spec {"cloudtrace.projects.traces.list" {:operationId "cloudtrace.projects.traces.list", :description "Returns of a list of traces that match the specified filter conditions.\nIn this case, listing for traces is considered an active developer method,\neven though it is technically a read-only method.", :parameters [{:description "Required. ID of the Cloud project where the trace data is stored.", :in "path", :name "projectId", :required true, :schema {:type "string"}} {:description "End of the time interval (inclusive) during which the trace data was\ncollected from the application.", :in "query", :name "endTime", :schema {:type "string"}} {:description "Optional. A filter against labels for the request.\n\nBy default, searches use prefix matching. To specify exact match, prepend\na plus symbol (`+`) to the search term.\nMultiple terms are ANDed. Syntax:\n\n*   `root:NAME_PREFIX` or `NAME_PREFIX`: Return traces where any root\n    span starts with `NAME_PREFIX`.\n*   `+root:NAME` or `+NAME`: Return traces where any root span's name is\n    exactly `NAME`.\n*   `span:NAME_PREFIX`: Return traces where any span starts with\n    `NAME_PREFIX`.\n*   `+span:NAME`: Return traces where any span's name is exactly\n    `NAME`.\n*   `latency:DURATION`: Return traces whose overall latency is\n    greater or equal to than `DURATION`. Accepted units are nanoseconds\n    (`ns`), milliseconds (`ms`), and seconds (`s`). Default is `ms`. For\n    example, `latency:24ms` returns traces whose overall latency\n    is greater than or equal to 24 milliseconds.\n*   `label:LABEL_KEY`: Return all traces containing the specified\n    label key (exact match, case-sensitive) regardless of the key:value\n    pair's value (including empty values).\n*   `LABEL_KEY:VALUE_PREFIX`: Return all traces containing the specified\n    label key (exact match, case-sensitive) whose value starts with\n    `VALUE_PREFIX`. Both a key and a value must be specified.\n*   `+LABEL_KEY:VALUE`: Return all traces containing a key:value pair\n    exactly matching the specified text. Both a key and a value must be\n    specified.\n*   `method:VALUE`: Equivalent to `/http/method:VALUE`.\n*   `url:VALUE`: Equivalent to `/http/url:VALUE`.", :in "query", :name "filter", :schema {:type "string"}} {:description "Optional. Field used to sort the returned traces.\nCan be one of the following:\n\n*   `trace_id`\n*   `name` (`name` field of root span in the trace)\n*   `duration` (difference between `end_time` and `start_time` fields of\n     the root span)\n*   `start` (`start_time` field of the root span)\n\nDescending order can be specified by appending `desc` to the sort field\n(for example, `name desc`).\n\nOnly one sort field is permitted.", :in "query", :name "orderBy", :schema {:type "string"}} {:description "Optional. Maximum number of traces to return. If not specified or <= 0, the\nimplementation selects a reasonable value.  The implementation may\nreturn fewer traces than the requested page size.", :in "query", :name "pageSize", :schema {:type "integer"}} {:description "Token identifying the page of results to return. If provided, use the\nvalue of the `next_page_token` field from a previous request.", :in "query", :name "pageToken", :schema {:type "string"}} {:description "Start of the time interval (inclusive) during which the trace data was\ncollected from the application.", :in "query", :name "startTime", :schema {:type "string"}} {:description "Optional. Type of data returned for traces in the list. Default is\n`MINIMAL`.", :in "query", :name "view", :schema {:enum ["VIEW_TYPE_UNSPECIFIED" "MINIMAL" "ROOTSPAN" "COMPLETE"], :type "string"}}], :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/v1/projects/{projectId}/traces"}, "cloudtrace.projects.patchTraces" {:operationId "cloudtrace.projects.patchTraces", :description "Sends new traces to Stackdriver Trace or updates existing traces. If the ID\nof a trace that you send matches that of an existing trace, any fields\nin the existing trace and its spans are overwritten by the provided values,\nand any new fields provided are merged with the existing trace data. If the\nID does not match, a new trace is created.\nIn this case, writing traces is not considered an active developer\nmethod since traces are machine generated.", :parameters [{:description "Required. ID of the Cloud project where the trace data is stored.", :in "path", :name "projectId", :required true, :schema {:type "string"}}], :requestBody {:content {"application/json" {:schema {:$ref "#/components/schemas/Traces"}}}}, :compute.gcp.impl.descriptor/http-method :patch, :compute.gcp.impl.descriptor/http-path "/v1/projects/{projectId}/traces"}, "cloudtrace.projects.traces.get" {:operationId "cloudtrace.projects.traces.get", :description "Gets a single trace by its ID.\nIn this case, getting for traces is considered an active developer method,\neven though it is technically a read-only method.", :parameters [{:description "Required. ID of the Cloud project where the trace data is stored.", :in "path", :name "projectId", :required true, :schema {:type "string"}} {:description "Required. ID of the trace to return.", :in "path", :name "traceId", :required true, :schema {:type "string"}}], :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/v1/projects/{projectId}/traces/{traceId}"}}, :resolve {:components {:parameters {:quotaUser {:description "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.", :in "query", :name "quotaUser", :schema {:type "string"}}, :key {:description "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.", :in "query", :name "key", :schema {:type "string"}}, :alt {:description "Data format for response.", :in "query", :name "alt", :schema {:default "json", :enum ["json" "media" "proto"], :type "string"}}, :access_token {:description "OAuth access token.", :in "query", :name "access_token", :schema {:type "string"}}, :fields {:description "Selector specifying which fields to include in a partial response.", :in "query", :name "fields", :schema {:type "string"}}, :upload_protocol {:description "Upload protocol for media (e.g. \"raw\", \"multipart\").", :in "query", :name "upload_protocol", :schema {:type "string"}}, :uploadType {:description "Legacy upload protocol for media (e.g. \"media\", \"multipart\").", :in "query", :name "uploadType", :schema {:type "string"}}, :oauth_token {:description "OAuth 2.0 token for the current user.", :in "query", :name "oauth_token", :schema {:type "string"}}, "_.xgafv" {:description "V1 error format.", :in "query", :name "$.xgafv", :schema {:enum ["1" "2"], :type "string"}}, :prettyPrint {:description "Returns response with indentations and line breaks.", :in "query", :name "prettyPrint", :schema {:default true, :type "boolean"}}, :callback {:description "JSONP", :in "query", :name "callback", :schema {:type "string"}}}, :schemas {:Empty {:description "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.", :properties {}, :type "object"}, :ListTracesResponse {:description "The response message for the `ListTraces` method.", :properties {:nextPageToken {:description "If defined, indicates that there are more traces that match the request\nand that this value should be passed to the next request to continue\nretrieving additional traces.", :type "string"}, :traces {:description "List of trace records as specified by the view parameter.", :items {:$ref "#/components/schemas/Trace"}, :type "array"}}, :type "object"}, :Trace {:description "A trace describes how long it takes for an application to perform an\noperation. It consists of a set of spans, each of which represent a single\ntimed event within the operation.", :properties {:projectId {:description "Project ID of the Cloud project where the trace data is stored.", :type "string"}, :spans {:description "Collection of spans in the trace.", :items {:$ref "#/components/schemas/TraceSpan"}, :type "array"}, :traceId {:description "Globally unique identifier for the trace. This identifier is a 128-bit\nnumeric value formatted as a 32-byte hex string. For example,\n`382d4f4c6b7bb2f4a972559d9085001d`.", :type "string"}}, :type "object"}, :TraceSpan {:description "A span represents a single timed event within a trace. Spans can be nested\nand form a trace tree. Often, a trace contains a root span that describes the\nend-to-end latency of an operation and, optionally, one or more subspans for\nits suboperations. Spans do not need to be contiguous. There may be gaps\nbetween spans in a trace.", :properties {:endTime {:description "End time of the span in nanoseconds from the UNIX epoch.", :format "google-datetime", :type "string"}, :kind {:description "Distinguishes between spans generated in a particular context. For example,\ntwo spans with the same name may be distinguished using `RPC_CLIENT`\nand `RPC_SERVER` to identify queueing latency associated with the span.", :enum ["SPAN_KIND_UNSPECIFIED" "RPC_SERVER" "RPC_CLIENT"], :type "string"}, :labels {:additionalProperties {:type "string"}, :description "Collection of labels associated with the span. Label keys must be less than\n128 bytes. Label values must be less than 16 kilobytes (10MB for\n`/stacktrace` values).\n\nSome predefined label keys exist, or you may create your own. When creating\nyour own, we recommend the following formats:\n\n* `/category/product/key` for agents of well-known products (e.g.\n  `/db/mongodb/read_size`).\n* `short_host/path/key` for domain-specific keys (e.g.\n  `foo.com/myproduct/bar`)\n\nPredefined labels include:\n\n*   `/agent`\n*   `/component`\n*   `/error/message`\n*   `/error/name`\n*   `/http/client_city`\n*   `/http/client_country`\n*   `/http/client_protocol`\n*   `/http/client_region`\n*   `/http/host`\n*   `/http/method`\n*   `/http/path`\n*   `/http/redirected_url`\n*   `/http/request/size`\n*   `/http/response/size`\n*   `/http/route`\n*   `/http/status_code`\n*   `/http/url`\n*   `/http/user_agent`\n*   `/pid`\n*   `/stacktrace`\n*   `/tid`", :type "object"}, :name {:description "Name of the span. Must be less than 128 bytes. The span name is sanitized\nand displayed in the Stackdriver Trace tool in the\nGoogle Cloud Platform Console.\nThe name may be a method name or some other per-call site name.\nFor the same executable and the same call point, a best practice is\nto use a consistent name, which makes it easier to correlate\ncross-trace spans.", :type "string"}, :parentSpanId {:description "Optional. ID of the parent span, if any.", :format "uint64", :type "string"}, :spanId {:description "Identifier for the span. Must be a 64-bit integer other than 0 and\nunique within a trace. For example, `2205310701640571284`.", :format "uint64", :type "string"}, :startTime {:description "Start time of the span in nanoseconds from the UNIX epoch.", :format "google-datetime", :type "string"}}, :type "object"}, :Traces {:description "List of new or updated traces.", :properties {:traces {:description "List of traces.", :items {:$ref "#/components/schemas/Trace"}, :type "array"}}, :type "object"}}, :securitySchemes {:Oauth2 {:description "Oauth 2.0 implicit authentication", :flows {:implicit {:authorizationUrl "https://accounts.google.com/o/oauth2/auth", :scopes {"https://www.googleapis.com/auth/cloud-platform" "View and manage your data across Google Cloud Platform services", "https://www.googleapis.com/auth/trace.append" "Write Trace data for a project or application", "https://www.googleapis.com/auth/trace.readonly" "Read Trace data for a project or application"}}}, :type "oauth2"}, :Oauth2c {:description "Oauth 2.0 accessCode authentication", :flows {:authorizationCode {:authorizationUrl "https://accounts.google.com/o/oauth2/auth", :scopes {"https://www.googleapis.com/auth/cloud-platform" "View and manage your data across Google Cloud Platform services", "https://www.googleapis.com/auth/trace.append" "Write Trace data for a project or application", "https://www.googleapis.com/auth/trace.readonly" "Read Trace data for a project or application"}, :tokenUrl "https://accounts.google.com/o/oauth2/token"}}, :type "oauth2"}}}}}