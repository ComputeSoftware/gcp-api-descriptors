#:compute.api-descriptor{:endpoint {:schemes ["https"], :host "people.googleapis.com", :base-path "/"}, :op->spec {"people.contactGroups.update" {:description "Update the name of an existing contact group owned by the authenticated\nuser.", :responses {"200" {:description "Successful response", :schema {"$ref" "#/definitions/ContactGroup"}}}, :parameters [{:in "body", :name "body", :schema {"$ref" "#/definitions/UpdateContactGroupRequest"}} {:description "The resource name for the contact group, assigned by the server. An ASCII\nstring, in the form of `contactGroups/`<var>contact_group_id</var>.", :in "path", :name "resourceName", :required true, :type "string", :x-reservedExpansion true}], :operationId "people.contactGroups.update", :compute.gcp.impl.descriptor/http-method :put, :compute.gcp.impl.descriptor/http-path "/v1/{resourceName}", :compute.gcp.impl.descriptor/path-parameters [{"$ref" "#/parameters/$.xgafv"} {"$ref" "#/parameters/access_token"} {"$ref" "#/parameters/alt"} {"$ref" "#/parameters/callback"} {"$ref" "#/parameters/fields"} {"$ref" "#/parameters/key"} {"$ref" "#/parameters/oauth_token"} {"$ref" "#/parameters/prettyPrint"} {"$ref" "#/parameters/quotaUser"} {"$ref" "#/parameters/uploadType"} {"$ref" "#/parameters/upload_protocol"}]}, "people.people.connections.list" {:description "Provides a list of the authenticated user's contacts merged with any\nconnected profiles.\n<br>\nThe request throws a 400 error if 'personFields' is not specified.", :responses {"200" {:description "Successful response", :schema {"$ref" "#/definitions/ListConnectionsResponse"}}}, :parameters [{:description "Optional. The number of connections to include in the response. Valid values are\nbetween 1 and 2000, inclusive. Defaults to 100 if not set or set to 0.", :in "query", :name "pageSize", :type "integer"} {:description "The token of the page to be returned.", :in "query", :name "pageToken", :type "string"} {:description "Required. A field mask to restrict which fields on each person are returned. Multiple\nfields can be specified by separating them with commas. Valid values are:\n\n* addresses\n* ageRanges\n* biographies\n* birthdays\n* braggingRights\n* coverPhotos\n* emailAddresses\n* events\n* genders\n* imClients\n* interests\n* locales\n* memberships\n* metadata\n* names\n* nicknames\n* occupations\n* organizations\n* phoneNumbers\n* photos\n* relations\n* relationshipInterests\n* relationshipStatuses\n* residences\n* sipAddresses\n* skills\n* taglines\n* urls\n* userDefined", :in "query", :name "personFields", :type "string"} {:description "Required. Comma-separated list of person fields to be included in the response. Each\npath should start with `person.`: for example, `person.names` or\n`person.photos`.", :in "query", :name "requestMask.includeField", :type "string"} {:description "Whether the response should include a sync token, which can be used to get\nall changes since the last request. For subsequent sync requests use the\n`sync_token` param instead. Initial sync requests that specify\n`request_sync_token` have an additional rate limit.", :in "query", :name "requestSyncToken", :type "boolean"} {:description "Required. The resource name to return connections for. Only `people/me` is valid.", :in "path", :name "resourceName", :required true, :type "string", :x-reservedExpansion true} {:description "The order in which the connections should be sorted. Defaults to\n`LAST_MODIFIED_ASCENDING`.", :enum ["LAST_MODIFIED_ASCENDING" "LAST_MODIFIED_DESCENDING" "FIRST_NAME_ASCENDING" "LAST_NAME_ASCENDING"], :in "query", :name "sortOrder", :type "string"} {:description "A sync token returned by a previous call to `people.connections.list`.\nOnly resources changed since the sync token was created will be returned.\nSync requests that specify `sync_token` have an additional rate limit.", :in "query", :name "syncToken", :type "string"}], :operationId "people.people.connections.list", :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/v1/{resourceName}/connections", :compute.gcp.impl.descriptor/path-parameters [{"$ref" "#/parameters/$.xgafv"} {"$ref" "#/parameters/access_token"} {"$ref" "#/parameters/alt"} {"$ref" "#/parameters/callback"} {"$ref" "#/parameters/fields"} {"$ref" "#/parameters/key"} {"$ref" "#/parameters/oauth_token"} {"$ref" "#/parameters/prettyPrint"} {"$ref" "#/parameters/quotaUser"} {"$ref" "#/parameters/uploadType"} {"$ref" "#/parameters/upload_protocol"}]}, "people.contactGroups.get" {:description "Get a specific contact group owned by the authenticated user by specifying\na contact group resource name.", :responses {"200" {:description "Successful response", :schema {"$ref" "#/definitions/ContactGroup"}}}, :parameters [{:description "Optional. Specifies the maximum number of members to return. Defaults to 0 if not\nset, which will return zero members.", :in "query", :name "maxMembers", :type "integer"} {:description "Required. Comma-separated list of person fields to be included in the response. Each\npath should start with `person.`: for example, `person.names` or\n`person.photos`.", :in "query", :name "requestMask.includeField", :type "string"} {:description "Required. The resource name of the contact group to get.", :in "path", :name "resourceName", :required true, :type "string", :x-reservedExpansion true}], :operationId "people.contactGroups.get", :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/v1/{resourceName}", :compute.gcp.impl.descriptor/path-parameters [{"$ref" "#/parameters/$.xgafv"} {"$ref" "#/parameters/access_token"} {"$ref" "#/parameters/alt"} {"$ref" "#/parameters/callback"} {"$ref" "#/parameters/fields"} {"$ref" "#/parameters/key"} {"$ref" "#/parameters/oauth_token"} {"$ref" "#/parameters/prettyPrint"} {"$ref" "#/parameters/quotaUser"} {"$ref" "#/parameters/uploadType"} {"$ref" "#/parameters/upload_protocol"}]}, "people.contactGroups.list" {:description "List all contact groups owned by the authenticated user. Members of the\ncontact groups are not populated.", :responses {"200" {:description "Successful response", :schema {"$ref" "#/definitions/ListContactGroupsResponse"}}}, :parameters [{:description "Optional. The maximum number of resources to return. Valid values are between 1 and\n1000, inclusive. Defaults to 30 if not set or set to 0.", :in "query", :name "pageSize", :type "integer"} {:description "The next_page_token value returned from a previous call to\n[ListContactGroups](/people/api/rest/v1/contactgroups/list).\nRequests the next page of resources.", :in "query", :name "pageToken", :type "string"} {:description "A sync token, returned by a previous call to `contactgroups.list`.\nOnly resources changed since the sync token was created will be returned.", :in "query", :name "syncToken", :type "string"}], :operationId "people.contactGroups.list", :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/v1/contactGroups", :compute.gcp.impl.descriptor/path-parameters [{"$ref" "#/parameters/$.xgafv"} {"$ref" "#/parameters/access_token"} {"$ref" "#/parameters/alt"} {"$ref" "#/parameters/callback"} {"$ref" "#/parameters/fields"} {"$ref" "#/parameters/key"} {"$ref" "#/parameters/oauth_token"} {"$ref" "#/parameters/prettyPrint"} {"$ref" "#/parameters/quotaUser"} {"$ref" "#/parameters/uploadType"} {"$ref" "#/parameters/upload_protocol"}]}, "people.contactGroups.members.modify" {:description "Modify the members of a contact group owned by the authenticated user.\n<br>\nThe only system contact groups that can have members added are\n`contactGroups/myContacts` and `contactGroups/starred`. Other system\ncontact groups are deprecated and can only have contacts removed.", :responses {"200" {:description "Successful response", :schema {"$ref" "#/definitions/ModifyContactGroupMembersResponse"}}}, :parameters [{:in "body", :name "body", :schema {"$ref" "#/definitions/ModifyContactGroupMembersRequest"}} {:description "Required. The resource name of the contact group to modify.", :in "path", :name "resourceName", :required true, :type "string", :x-reservedExpansion true}], :operationId "people.contactGroups.members.modify", :compute.gcp.impl.descriptor/http-method :post, :compute.gcp.impl.descriptor/http-path "/v1/{resourceName}/members:modify", :compute.gcp.impl.descriptor/path-parameters [{"$ref" "#/parameters/$.xgafv"} {"$ref" "#/parameters/access_token"} {"$ref" "#/parameters/alt"} {"$ref" "#/parameters/callback"} {"$ref" "#/parameters/fields"} {"$ref" "#/parameters/key"} {"$ref" "#/parameters/oauth_token"} {"$ref" "#/parameters/prettyPrint"} {"$ref" "#/parameters/quotaUser"} {"$ref" "#/parameters/uploadType"} {"$ref" "#/parameters/upload_protocol"}]}, "people.people.deleteContactPhoto" {:description "Delete a contact's photo.", :responses {"200" {:description "Successful response", :schema {"$ref" "#/definitions/DeleteContactPhotoResponse"}}}, :parameters [{:description "Optional. A field mask to restrict which fields on the person are returned. Multiple\nfields can be specified by separating them with commas. Defaults to empty\nif not set, which will skip the post mutate get. Valid values are:\n\n* addresses\n* ageRanges\n* biographies\n* birthdays\n* braggingRights\n* coverPhotos\n* emailAddresses\n* events\n* genders\n* imClients\n* interests\n* locales\n* memberships\n* metadata\n* names\n* nicknames\n* occupations\n* organizations\n* phoneNumbers\n* photos\n* relations\n* relationshipInterests\n* relationshipStatuses\n* residences\n* sipAddresses\n* skills\n* taglines\n* urls\n* userDefined", :in "query", :name "personFields", :type "string"} {:description "Required. The resource name of the contact whose photo will be deleted.", :in "path", :name "resourceName", :required true, :type "string", :x-reservedExpansion true}], :operationId "people.people.deleteContactPhoto", :compute.gcp.impl.descriptor/http-method :delete, :compute.gcp.impl.descriptor/http-path "/v1/{resourceName}:deleteContactPhoto", :compute.gcp.impl.descriptor/path-parameters [{"$ref" "#/parameters/$.xgafv"} {"$ref" "#/parameters/access_token"} {"$ref" "#/parameters/alt"} {"$ref" "#/parameters/callback"} {"$ref" "#/parameters/fields"} {"$ref" "#/parameters/key"} {"$ref" "#/parameters/oauth_token"} {"$ref" "#/parameters/prettyPrint"} {"$ref" "#/parameters/quotaUser"} {"$ref" "#/parameters/uploadType"} {"$ref" "#/parameters/upload_protocol"}]}, "people.people.deleteContact" {:description "Delete a contact person. Any non-contact data will not be deleted.", :responses {"200" {:description "Successful response", :schema {"$ref" "#/definitions/Empty"}}}, :parameters [{:description "Required. The resource name of the contact to delete.", :in "path", :name "resourceName", :required true, :type "string", :x-reservedExpansion true}], :operationId "people.people.deleteContact", :compute.gcp.impl.descriptor/http-method :delete, :compute.gcp.impl.descriptor/http-path "/v1/{resourceName}:deleteContact", :compute.gcp.impl.descriptor/path-parameters [{"$ref" "#/parameters/$.xgafv"} {"$ref" "#/parameters/access_token"} {"$ref" "#/parameters/alt"} {"$ref" "#/parameters/callback"} {"$ref" "#/parameters/fields"} {"$ref" "#/parameters/key"} {"$ref" "#/parameters/oauth_token"} {"$ref" "#/parameters/prettyPrint"} {"$ref" "#/parameters/quotaUser"} {"$ref" "#/parameters/uploadType"} {"$ref" "#/parameters/upload_protocol"}]}, "people.people.updateContact" {:description "Update contact data for an existing contact person. Any non-contact data\nwill not be modified.\n\nThe request throws a 400 error if `updatePersonFields` is not specified.\n<br>\nThe request throws a 400 error if `person.metadata.sources` is not\nspecified for the contact to be updated.\n<br>\nThe request throws a 400 error with an error with reason\n`\"failedPrecondition\"` if `person.metadata.sources.etag` is different than\nthe contact's etag, which indicates the contact has changed since its data\nwas read. Clients should get the latest person and re-apply their updates\nto the latest person.", :responses {"200" {:description "Successful response", :schema {"$ref" "#/definitions/Person"}}}, :parameters [{:in "body", :name "body", :schema {"$ref" "#/definitions/Person"}} {:description "The resource name for the person, assigned by the server. An ASCII string\nwith a max length of 27 characters, in the form of\n`people/`<var>person_id</var>.", :in "path", :name "resourceName", :required true, :type "string", :x-reservedExpansion true} {:description "Required. A field mask to restrict which fields on the person are updated. Multiple\nfields can be specified by separating them with commas.\nAll updated fields will be replaced. Valid values are:\n\n* addresses\n* biographies\n* birthdays\n* emailAddresses\n* events\n* genders\n* imClients\n* interests\n* locales\n* memberships\n* names\n* nicknames\n* occupations\n* organizations\n* phoneNumbers\n* relations\n* residences\n* sipAddresses\n* urls\n* userDefined", :in "query", :name "updatePersonFields", :type "string"}], :operationId "people.people.updateContact", :compute.gcp.impl.descriptor/http-method :patch, :compute.gcp.impl.descriptor/http-path "/v1/{resourceName}:updateContact", :compute.gcp.impl.descriptor/path-parameters [{"$ref" "#/parameters/$.xgafv"} {"$ref" "#/parameters/access_token"} {"$ref" "#/parameters/alt"} {"$ref" "#/parameters/callback"} {"$ref" "#/parameters/fields"} {"$ref" "#/parameters/key"} {"$ref" "#/parameters/oauth_token"} {"$ref" "#/parameters/prettyPrint"} {"$ref" "#/parameters/quotaUser"} {"$ref" "#/parameters/uploadType"} {"$ref" "#/parameters/upload_protocol"}]}, "people.people.createContact" {:description "Create a new contact and return the person resource for that contact.", :responses {"200" {:description "Successful response", :schema {"$ref" "#/definitions/Person"}}}, :parameters [{:in "body", :name "body", :schema {"$ref" "#/definitions/Person"}}], :operationId "people.people.createContact", :compute.gcp.impl.descriptor/http-method :post, :compute.gcp.impl.descriptor/http-path "/v1/people:createContact", :compute.gcp.impl.descriptor/path-parameters [{"$ref" "#/parameters/$.xgafv"} {"$ref" "#/parameters/access_token"} {"$ref" "#/parameters/alt"} {"$ref" "#/parameters/callback"} {"$ref" "#/parameters/fields"} {"$ref" "#/parameters/key"} {"$ref" "#/parameters/oauth_token"} {"$ref" "#/parameters/prettyPrint"} {"$ref" "#/parameters/quotaUser"} {"$ref" "#/parameters/uploadType"} {"$ref" "#/parameters/upload_protocol"}]}, "people.people.getBatchGet" {:description "Provides information about a list of specific people by specifying a list\nof requested resource names. Use `people/me` to indicate the authenticated\nuser.\n<br>\nThe request throws a 400 error if 'personFields' is not specified.", :responses {"200" {:description "Successful response", :schema {"$ref" "#/definitions/GetPeopleResponse"}}}, :parameters [{:description "Required. A field mask to restrict which fields on each person are returned. Multiple\nfields can be specified by separating them with commas. Valid values are:\n\n* addresses\n* ageRanges\n* biographies\n* birthdays\n* braggingRights\n* coverPhotos\n* emailAddresses\n* events\n* genders\n* imClients\n* interests\n* locales\n* memberships\n* metadata\n* names\n* nicknames\n* occupations\n* organizations\n* phoneNumbers\n* photos\n* relations\n* relationshipInterests\n* relationshipStatuses\n* residences\n* sipAddresses\n* skills\n* taglines\n* urls\n* userDefined", :in "query", :name "personFields", :type "string"} {:description "Required. Comma-separated list of person fields to be included in the response. Each\npath should start with `person.`: for example, `person.names` or\n`person.photos`.", :in "query", :name "requestMask.includeField", :type "string"} {:collectionFormat "multi", :description "Required. The resource names of the people to provide information about.\n\n- To get information about the authenticated user, specify `people/me`.\n- To get information about a google account, specify\n  `people/`<var>account_id</var>.\n- To get information about a contact, specify the resource name that\n  identifies the contact as returned by\n[`people.connections.list`](/people/api/rest/v1/people.connections/list).\n\nYou can include up to 50 resource names in one request.", :in "query", :items {:type "string"}, :name "resourceNames", :type "array"}], :operationId "people.people.getBatchGet", :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/v1/people:batchGet", :compute.gcp.impl.descriptor/path-parameters [{"$ref" "#/parameters/$.xgafv"} {"$ref" "#/parameters/access_token"} {"$ref" "#/parameters/alt"} {"$ref" "#/parameters/callback"} {"$ref" "#/parameters/fields"} {"$ref" "#/parameters/key"} {"$ref" "#/parameters/oauth_token"} {"$ref" "#/parameters/prettyPrint"} {"$ref" "#/parameters/quotaUser"} {"$ref" "#/parameters/uploadType"} {"$ref" "#/parameters/upload_protocol"}]}, "people.contactGroups.batchGet" {:description "Get a list of contact groups owned by the authenticated user by specifying\na list of contact group resource names.", :responses {"200" {:description "Successful response", :schema {"$ref" "#/definitions/BatchGetContactGroupsResponse"}}}, :parameters [{:description "Optional. Specifies the maximum number of members to return for each group. Defaults\nto 0 if not set, which will return zero members.", :in "query", :name "maxMembers", :type "integer"} {:collectionFormat "multi", :description "Required. The resource names of the contact groups to get.", :in "query", :items {:type "string"}, :name "resourceNames", :type "array"}], :operationId "people.contactGroups.batchGet", :compute.gcp.impl.descriptor/http-method :get, :compute.gcp.impl.descriptor/http-path "/v1/contactGroups:batchGet", :compute.gcp.impl.descriptor/path-parameters [{"$ref" "#/parameters/$.xgafv"} {"$ref" "#/parameters/access_token"} {"$ref" "#/parameters/alt"} {"$ref" "#/parameters/callback"} {"$ref" "#/parameters/fields"} {"$ref" "#/parameters/key"} {"$ref" "#/parameters/oauth_token"} {"$ref" "#/parameters/prettyPrint"} {"$ref" "#/parameters/quotaUser"} {"$ref" "#/parameters/uploadType"} {"$ref" "#/parameters/upload_protocol"}]}, "people.contactGroups.delete" {:description "Delete an existing contact group owned by the authenticated user by\nspecifying a contact group resource name.", :responses {"200" {:description "Successful response", :schema {"$ref" "#/definitions/Empty"}}}, :parameters [{:description "Optional. Set to true to also delete the contacts in the specified group.", :in "query", :name "deleteContacts", :type "boolean"} {:description "Required. The resource name of the contact group to delete.", :in "path", :name "resourceName", :required true, :type "string", :x-reservedExpansion true}], :operationId "people.contactGroups.delete", :compute.gcp.impl.descriptor/http-method :delete, :compute.gcp.impl.descriptor/http-path "/v1/{resourceName}", :compute.gcp.impl.descriptor/path-parameters [{"$ref" "#/parameters/$.xgafv"} {"$ref" "#/parameters/access_token"} {"$ref" "#/parameters/alt"} {"$ref" "#/parameters/callback"} {"$ref" "#/parameters/fields"} {"$ref" "#/parameters/key"} {"$ref" "#/parameters/oauth_token"} {"$ref" "#/parameters/prettyPrint"} {"$ref" "#/parameters/quotaUser"} {"$ref" "#/parameters/uploadType"} {"$ref" "#/parameters/upload_protocol"}]}, "people.contactGroups.create" {:description "Create a new contact group owned by the authenticated user.", :responses {"200" {:description "Successful response", :schema {"$ref" "#/definitions/ContactGroup"}}}, :parameters [{:in "body", :name "body", :schema {"$ref" "#/definitions/CreateContactGroupRequest"}}], :operationId "people.contactGroups.create", :compute.gcp.impl.descriptor/http-method :post, :compute.gcp.impl.descriptor/http-path "/v1/contactGroups", :compute.gcp.impl.descriptor/path-parameters [{"$ref" "#/parameters/$.xgafv"} {"$ref" "#/parameters/access_token"} {"$ref" "#/parameters/alt"} {"$ref" "#/parameters/callback"} {"$ref" "#/parameters/fields"} {"$ref" "#/parameters/key"} {"$ref" "#/parameters/oauth_token"} {"$ref" "#/parameters/prettyPrint"} {"$ref" "#/parameters/quotaUser"} {"$ref" "#/parameters/uploadType"} {"$ref" "#/parameters/upload_protocol"}]}, "people.people.updateContactPhoto" {:description "Update a contact's photo.", :responses {"200" {:description "Successful response", :schema {"$ref" "#/definitions/UpdateContactPhotoResponse"}}}, :parameters [{:in "body", :name "body", :schema {"$ref" "#/definitions/UpdateContactPhotoRequest"}} {:description "Required. Person resource name", :in "path", :name "resourceName", :required true, :type "string", :x-reservedExpansion true}], :operationId "people.people.updateContactPhoto", :compute.gcp.impl.descriptor/http-method :patch, :compute.gcp.impl.descriptor/http-path "/v1/{resourceName}:updateContactPhoto", :compute.gcp.impl.descriptor/path-parameters [{"$ref" "#/parameters/$.xgafv"} {"$ref" "#/parameters/access_token"} {"$ref" "#/parameters/alt"} {"$ref" "#/parameters/callback"} {"$ref" "#/parameters/fields"} {"$ref" "#/parameters/key"} {"$ref" "#/parameters/oauth_token"} {"$ref" "#/parameters/prettyPrint"} {"$ref" "#/parameters/quotaUser"} {"$ref" "#/parameters/uploadType"} {"$ref" "#/parameters/upload_protocol"}]}}, :parameters {:quotaUser {:description "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.", :in "query", :name "quotaUser", :type "string"}, :key {:description "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.", :in "query", :name "key", :type "string"}, :alt {:default "json", :description "Data format for response.", :enum ["json" "media" "proto"], :in "query", :name "alt", :type "string"}, :access_token {:description "OAuth access token.", :in "query", :name "access_token", :type "string"}, :fields {:description "Selector specifying which fields to include in a partial response.", :in "query", :name "fields", :type "string"}, :upload_protocol {:description "Upload protocol for media (e.g. \"raw\", \"multipart\").", :in "query", :name "upload_protocol", :type "string"}, :uploadType {:description "Legacy upload protocol for media (e.g. \"media\", \"multipart\").", :in "query", :name "uploadType", :type "string"}, :oauth_token {:description "OAuth 2.0 token for the current user.", :in "query", :name "oauth_token", :type "string"}, :prettyPrint {:default true, :description "Returns response with indentations and line breaks.", :in "query", :name "prettyPrint", :type "boolean"}, "$.xgafv" {:description "V1 error format.", :enum ["1" "2"], :in "query", :name "$.xgafv", :type "string"}, :callback {:description "JSONP", :in "query", :name "callback", :type "string"}}, :definitions {:Url {:description "A person's associated URLs.", :properties {:formattedType {:description "Output only. The type of the URL translated and formatted in the viewer's\naccount locale or the `Accept-Language` HTTP header locale.", :type "string"}, :metadata {"$ref" "#/definitions/FieldMetadata", :description "Metadata about the URL."}, :type {:description "The type of the URL. The type can be custom or one of these predefined\nvalues:\n\n* `home`\n* `work`\n* `blog`\n* `profile`\n* `homePage`\n* `ftp`\n* `reservations`\n* `appInstallPage`: website for a Google+ application.\n* `other`", :type "string"}, :value {:description "The URL.", :type "string"}}, :type "object"}, :Skill {:description "A skill that the person has.", :properties {:metadata {"$ref" "#/definitions/FieldMetadata", :description "Metadata about the skill."}, :value {:description "The skill; for example, `underwater basket weaving`.", :type "string"}}, :type "object"}, :ListContactGroupsResponse {:description "The response to a list contact groups request.", :properties {:contactGroups {:description "The list of contact groups. Members of the contact groups are not\npopulated.", :items {"$ref" "#/definitions/ContactGroup"}, :type "array"}, :nextPageToken {:description "The token that can be used to retrieve the next page of results.", :type "string"}, :nextSyncToken {:description "The token that can be used to retrieve changes since the last request.", :type "string"}, :totalItems {:description "The total number of items in the list without pagination.", :format "int32", :type "integer"}}, :type "object"}, :UpdateContactGroupRequest {:description "A request to update an existing user contact group. All updated fields will\nbe replaced.", :properties {:contactGroup {"$ref" "#/definitions/ContactGroup", :description "Required. The contact group to update."}}, :type "object"}, :UpdateContactPhotoResponse {:description "The response for updating a contact's photo.", :properties {:person {"$ref" "#/definitions/Person", :description "The updated person, if person_fields is set in the\nUpdateContactPhotoRequest; otherwise this will be unset."}}, :type "object"}, :Tagline {:description "A brief one-line description of the person.", :properties {:metadata {"$ref" "#/definitions/FieldMetadata", :description "Metadata about the tagline."}, :value {:description "The tagline.", :type "string"}}, :type "object"}, :Interest {:description "One of the person's interests.", :properties {:metadata {"$ref" "#/definitions/FieldMetadata", :description "Metadata about the interest."}, :value {:description "The interest; for example, `stargazing`.", :type "string"}}, :type "object"}, :EmailAddress {:description "A person's email address.", :properties {:displayName {:description "The display name of the email.", :type "string"}, :formattedType {:description "Output only. The type of the email address translated and formatted in the\nviewer's account locale or the `Accept-Language` HTTP header locale.", :type "string"}, :metadata {"$ref" "#/definitions/FieldMetadata", :description "Metadata about the email address."}, :type {:description "The type of the email address. The type can be custom or one of these\npredefined values:\n\n* `home`\n* `work`\n* `other`", :type "string"}, :value {:description "The email address.", :type "string"}}, :type "object"}, :Residence {:description "A person's past or current residence.", :properties {:current {:description "True if the residence is the person's current residence;\nfalse if the residence is a past residence.", :type "boolean"}, :metadata {"$ref" "#/definitions/FieldMetadata", :description "Metadata about the residence."}, :value {:description "The address of the residence.", :type "string"}}, :type "object"}, :SipAddress {:description "A person's SIP address. Session Initial Protocol addresses are used for VoIP\ncommunications to make voice or video calls over the internet.", :properties {:formattedType {:description "Output only. The type of the SIP address translated and formatted in the\nviewer's account locale or the `Accept-Language` HTTP header locale.", :type "string"}, :metadata {"$ref" "#/definitions/FieldMetadata", :description "Metadata about the SIP address."}, :type {:description "The type of the SIP address. The type can be custom or or one of these\npredefined values:\n\n* `home`\n* `work`\n* `mobile`\n* `other`", :type "string"}, :value {:description "The SIP address in the\n[RFC 3261 19.1](https://tools.ietf.org/html/rfc3261#section-19.1) SIP URI\nformat.", :type "string"}}, :type "object"}, :DeleteContactPhotoResponse {:description "The response for deleteing a contact's photo.", :properties {:person {"$ref" "#/definitions/Person", :description "The updated person, if person_fields is set in the\nDeleteContactPhotoRequest; otherwise this will be unset."}}, :type "object"}, :Event {:description "An event related to the person.", :properties {:date {"$ref" "#/definitions/Date", :description "The date of the event."}, :formattedType {:description "Output only. The type of the event translated and formatted in the\nviewer's account locale or the `Accept-Language` HTTP header locale.", :type "string"}, :metadata {"$ref" "#/definitions/FieldMetadata", :description "Metadata about the event."}, :type {:description "The type of the event. The type can be custom or one of these predefined\nvalues:\n\n* `anniversary`\n* `other`", :type "string"}}, :type "object"}, :Occupation {:description "A person's occupation.", :properties {:metadata {"$ref" "#/definitions/FieldMetadata", :description "Metadata about the occupation."}, :value {:description "The occupation; for example, `carpenter`.", :type "string"}}, :type "object"}, :ProfileMetadata {:description "The metadata about a profile.", :properties {:objectType {:description "Output only. The profile object type.", :enum ["OBJECT_TYPE_UNSPECIFIED" "PERSON" "PAGE"], :type "string"}, :userTypes {:description "Output only. The user types.", :items {:enum ["USER_TYPE_UNKNOWN" "GOOGLE_USER" "GPLUS_USER" "GOOGLE_APPS_USER"], :type "string"}, :type "array"}}, :type "object"}, :AgeRangeType {:description "A person's age range.", :properties {:ageRange {:description "The age range.", :enum ["AGE_RANGE_UNSPECIFIED" "LESS_THAN_EIGHTEEN" "EIGHTEEN_TO_TWENTY" "TWENTY_ONE_OR_OLDER"], :type "string"}, :metadata {"$ref" "#/definitions/FieldMetadata", :description "Metadata about the age range."}}, :type "object"}, :PersonMetadata {:description "The metadata about a person.", :properties {:deleted {:description "Output only. True if the person resource has been deleted. Populated only for\n[`connections.list`](/people/api/rest/v1/people.connections/list) requests\nthat include a sync token.", :type "boolean"}, :linkedPeopleResourceNames {:description "Output only. Resource names of people linked to this resource.", :items {:type "string"}, :type "array"}, :objectType {:description "Output only. **DEPRECATED** (Please use\n`person.metadata.sources.profileMetadata.objectType` instead)\n\nThe type of the person object.", :enum ["OBJECT_TYPE_UNSPECIFIED" "PERSON" "PAGE"], :type "string"}, :previousResourceNames {:description "Output only. Any former resource names this person has had. Populated only for\n[`connections.list`](/people/api/rest/v1/people.connections/list) requests\nthat include a sync token.\n\nThe resource name may change when adding or removing fields that link a\ncontact and profile such as a verified email, verified phone number, or\nprofile URL.", :items {:type "string"}, :type "array"}, :sources {:description "The sources of data for the person.", :items {"$ref" "#/definitions/Source"}, :type "array"}}, :type "object"}, :Address {:description "A person's physical address. May be a P.O. box or street address. All fields\nare optional.", :properties {:formattedType {:description "Output only. The type of the address translated and formatted in the viewer's\naccount locale or the `Accept-Language` HTTP header locale.", :type "string"}, :poBox {:description "The P.O. box of the address.", :type "string"}, :city {:description "The city of the address.", :type "string"}, :type {:description "The type of the address. The type can be custom or one of these predefined\nvalues:\n\n* `home`\n* `work`\n* `other`", :type "string"}, :streetAddress {:description "The street address.", :type "string"}, :region {:description "The region of the address; for example, the state or province.", :type "string"}, :formattedValue {:description "The unstructured value of the address. If this is not set by the user it\nwill be automatically constructed from structured values.", :type "string"}, :postalCode {:description "The postal code of the address.", :type "string"}, :extendedAddress {:description "The extended address of the address; for example, the apartment number.", :type "string"}, :country {:description "The country of the address.", :type "string"}, :metadata {"$ref" "#/definitions/FieldMetadata", :description "Metadata about the address."}, :countryCode {:description "The [ISO 3166-1 alpha-2](http://www.iso.org/iso/country_codes.htm) country\ncode of the address.", :type "string"}}, :type "object"}, :ModifyContactGroupMembersRequest {:description "A request to modify an existing contact group's members. Contacts can be\nremoved from any group but they can only be added to a user group or\n\"myContacts\" or \"starred\" system groups.", :properties {:resourceNamesToAdd {:description "The resource names of the contact people to add in the form of\n`people/`<var>person_id</var>.", :items {:type "string"}, :type "array"}, :resourceNamesToRemove {:description "The resource names of the contact people to remove in the form of\n`people/`<var>person_id</var>.", :items {:type "string"}, :type "array"}}, :type "object"}, :RelationshipInterest {:description "A person's relationship interest .", :properties {:formattedValue {:description "Output only. The value of the relationship interest translated and formatted\nin the viewer's account locale or the locale specified in the\nAccept-Language HTTP header.", :type "string"}, :metadata {"$ref" "#/definitions/FieldMetadata", :description "Metadata about the relationship interest."}, :value {:description "The kind of relationship the person is looking for. The value can be custom\nor one of these predefined values:\n\n* `friend`\n* `date`\n* `relationship`\n* `networking`", :type "string"}}, :type "object"}, :Empty {:description "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.", :properties {}, :type "object"}, :Membership {:description "A person's membership in a group. Only contact group memberships can be\nmodified.", :properties {:contactGroupMembership {"$ref" "#/definitions/ContactGroupMembership", :description "The contact group membership."}, :domainMembership {"$ref" "#/definitions/DomainMembership", :description "Output only. The domain membership."}, :metadata {"$ref" "#/definitions/FieldMetadata", :description "Metadata about the membership."}}, :type "object"}, :ContactGroupResponse {:description "The response for a specific contact group.", :properties {:contactGroup {"$ref" "#/definitions/ContactGroup", :description "The contact group."}, :requestedResourceName {:description "The original requested resource name.", :type "string"}, :status {"$ref" "#/definitions/Status", :description "The status of the response."}}, :type "object"}, :CoverPhoto {:description "A person's cover photo. A large image shown on the person's\nprofile page that represents who they are or what they care about.", :properties {:default {:description "True if the cover photo is the default cover photo;\nfalse if the cover photo is a user-provided cover photo.", :type "boolean"}, :metadata {"$ref" "#/definitions/FieldMetadata", :description "Metadata about the cover photo."}, :url {:description "The URL of the cover photo.", :type "string"}}, :type "object"}, :Locale {:description "A person's locale preference.", :properties {:metadata {"$ref" "#/definitions/FieldMetadata", :description "Metadata about the locale."}, :value {:description "The well-formed [IETF BCP 47](https://tools.ietf.org/html/bcp47)\nlanguage tag representing the locale.", :type "string"}}, :type "object"}, :PhoneNumber {:description "A person's phone number.", :properties {:canonicalForm {:description "Output only. The canonicalized [ITU-T\nE.164](https://law.resource.org/pub/us/cfr/ibr/004/itu-t.E.164.1.2008.pdf)\nform of the phone number.", :type "string"}, :formattedType {:description "Output only. The type of the phone number translated and formatted in the\nviewer's account locale or the `Accept-Language` HTTP header locale.", :type "string"}, :metadata {"$ref" "#/definitions/FieldMetadata", :description "Metadata about the phone number."}, :type {:description "The type of the phone number. The type can be custom or one of these\npredefined values:\n\n* `home`\n* `work`\n* `mobile`\n* `homeFax`\n* `workFax`\n* `otherFax`\n* `pager`\n* `workMobile`\n* `workPager`\n* `main`\n* `googleVoice`\n* `other`", :type "string"}, :value {:description "The phone number.", :type "string"}}, :type "object"}, :Relation {:description "A person's relation to another person.", :properties {:formattedType {:description "Output only. The type of the relation translated and formatted in the viewer's\naccount locale or the locale specified in the Accept-Language HTTP header.", :type "string"}, :metadata {"$ref" "#/definitions/FieldMetadata", :description "Metadata about the relation."}, :person {:description "The name of the other person this relation refers to.", :type "string"}, :type {:description "The person's relation to the other person. The type can be custom or one of\nthese predefined values:\n\n* `spouse`\n* `child`\n* `mother`\n* `father`\n* `parent`\n* `brother`\n* `sister`\n* `friend`\n* `relative`\n* `domesticPartner`\n* `manager`\n* `assistant`\n* `referredBy`\n* `partner`", :type "string"}}, :type "object"}, :CreateContactGroupRequest {:description "A request to create a new contact group.", :properties {:contactGroup {"$ref" "#/definitions/ContactGroup", :description "Required. The contact group to create."}}, :type "object"}, :RelationshipStatus {:description "A person's relationship status.", :properties {:formattedValue {:description "Output only. The value of the relationship status translated and formatted in\nthe viewer's account locale or the `Accept-Language` HTTP header locale.", :type "string"}, :metadata {"$ref" "#/definitions/FieldMetadata", :description "Metadata about the relationship status."}, :value {:description "The relationship status. The value can be custom or one of these\npredefined values:\n\n* `single`\n* `inARelationship`\n* `engaged`\n* `married`\n* `itsComplicated`\n* `openRelationship`\n* `widowed`\n* `inDomesticPartnership`\n* `inCivilUnion`", :type "string"}}, :type "object"}, :UserDefined {:description "Arbitrary user data that is populated by the end users.", :properties {:key {:description "The end user specified key of the user defined data.", :type "string"}, :metadata {"$ref" "#/definitions/FieldMetadata", :description "Metadata about the user defined data."}, :value {:description "The end user specified value of the user defined data.", :type "string"}}, :type "object"}, :ContactGroup {:description "A contact group.", :properties {:etag {:description "The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the\nresource. Used for web cache validation.", :type "string"}, :formattedName {:description "Output only. The name translated and formatted in the viewer's account locale\nor the `Accept-Language` HTTP header locale for system groups names.\nGroup names set by the owner are the same as name.", :type "string"}, :groupType {:description "Output only. The contact group type.", :enum ["GROUP_TYPE_UNSPECIFIED" "USER_CONTACT_GROUP" "SYSTEM_CONTACT_GROUP"], :type "string"}, :memberCount {:description "Output only. The total number of contacts in the group irrespective of max members in\nspecified in the request.", :format "int32", :type "integer"}, :memberResourceNames {:description "Output only. The list of contact person resource names that are members of the contact\ngroup. The field is not populated for LIST requests and can only be updated\nthrough the\n[ModifyContactGroupMembers](/people/api/rest/v1/contactgroups/members/modify).", :items {:type "string"}, :type "array"}, :metadata {"$ref" "#/definitions/ContactGroupMetadata", :description "Output only. Metadata about the contact group."}, :name {:description "The contact group name set by the group owner or a system provided name\nfor system groups.", :type "string"}, :resourceName {:description "The resource name for the contact group, assigned by the server. An ASCII\nstring, in the form of `contactGroups/`<var>contact_group_id</var>.", :type "string"}}, :type "object"}, :Date {:description "Represents a whole or partial calendar date, e.g. a birthday. The time of day\nand time zone are either specified elsewhere or are not significant. The date\nis relative to the Proleptic Gregorian Calendar. This can represent:\n\n* A full date, with non-zero year, month and day values\n* A month and day value, with a zero year, e.g. an anniversary\n* A year on its own, with zero month and day values\n* A year and month value, with a zero day, e.g. a credit card expiration date\n\nRelated types are google.type.TimeOfDay and `google.protobuf.Timestamp`.", :properties {:day {:description "Day of month. Must be from 1 to 31 and valid for the year and month, or 0\nif specifying a year by itself or a year and month where the day is not\nsignificant.", :format "int32", :type "integer"}, :month {:description "Month of year. Must be from 1 to 12, or 0 if specifying a year without a\nmonth and day.", :format "int32", :type "integer"}, :year {:description "Year of date. Must be from 1 to 9999, or 0 if specifying a date without\na year.", :format "int32", :type "integer"}}, :type "object"}, :FieldMetadata {:description "Metadata about a field.", :properties {:primary {:description "True if the field is the primary field; false if the field is a secondary\nfield.", :type "boolean"}, :source {"$ref" "#/definitions/Source", :description "The source of the field."}, :verified {:description "Output only. True if the field is verified; false if the field is unverified. A\nverified field is typically a name, email address, phone number, or\nwebsite that has been confirmed to be owned by the person.", :type "boolean"}}, :type "object"}, :Photo {:description "A person's photo. A picture shown next to the person's name to\nhelp others recognize the person.", :properties {:default {:description "True if the photo is a default photo;\nfalse if the photo is a user-provided photo.", :type "boolean"}, :metadata {"$ref" "#/definitions/FieldMetadata", :description "Metadata about the photo."}, :url {:description "The URL of the photo. You can change the desired size by appending a query\nparameter `sz=`<var>size</var> at the end of the url. Example:\n`https://lh3.googleusercontent.com/-T_wVWLlmg7w/AAAAAAAAAAI/AAAAAAAABa8/00gzXvDBYqw/s100/photo.jpg?sz=50`", :type "string"}}, :type "object"}, :GetPeopleResponse {:properties {:responses {:description "The response for each requested resource name.", :items {"$ref" "#/definitions/PersonResponse"}, :type "array"}}, :type "object"}, :PersonResponse {:description "The response for a single person", :properties {:httpStatusCode {:description "**DEPRECATED** (Please use status instead)\n\n[HTTP 1.1 status code]\n(http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).", :format "int32", :type "integer"}, :person {"$ref" "#/definitions/Person", :description "The person."}, :requestedResourceName {:description "The original requested resource name. May be different than the resource\nname on the returned person.\n\nThe resource name can change when adding or removing fields that link a\ncontact and profile such as a verified email, verified phone number, or a\nprofile URL.", :type "string"}, :status {"$ref" "#/definitions/Status", :description "The status of the response."}}, :type "object"}, :Name {:description "A person's name. If the name is a mononym, the family name is empty.", :properties {:middleName {:description "The middle name(s).", :type "string"}, :phoneticHonorificPrefix {:description "The honorific prefixes spelled as they sound.", :type "string"}, :phoneticHonorificSuffix {:description "The honorific suffixes spelled as they sound.", :type "string"}, :displayNameLastFirst {:description "Output only. The display name with the last name first formatted according to\nthe locale specified by the viewer's account or the\n`Accept-Language` HTTP header.", :type "string"}, :displayName {:description "Output only. The display name formatted according to the locale specified by\nthe viewer's account or the `Accept-Language` HTTP header.", :type "string"}, :phoneticGivenName {:description "The given name spelled as it sounds.", :type "string"}, :honorificPrefix {:description "The honorific prefixes, such as `Mrs.` or `Dr.`", :type "string"}, :phoneticFullName {:description "The full name spelled as it sounds.", :type "string"}, :phoneticFamilyName {:description "The family name spelled as it sounds.", :type "string"}, :familyName {:description "The family name.", :type "string"}, :phoneticMiddleName {:description "The middle name(s) spelled as they sound.", :type "string"}, :givenName {:description "The given name.", :type "string"}, :honorificSuffix {:description "The honorific suffixes, such as `Jr.`", :type "string"}, :metadata {"$ref" "#/definitions/FieldMetadata", :description "Metadata about the name."}}, :type "object"}, :ListConnectionsResponse {:properties {:connections {:description "The list of people that the requestor is connected to.", :items {"$ref" "#/definitions/Person"}, :type "array"}, :nextPageToken {:description "The token that can be used to retrieve the next page of results.", :type "string"}, :nextSyncToken {:description "The token that can be used to retrieve changes since the last request.", :type "string"}, :totalItems {:description "The total number of items in the list without pagination.", :format "int32", :type "integer"}, :totalPeople {:description "**DEPRECATED** (Please use totalItems)\nThe total number of people in the list without pagination.", :format "int32", :type "integer"}}, :type "object"}, :ModifyContactGroupMembersResponse {:description "The response to a modify contact group members request.", :properties {:canNotRemoveLastContactGroupResourceNames {:description "The contact people resource names that cannot be removed from their\nlast contact group.", :items {:type "string"}, :type "array"}, :notFoundResourceNames {:description "The contact people resource names that were not found.", :items {:type "string"}, :type "array"}}, :type "object"}, :BraggingRights {:description "A person's bragging rights.", :properties {:metadata {"$ref" "#/definitions/FieldMetadata", :description "Metadata about the bragging rights."}, :value {:description "The bragging rights; for example, `climbed mount everest`.", :type "string"}}, :type "object"}, :Person {:description "Information about a person merged from various data sources such as the\nauthenticated user's contacts and profile data.\n\nMost fields can have multiple items. The items in a field have no guaranteed\norder, but each non-empty field is guaranteed to have exactly one field with\n`metadata.primary` set to true.", :properties {:addresses {:description "The person's street addresses.", :items {"$ref" "#/definitions/Address"}, :type "array"}, :urls {:description "The person's associated URLs.", :items {"$ref" "#/definitions/Url"}, :type "array"}, :relationshipStatuses {:description "Output only. The person's relationship statuses.", :items {"$ref" "#/definitions/RelationshipStatus"}, :type "array"}, :coverPhotos {:description "Output only. The person's cover photos.", :items {"$ref" "#/definitions/CoverPhoto"}, :type "array"}, :birthdays {:description "The person's birthdays.", :items {"$ref" "#/definitions/Birthday"}, :type "array"}, :relations {:description "The person's relations.", :items {"$ref" "#/definitions/Relation"}, :type "array"}, :ageRange {:description "Output only. **DEPRECATED** (Please use `person.ageRanges` instead)**\n\nThe person's age range.", :enum ["AGE_RANGE_UNSPECIFIED" "LESS_THAN_EIGHTEEN" "EIGHTEEN_TO_TWENTY" "TWENTY_ONE_OR_OLDER"], :type "string"}, :events {:description "The person's events.", :items {"$ref" "#/definitions/Event"}, :type "array"}, :phoneNumbers {:description "The person's phone numbers.", :items {"$ref" "#/definitions/PhoneNumber"}, :type "array"}, :etag {:description "The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the\nresource. Used for web cache validation.", :type "string"}, :biographies {:description "The person's biographies.", :items {"$ref" "#/definitions/Biography"}, :type "array"}, :emailAddresses {:description "The person's email addresses.", :items {"$ref" "#/definitions/EmailAddress"}, :type "array"}, :organizations {:description "The person's past or current organizations.", :items {"$ref" "#/definitions/Organization"}, :type "array"}, :sipAddresses {:description "The person's SIP addresses.", :items {"$ref" "#/definitions/SipAddress"}, :type "array"}, :braggingRights {:description "The person's bragging rights.", :items {"$ref" "#/definitions/BraggingRights"}, :type "array"}, :resourceName {:description "The resource name for the person, assigned by the server. An ASCII string\nwith a max length of 27 characters, in the form of\n`people/`<var>person_id</var>.", :type "string"}, :relationshipInterests {:description "Output only. The person's relationship interests.", :items {"$ref" "#/definitions/RelationshipInterest"}, :type "array"}, :photos {:description "Output only. The person's photos.", :items {"$ref" "#/definitions/Photo"}, :type "array"}, :skills {:description "The person's skills.", :items {"$ref" "#/definitions/Skill"}, :type "array"}, :locales {:description "The person's locale preferences.", :items {"$ref" "#/definitions/Locale"}, :type "array"}, :ageRanges {:description "Output only. The person's age ranges.", :items {"$ref" "#/definitions/AgeRangeType"}, :type "array"}, :memberships {:description "The person's group memberships.", :items {"$ref" "#/definitions/Membership"}, :type "array"}, :interests {:description "The person's interests.", :items {"$ref" "#/definitions/Interest"}, :type "array"}, :nicknames {:description "The person's nicknames.", :items {"$ref" "#/definitions/Nickname"}, :type "array"}, :residences {:description "The person's residences.", :items {"$ref" "#/definitions/Residence"}, :type "array"}, :imClients {:description "The person's instant messaging clients.", :items {"$ref" "#/definitions/ImClient"}, :type "array"}, :genders {:description "The person's genders.", :items {"$ref" "#/definitions/Gender"}, :type "array"}, :taglines {:description "Output only. The person's taglines.", :items {"$ref" "#/definitions/Tagline"}, :type "array"}, :occupations {:description "The person's occupations.", :items {"$ref" "#/definitions/Occupation"}, :type "array"}, :metadata {"$ref" "#/definitions/PersonMetadata", :description "Output only. Metadata about the person."}, :names {:description "The person's names.", :items {"$ref" "#/definitions/Name"}, :type "array"}, :userDefined {:description "The person's user defined data.", :items {"$ref" "#/definitions/UserDefined"}, :type "array"}}, :type "object"}, :DomainMembership {:description "A G Suite Domain membership.", :properties {:inViewerDomain {:description "True if the person is in the viewer's G Suite domain.", :type "boolean"}}, :type "object"}, :Source {:description "The source of a field.", :properties {:etag {:description "**Only populated in `person.metadata.sources`.**\n\nThe [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the\nsource. Used for web cache validation.", :type "string"}, :id {:description "The unique identifier within the source type generated by the server.", :type "string"}, :profileMetadata {"$ref" "#/definitions/ProfileMetadata", :description "Output only. **Only populated in `person.metadata.sources`.**\n\nMetadata about a source of type PROFILE."}, :type {:description "The source type.", :enum ["SOURCE_TYPE_UNSPECIFIED" "ACCOUNT" "PROFILE" "DOMAIN_PROFILE" "CONTACT"], :type "string"}, :updateTime {:description "Output only. **Only populated in `person.metadata.sources`.**\n\nLast update timestamp of this source.", :format "google-datetime", :type "string"}}, :type "object"}, :BatchGetContactGroupsResponse {:description "The response to a batch get contact groups request.", :properties {:responses {:description "The list of responses for each requested contact group resource.", :items {"$ref" "#/definitions/ContactGroupResponse"}, :type "array"}}, :type "object"}, :Gender {:description "A person's gender.", :properties {:formattedValue {:description "Output only. The value of the gender translated and formatted in the viewer's\naccount locale or the `Accept-Language` HTTP header locale.", :type "string"}, :metadata {"$ref" "#/definitions/FieldMetadata", :description "Metadata about the gender."}, :value {:description "The gender for the person. The gender can be custom or one of these\npredefined values:\n\n* `male`\n* `female`\n* `other`\n* `unknown`", :type "string"}}, :type "object"}, :Organization {:description "A person's past or current organization. Overlapping date ranges are\npermitted.", :properties {:department {:description "The person's department at the organization.", :type "string"}, :formattedType {:description "Output only. The type of the organization translated and formatted in the\nviewer's account locale or the `Accept-Language` HTTP header locale.", :type "string"}, :symbol {:description "The symbol associated with the organization; for example, a stock ticker\nsymbol, abbreviation, or acronym.", :type "string"}, :name {:description "The name of the organization.", :type "string"}, :startDate {"$ref" "#/definitions/Date", :description "The start date when the person joined the organization."}, :type {:description "The type of the organization. The type can be custom or  one of these\npredefined values:\n\n* `work`\n* `school`", :type "string"}, :phoneticName {:description "The phonetic name of the organization.", :type "string"}, :title {:description "The person's job title at the organization.", :type "string"}, :endDate {"$ref" "#/definitions/Date", :description "The end date when the person left the organization."}, :jobDescription {:description "The person's job description at the organization.", :type "string"}, :current {:description "True if the organization is the person's current organization;\nfalse if the organization is a past organization.", :type "boolean"}, :domain {:description "The domain name associated with the organization; for example,\n`google.com`.", :type "string"}, :location {:description "The location of the organization office the person works at.", :type "string"}, :metadata {"$ref" "#/definitions/FieldMetadata", :description "Metadata about the organization."}}, :type "object"}, :Biography {:description "A person's short biography.", :properties {:contentType {:description "The content type of the biography.", :enum ["CONTENT_TYPE_UNSPECIFIED" "TEXT_PLAIN" "TEXT_HTML"], :type "string"}, :metadata {"$ref" "#/definitions/FieldMetadata", :description "Metadata about the biography."}, :value {:description "The short biography.", :type "string"}}, :type "object"}, :Nickname {:description "A person's nickname.", :properties {:metadata {"$ref" "#/definitions/FieldMetadata", :description "Metadata about the nickname."}, :type {:description "The type of the nickname.", :enum ["DEFAULT" "MAIDEN_NAME" "INITIALS" "GPLUS" "OTHER_NAME"], :type "string"}, :value {:description "The nickname.", :type "string"}}, :type "object"}, :ImClient {:description "A person's instant messaging client.", :properties {:formattedProtocol {:description "Output only. The protocol of the IM client formatted in the viewer's account\nlocale or the `Accept-Language` HTTP header locale.", :type "string"}, :formattedType {:description "Output only. The type of the IM client translated and formatted in the\nviewer's account locale or the `Accept-Language` HTTP header locale.", :type "string"}, :metadata {"$ref" "#/definitions/FieldMetadata", :description "Metadata about the IM client."}, :protocol {:description "The protocol of the IM client. The protocol can be custom or one of these\npredefined values:\n\n* `aim`\n* `msn`\n* `yahoo`\n* `skype`\n* `qq`\n* `googleTalk`\n* `icq`\n* `jabber`\n* `netMeeting`", :type "string"}, :type {:description "The type of the IM client. The type can be custom or one of these\npredefined values:\n\n* `home`\n* `work`\n* `other`", :type "string"}, :username {:description "The user name used in the IM client.", :type "string"}}, :type "object"}, :ContactGroupMembership {:description "A Google contact group membership.", :properties {:contactGroupId {:description "Output only. The contact group ID for the contact group membership.", :type "string"}, :contactGroupResourceName {:description "The resource name for the contact group, assigned by the server. An ASCII\nstring, in the form of `contactGroups/`<var>contact_group_id</var>.\nOnly contact_group_resource_name can be used for modifying memberships.\nAny contact group membership can be removed, but only user group or\n\"myContacts\" or \"starred\" system groups memberships can be added. A\ncontact must always have at least one contact group membership.", :type "string"}}, :type "object"}, :ContactGroupMetadata {:description "The metadata about a contact group.", :properties {:deleted {:description "Output only. True if the contact group resource has been deleted. Populated only for\n[`ListContactGroups`](/people/api/rest/v1/contactgroups/list) requests\nthat include a sync token.", :type "boolean"}, :updateTime {:description "Output only. The time the group was last updated.", :format "google-datetime", :type "string"}}, :type "object"}, :UpdateContactPhotoRequest {:description "A request to update an existing contact's photo.\nAll requests must have a valid photo format: JPEG or PNG.", :properties {:personFields {:description "Optional. A field mask to restrict which fields on the person are returned. Multiple\nfields can be specified by separating them with commas. Defaults to empty\nif not set, which will skip the post mutate get. Valid values are:\n\n* addresses\n* ageRanges\n* biographies\n* birthdays\n* braggingRights\n* coverPhotos\n* emailAddresses\n* events\n* genders\n* imClients\n* interests\n* locales\n* memberships\n* metadata\n* names\n* nicknames\n* occupations\n* organizations\n* phoneNumbers\n* photos\n* relations\n* relationshipInterests\n* relationshipStatuses\n* residences\n* sipAddresses\n* skills\n* taglines\n* urls\n* userDefined", :format "google-fieldmask", :type "string"}, :photoBytes {:description "Required. Raw photo bytes", :format "byte", :type "string"}}, :type "object"}, :Birthday {:description "A person's birthday. At least one of the `date` and `text` fields are\nspecified. The `date` and `text` fields typically represent the same\ndate, but are not guaranteed to.", :properties {:date {"$ref" "#/definitions/Date", :description "The date of the birthday."}, :metadata {"$ref" "#/definitions/FieldMetadata", :description "Metadata about the birthday."}, :text {:description "A free-form string representing the user's birthday.", :type "string"}}, :type "object"}, :Status {:description "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors).", :properties {:code {:description "The status code, which should be an enum value of google.rpc.Code.", :format "int32", :type "integer"}, :details {:description "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use.", :items {:additionalProperties {:description "Properties of the object. Contains field @type with type URL."}, :type "object"}, :type "array"}, :message {:description "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.", :type "string"}}, :type "object"}}}