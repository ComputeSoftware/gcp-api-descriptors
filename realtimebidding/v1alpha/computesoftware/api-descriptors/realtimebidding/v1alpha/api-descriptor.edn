#:compute.gcp.descriptor{:name "realtimebidding", :title "Real-time Bidding API", :api-version "v1alpha", :revision "20210222", :endpoint #:compute.gcp.descriptor{:url "https://realtimebidding.googleapis.com/", :batch-path "batch", :service-path ""}, :parameters {"callback" {"type" "string", "location" "query", "description" "JSONP"}, "uploadType" {"location" "query", "description" "Legacy upload protocol for media (e.g. \"media\", \"multipart\").", "type" "string"}, "key" {"type" "string", "description" "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.", "location" "query"}, "access_token" {"type" "string", "description" "OAuth access token.", "location" "query"}, "oauth_token" {"location" "query", "type" "string", "description" "OAuth 2.0 token for the current user."}, "prettyPrint" {"description" "Returns response with indentations and line breaks.", "default" "true", "type" "boolean", "location" "query"}, "alt" {"enumDescriptions" ["Responses with Content-Type of application/json" "Media download with context-dependent Content-Type" "Responses with Content-Type of application/x-protobuf"], "description" "Data format for response.", "location" "query", "enum" ["json" "media" "proto"], "default" "json", "type" "string"}, "$.xgafv" {"enumDescriptions" ["v1 error format" "v2 error format"], "type" "string", "description" "V1 error format.", "enum" ["1" "2"], "location" "query"}, "fields" {"type" "string", "location" "query", "description" "Selector specifying which fields to include in a partial response."}, "upload_protocol" {"type" "string", "location" "query", "description" "Upload protocol for media (e.g. \"raw\", \"multipart\")."}, "quotaUser" {"type" "string", "location" "query", "description" "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."}}, :op->info {"realtimebidding.bidders.biddingFunctions.list" #:compute.gcp.descriptor{:http-method :get, :path "v1alpha/{+parent}/biddingFunctions", :response {"$ref" "ListBiddingFunctionsResponse"}, :parameters {"parent" {"type" "string", "location" "path", "required" true, "pattern" "^bidders/[^/]+$", "description" "Required. Name of the bidder whose bidding functions will be listed. Format: `bidders/{bidder_account_id}`"}, "pageSize" {"type" "integer", "location" "query", "format" "int32", "description" "The maximum number of bidding functions to return."}, "pageToken" {"location" "query", "type" "string", "description" "A token identifying a page of results the server should return. This value is received from a previous `ListBiddingFunctions` call in ListBiddingFunctionsResponse.nextPageToken."}}, :description "Lists the bidding functions that a bidder currently has registered."}, "realtimebidding.bidders.biddingFunctions.create" #:compute.gcp.descriptor{:http-method :post, :path "v1alpha/{+parent}/biddingFunctions", :request {"$ref" "BiddingFunction"}, :response {"$ref" "BiddingFunction"}, :parameters {"parent" {"pattern" "^bidders/[^/]+$", "location" "path", "required" true, "description" "Required. The name of the bidder for which to create the bidding function. Format: `bidders/{bidderAccountId}`", "type" "string"}}, :description "Creates a new bidding function."}}, :schemas {"ListBiddingFunctionsResponse" {"properties" {"biddingFunctions" {"description" "A list of a bidder's bidding functions.", "type" "array", "items" {"$ref" "BiddingFunction"}}, "nextPageToken" {"description" "A token which can be passed to a subsequent call to the `ListBiddingFunctions` method to retrieve the next page of results in ListBiddingFunctionsRequest.pageToken.", "type" "string"}}, "description" "A response containing a list of a bidder's bidding functions.", "id" "ListBiddingFunctionsResponse", "type" "object"}, "BiddingFunction" {"description" "The bidding function to be executed as part of the TURTLEDOVE simulation experiment bidding flow.", "properties" {"name" {"description" "The name of the bidding function that must follow the pattern: `bidders/{bidder_account_id}/biddingFunctions/{bidding_function_name}`.", "type" "string"}, "biddingFunction" {"description" "The raw Javascript source code of the bidding function. The function takes in a Javascript object, `inputs`, that contains the following named fields: `openrtbContextualBidRequest` OR `googleContextualBidRequest`, `customContextualSignal`, `interestBasedBidData`, `interestGroupData`, `recentImpressionAges`, and returns the bid price CPM (double). Example: ``` /* Returns a bid price CPM (double). * * @param {Object} inputs an object with the * following named fields: * - openrtbContextualBidRequest * OR googleContextualBidRequest * - customContextualSignal * - interestBasedBidData * - interestGroupData * - recentImpressionAges */ function biddingFunction(inputs) { ... return inputs.interestBasedBidData.cpm * inputs.customContextualSignals.placementMultiplier; } ```", "type" "string"}}, "type" "object", "id" "BiddingFunction"}}}