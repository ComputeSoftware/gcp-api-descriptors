#:compute.gcp.descriptor{:name "language", :title "Cloud Natural Language API", :api-version "v1", :revision "20210206", :endpoint #:compute.gcp.descriptor{:url "https://language.googleapis.com/", :batch-path "batch", :service-path ""}, :parameters {"callback" {"location" "query", "type" "string", "description" "JSONP"}, "uploadType" {"description" "Legacy upload protocol for media (e.g. \"media\", \"multipart\").", "location" "query", "type" "string"}, "key" {"location" "query", "description" "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.", "type" "string"}, "access_token" {"description" "OAuth access token.", "type" "string", "location" "query"}, "oauth_token" {"description" "OAuth 2.0 token for the current user.", "type" "string", "location" "query"}, "prettyPrint" {"location" "query", "type" "boolean", "default" "true", "description" "Returns response with indentations and line breaks."}, "alt" {"enum" ["json" "media" "proto"], "location" "query", "description" "Data format for response.", "type" "string", "default" "json", "enumDescriptions" ["Responses with Content-Type of application/json" "Media download with context-dependent Content-Type" "Responses with Content-Type of application/x-protobuf"]}, "$.xgafv" {"enumDescriptions" ["v1 error format" "v2 error format"], "location" "query", "type" "string", "description" "V1 error format.", "enum" ["1" "2"]}, "fields" {"type" "string", "location" "query", "description" "Selector specifying which fields to include in a partial response."}, "upload_protocol" {"type" "string", "description" "Upload protocol for media (e.g. \"raw\", \"multipart\").", "location" "query"}, "quotaUser" {"description" "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.", "location" "query", "type" "string"}}, :op->info {"language.documents.analyzeEntities" #:compute.gcp.descriptor{:http-method :post, :path "v1/documents:analyzeEntities", :request {"$ref" "AnalyzeEntitiesRequest"}, :response {"$ref" "AnalyzeEntitiesResponse"}, :parameters {}, :description "Finds named entities (currently proper names and common nouns) in the text along with entity types, salience, mentions for each entity, and other properties."}, "language.documents.classifyText" #:compute.gcp.descriptor{:http-method :post, :path "v1/documents:classifyText", :request {"$ref" "ClassifyTextRequest"}, :response {"$ref" "ClassifyTextResponse"}, :parameters {}, :description "Classifies a document into categories."}, "language.documents.annotateText" #:compute.gcp.descriptor{:http-method :post, :path "v1/documents:annotateText", :request {"$ref" "AnnotateTextRequest"}, :response {"$ref" "AnnotateTextResponse"}, :parameters {}, :description "A convenience method that provides all the features that analyzeSentiment, analyzeEntities, and analyzeSyntax provide in one call."}, "language.documents.analyzeSentiment" #:compute.gcp.descriptor{:http-method :post, :path "v1/documents:analyzeSentiment", :request {"$ref" "AnalyzeSentimentRequest"}, :response {"$ref" "AnalyzeSentimentResponse"}, :parameters {}, :description "Analyzes the sentiment of the provided text."}, "language.documents.analyzeSyntax" #:compute.gcp.descriptor{:http-method :post, :path "v1/documents:analyzeSyntax", :request {"$ref" "AnalyzeSyntaxRequest"}, :response {"$ref" "AnalyzeSyntaxResponse"}, :parameters {}, :description "Analyzes the syntax of the text and provides sentence boundaries and tokenization along with part of speech tags, dependency trees, and other properties."}, "language.documents.analyzeEntitySentiment" #:compute.gcp.descriptor{:http-method :post, :path "v1/documents:analyzeEntitySentiment", :request {"$ref" "AnalyzeEntitySentimentRequest"}, :response {"$ref" "AnalyzeEntitySentimentResponse"}, :parameters {}, :description "Finds entities, similar to AnalyzeEntities in the text and analyzes sentiment associated with each entity and its mentions."}}, :schemas {"AnalyzeSyntaxResponse" {"type" "object", "properties" {"language" {"description" "The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details.", "type" "string"}, "sentences" {"items" {"$ref" "Sentence"}, "description" "Sentences in the input document.", "type" "array"}, "tokens" {"type" "array", "description" "Tokens, along with their syntactic information, in the input document.", "items" {"$ref" "Token"}}}, "description" "The syntax analysis response message.", "id" "AnalyzeSyntaxResponse"}, "AnalyzeEntitiesResponse" {"type" "object", "description" "The entity analysis response message.", "properties" {"language" {"type" "string", "description" "The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details."}, "entities" {"items" {"$ref" "Entity"}, "type" "array", "description" "The recognized entities in the input document."}}, "id" "AnalyzeEntitiesResponse"}, "Sentiment" {"type" "object", "properties" {"score" {"description" "Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment).", "type" "number", "format" "float"}, "magnitude" {"format" "float", "description" "A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment regardless of score (positive or negative).", "type" "number"}}, "id" "Sentiment", "description" "Represents the feeling associated with the entire text or entities in the text."}, "AnnotateTextRequest" {"properties" {"document" {"description" "Required. Input document.", "$ref" "Document"}, "encodingType" {"enum" ["NONE" "UTF8" "UTF16" "UTF32"], "enumDescriptions" ["If `EncodingType` is not specified, encoding-dependent information (such as `begin_offset`) will be set at `-1`." "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-8 encoding of the input. C++ and Go are examples of languages that use this encoding natively." "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-16 encoding of the input. Java and JavaScript are examples of languages that use this encoding natively." "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-32 encoding of the input. Python is an example of a language that uses this encoding natively."], "description" "The encoding type used by the API to calculate offsets.", "type" "string"}, "features" {"description" "Required. The enabled features.", "$ref" "Features"}}, "description" "The request message for the text annotation API, which can perform multiple analysis types (sentiment, entities, and syntax) in one call.", "id" "AnnotateTextRequest", "type" "object"}, "DependencyEdge" {"properties" {"headTokenIndex" {"type" "integer", "description" "Represents the head of this token in the dependency tree. This is the index of the token which has an arc going to this token. The index is the position of the token in the array of tokens returned by the API method. If this token is a root token, then the `head_token_index` is its own index.", "format" "int32"}, "label" {"type" "string", "enumDescriptions" ["Unknown" "Abbreviation modifier" "Adjectival complement" "Adverbial clause modifier" "Adverbial modifier" "Adjectival modifier of an NP" "Appositional modifier of an NP" "Attribute dependent of a copular verb" "Auxiliary (non-main) verb" "Passive auxiliary" "Coordinating conjunction" "Clausal complement of a verb or adjective" "Conjunct" "Clausal subject" "Clausal passive subject" "Dependency (unable to determine)" "Determiner" "Discourse" "Direct object" "Expletive" "Goes with (part of a word in a text not well edited)" "Indirect object" "Marker (word introducing a subordinate clause)" "Multi-word expression" "Multi-word verbal expression" "Negation modifier" "Noun compound modifier" "Noun phrase used as an adverbial modifier" "Nominal subject" "Passive nominal subject" "Numeric modifier of a noun" "Element of compound number" "Punctuation mark" "Parataxis relation" "Participial modifier" "The complement of a preposition is a clause" "Object of a preposition" "Possession modifier" "Postverbal negative particle" "Predicate complement" "Preconjunt" "Predeterminer" "Prefix" "Prepositional modifier" "The relationship between a verb and verbal morpheme" "Particle" "Associative or possessive marker" "Quantifier phrase modifier" "Relative clause modifier" "Complementizer in relative clause" "Ellipsis without a preceding predicate" "Referent" "Remnant" "Reparandum" "Root" "Suffix specifying a unit of number" "Suffix" "Temporal modifier" "Topic marker" "Clause headed by an infinite form of the verb that modifies a noun" "Vocative" "Open clausal complement" "Name suffix" "Name title" "Adverbial phrase modifier" "Causative auxiliary" "Helper auxiliary" "Rentaishi (Prenominal modifier)" "Foreign words" "Keyword" "List for chains of comparable items" "Nominalized clause" "Nominalized clausal subject" "Nominalized clausal passive" "Compound of numeric modifier" "Copula" "Dislocated relation (for fronted/topicalized elements)" "Aspect marker" "Genitive modifier" "Genitive object" "Infinitival modifier" "Measure" "Nominal complement of a noun"], "description" "The parse label for the token.", "enum" ["UNKNOWN" "ABBREV" "ACOMP" "ADVCL" "ADVMOD" "AMOD" "APPOS" "ATTR" "AUX" "AUXPASS" "CC" "CCOMP" "CONJ" "CSUBJ" "CSUBJPASS" "DEP" "DET" "DISCOURSE" "DOBJ" "EXPL" "GOESWITH" "IOBJ" "MARK" "MWE" "MWV" "NEG" "NN" "NPADVMOD" "NSUBJ" "NSUBJPASS" "NUM" "NUMBER" "P" "PARATAXIS" "PARTMOD" "PCOMP" "POBJ" "POSS" "POSTNEG" "PRECOMP" "PRECONJ" "PREDET" "PREF" "PREP" "PRONL" "PRT" "PS" "QUANTMOD" "RCMOD" "RCMODREL" "RDROP" "REF" "REMNANT" "REPARANDUM" "ROOT" "SNUM" "SUFF" "TMOD" "TOPIC" "VMOD" "VOCATIVE" "XCOMP" "SUFFIX" "TITLE" "ADVPHMOD" "AUXCAUS" "AUXVV" "DTMOD" "FOREIGN" "KW" "LIST" "NOMC" "NOMCSUBJ" "NOMCSUBJPASS" "NUMC" "COP" "DISLOCATED" "ASP" "GMOD" "GOBJ" "INFMOD" "MES" "NCOMP"]}}, "id" "DependencyEdge", "description" "Represents dependency parse tree information for a token. (For more information on dependency labels, see http://www.aclweb.org/anthology/P13-2017", "type" "object"}, "TextSpan" {"description" "Represents an output piece of text.", "properties" {"content" {"description" "The content of the output text.", "type" "string"}, "beginOffset" {"description" "The API calculates the beginning offset of the content in the original document according to the EncodingType specified in the API request.", "type" "integer", "format" "int32"}}, "type" "object", "id" "TextSpan"}, "Status" {"description" "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).", "type" "object", "id" "Status", "properties" {"message" {"description" "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.", "type" "string"}, "details" {"items" {"additionalProperties" {"type" "any", "description" "Properties of the object. Contains field @type with type URL."}, "type" "object"}, "type" "array", "description" "A list of messages that carry the error details. There is a common set of message types for APIs to use."}, "code" {"description" "The status code, which should be an enum value of google.rpc.Code.", "format" "int32", "type" "integer"}}}, "Sentence" {"properties" {"text" {"description" "The sentence text.", "$ref" "TextSpan"}, "sentiment" {"description" "For calls to AnalyzeSentiment or if AnnotateTextRequest.Features.extract_document_sentiment is set to true, this field will contain the sentiment for the sentence.", "$ref" "Sentiment"}}, "description" "Represents a sentence in the input document.", "id" "Sentence", "type" "object"}, "AnalyzeEntitiesRequest" {"type" "object", "properties" {"encodingType" {"description" "The encoding type used by the API to calculate offsets.", "enum" ["NONE" "UTF8" "UTF16" "UTF32"], "type" "string", "enumDescriptions" ["If `EncodingType` is not specified, encoding-dependent information (such as `begin_offset`) will be set at `-1`." "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-8 encoding of the input. C++ and Go are examples of languages that use this encoding natively." "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-16 encoding of the input. Java and JavaScript are examples of languages that use this encoding natively." "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-32 encoding of the input. Python is an example of a language that uses this encoding natively."]}, "document" {"$ref" "Document", "description" "Required. Input document."}}, "description" "The entity analysis request message.", "id" "AnalyzeEntitiesRequest"}, "ClassifyTextResponse" {"id" "ClassifyTextResponse", "properties" {"categories" {"items" {"$ref" "ClassificationCategory"}, "description" "Categories representing the input document.", "type" "array"}}, "type" "object", "description" "The document classification response message."}, "AnalyzeSyntaxRequest" {"description" "The syntax analysis request message.", "properties" {"encodingType" {"enum" ["NONE" "UTF8" "UTF16" "UTF32"], "description" "The encoding type used by the API to calculate offsets.", "type" "string", "enumDescriptions" ["If `EncodingType` is not specified, encoding-dependent information (such as `begin_offset`) will be set at `-1`." "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-8 encoding of the input. C++ and Go are examples of languages that use this encoding natively." "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-16 encoding of the input. Java and JavaScript are examples of languages that use this encoding natively." "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-32 encoding of the input. Python is an example of a language that uses this encoding natively."]}, "document" {"description" "Required. Input document.", "$ref" "Document"}}, "type" "object", "id" "AnalyzeSyntaxRequest"}, "PartOfSpeech" {"type" "object", "id" "PartOfSpeech", "description" "Represents part of speech information for a token. Parts of speech are as defined in http://www.lrec-conf.org/proceedings/lrec2012/pdf/274_Paper.pdf", "properties" {"mood" {"type" "string", "enumDescriptions" ["Mood is not applicable in the analyzed language or is not predicted." "Conditional" "Imperative" "Indicative" "Interrogative" "Jussive" "Subjunctive"], "enum" ["MOOD_UNKNOWN" "CONDITIONAL_MOOD" "IMPERATIVE" "INDICATIVE" "INTERROGATIVE" "JUSSIVE" "SUBJUNCTIVE"], "description" "The grammatical mood."}, "form" {"type" "string", "enum" ["FORM_UNKNOWN" "ADNOMIAL" "AUXILIARY" "COMPLEMENTIZER" "FINAL_ENDING" "GERUND" "REALIS" "IRREALIS" "SHORT" "LONG" "ORDER" "SPECIFIC"], "enumDescriptions" ["Form is not applicable in the analyzed language or is not predicted." "Adnomial" "Auxiliary" "Complementizer" "Final ending" "Gerund" "Realis" "Irrealis" "Short form" "Long form" "Order form" "Specific form"], "description" "The grammatical form."}, "gender" {"enum" ["GENDER_UNKNOWN" "FEMININE" "MASCULINE" "NEUTER"], "type" "string", "description" "The grammatical gender.", "enumDescriptions" ["Gender is not applicable in the analyzed language or is not predicted." "Feminine" "Masculine" "Neuter"]}, "tag" {"enumDescriptions" ["Unknown" "Adjective" "Adposition (preposition and postposition)" "Adverb" "Conjunction" "Determiner" "Noun (common and proper)" "Cardinal number" "Pronoun" "Particle or other function word" "Punctuation" "Verb (all tenses and modes)" "Other: foreign words, typos, abbreviations" "Affix"], "description" "The part of speech tag.", "type" "string", "enum" ["UNKNOWN" "ADJ" "ADP" "ADV" "CONJ" "DET" "NOUN" "NUM" "PRON" "PRT" "PUNCT" "VERB" "X" "AFFIX"]}, "person" {"enum" ["PERSON_UNKNOWN" "FIRST" "SECOND" "THIRD" "REFLEXIVE_PERSON"], "description" "The grammatical person.", "enumDescriptions" ["Person is not applicable in the analyzed language or is not predicted." "First" "Second" "Third" "Reflexive"], "type" "string"}, "case" {"enumDescriptions" ["Case is not applicable in the analyzed language or is not predicted." "Accusative" "Adverbial" "Complementive" "Dative" "Genitive" "Instrumental" "Locative" "Nominative" "Oblique" "Partitive" "Prepositional" "Reflexive" "Relative" "Vocative"], "type" "string", "enum" ["CASE_UNKNOWN" "ACCUSATIVE" "ADVERBIAL" "COMPLEMENTIVE" "DATIVE" "GENITIVE" "INSTRUMENTAL" "LOCATIVE" "NOMINATIVE" "OBLIQUE" "PARTITIVE" "PREPOSITIONAL" "REFLEXIVE_CASE" "RELATIVE_CASE" "VOCATIVE"], "description" "The grammatical case."}, "number" {"type" "string", "enumDescriptions" ["Number is not applicable in the analyzed language or is not predicted." "Singular" "Plural" "Dual"], "enum" ["NUMBER_UNKNOWN" "SINGULAR" "PLURAL" "DUAL"], "description" "The grammatical number."}, "tense" {"type" "string", "enum" ["TENSE_UNKNOWN" "CONDITIONAL_TENSE" "FUTURE" "PAST" "PRESENT" "IMPERFECT" "PLUPERFECT"], "description" "The grammatical tense.", "enumDescriptions" ["Tense is not applicable in the analyzed language or is not predicted." "Conditional" "Future" "Past" "Present" "Imperfect" "Pluperfect"]}, "reciprocity" {"enum" ["RECIPROCITY_UNKNOWN" "RECIPROCAL" "NON_RECIPROCAL"], "enumDescriptions" ["Reciprocity is not applicable in the analyzed language or is not predicted." "Reciprocal" "Non-reciprocal"], "description" "The grammatical reciprocity.", "type" "string"}, "voice" {"type" "string", "description" "The grammatical voice.", "enumDescriptions" ["Voice is not applicable in the analyzed language or is not predicted." "Active" "Causative" "Passive"], "enum" ["VOICE_UNKNOWN" "ACTIVE" "CAUSATIVE" "PASSIVE"]}, "aspect" {"type" "string", "enum" ["ASPECT_UNKNOWN" "PERFECTIVE" "IMPERFECTIVE" "PROGRESSIVE"], "enumDescriptions" ["Aspect is not applicable in the analyzed language or is not predicted." "Perfective" "Imperfective" "Progressive"], "description" "The grammatical aspect."}, "proper" {"enum" ["PROPER_UNKNOWN" "PROPER" "NOT_PROPER"], "type" "string", "enumDescriptions" ["Proper is not applicable in the analyzed language or is not predicted." "Proper" "Not proper"], "description" "The grammatical properness."}}}, "ClassifyTextRequest" {"id" "ClassifyTextRequest", "description" "The document classification request message.", "type" "object", "properties" {"document" {"description" "Required. Input document.", "$ref" "Document"}}}, "ClassificationCategory" {"properties" {"confidence" {"format" "float", "description" "The classifier's confidence of the category. Number represents how certain the classifier is that this category represents the given text.", "type" "number"}, "name" {"type" "string", "description" "The name of the category representing the document, from the [predefined taxonomy](https://cloud.google.com/natural-language/docs/categories)."}}, "type" "object", "description" "Represents a category returned from the text classifier.", "id" "ClassificationCategory"}, "AnalyzeEntitySentimentResponse" {"properties" {"entities" {"items" {"$ref" "Entity"}, "type" "array", "description" "The recognized entities in the input document with associated sentiments."}, "language" {"description" "The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details.", "type" "string"}}, "id" "AnalyzeEntitySentimentResponse", "type" "object", "description" "The entity-level sentiment analysis response message."}, "EntityMention" {"id" "EntityMention", "properties" {"type" {"enum" ["TYPE_UNKNOWN" "PROPER" "COMMON"], "description" "The type of the entity mention.", "type" "string", "enumDescriptions" ["Unknown" "Proper name" "Common noun (or noun compound)"]}, "text" {"$ref" "TextSpan", "description" "The mention text."}, "sentiment" {"description" "For calls to AnalyzeEntitySentiment or if AnnotateTextRequest.Features.extract_entity_sentiment is set to true, this field will contain the sentiment expressed for this mention of the entity in the provided document.", "$ref" "Sentiment"}}, "description" "Represents a mention for an entity in the text. Currently, proper noun mentions are supported.", "type" "object"}, "Entity" {"id" "Entity", "description" "Represents a phrase in the text that is a known entity, such as a person, an organization, or location. The API associates information, such as salience and mentions, with entities.", "type" "object", "properties" {"type" {"description" "The entity type.", "enumDescriptions" ["Unknown" "Person" "Location" "Organization" "Event" "Artwork" "Consumer product" "Other types of entities" "Phone number The metadata lists the phone number, formatted according to local convention, plus whichever additional elements appear in the text: * `number` - the actual number, broken down into sections as per local convention * `national_prefix` - country code, if detected * `area_code` - region or area code, if detected * `extension` - phone extension (to be dialed after connection), if detected" "Address The metadata identifies the street number and locality plus whichever additional elements appear in the text: * `street_number` - street number * `locality` - city or town * `street_name` - street/route name, if detected * `postal_code` - postal code, if detected * `country` - country, if detected< * `broad_region` - administrative area, such as the state, if detected * `narrow_region` - smaller administrative area, such as county, if detected * `sublocality` - used in Asian addresses to demark a district within a city, if detected" "Date The metadata identifies the components of the date: * `year` - four digit year, if detected * `month` - two digit month number, if detected * `day` - two digit day number, if detected" "Number The metadata is the number itself." "Price The metadata identifies the `value` and `currency`."], "type" "string", "enum" ["UNKNOWN" "PERSON" "LOCATION" "ORGANIZATION" "EVENT" "WORK_OF_ART" "CONSUMER_GOOD" "OTHER" "PHONE_NUMBER" "ADDRESS" "DATE" "NUMBER" "PRICE"]}, "name" {"type" "string", "description" "The representative name for the entity."}, "mentions" {"items" {"$ref" "EntityMention"}, "type" "array", "description" "The mentions of this entity in the input document. The API currently supports proper noun mentions."}, "metadata" {"additionalProperties" {"type" "string"}, "description" "Metadata associated with the entity. For most entity types, the metadata is a Wikipedia URL (`wikipedia_url`) and Knowledge Graph MID (`mid`), if they are available. For the metadata associated with other entity types, see the Type table below.", "type" "object"}, "salience" {"description" "The salience score associated with the entity in the [0, 1.0] range. The salience score for an entity provides information about the importance or centrality of that entity to the entire document text. Scores closer to 0 are less salient, while scores closer to 1.0 are highly salient.", "type" "number", "format" "float"}, "sentiment" {"$ref" "Sentiment", "description" "For calls to AnalyzeEntitySentiment or if AnnotateTextRequest.Features.extract_entity_sentiment is set to true, this field will contain the aggregate sentiment expressed for this entity in the provided document."}}}, "AnalyzeEntitySentimentRequest" {"description" "The entity-level sentiment analysis request message.", "properties" {"document" {"description" "Required. Input document.", "$ref" "Document"}, "encodingType" {"type" "string", "description" "The encoding type used by the API to calculate offsets.", "enum" ["NONE" "UTF8" "UTF16" "UTF32"], "enumDescriptions" ["If `EncodingType` is not specified, encoding-dependent information (such as `begin_offset`) will be set at `-1`." "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-8 encoding of the input. C++ and Go are examples of languages that use this encoding natively." "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-16 encoding of the input. Java and JavaScript are examples of languages that use this encoding natively." "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-32 encoding of the input. Python is an example of a language that uses this encoding natively."]}}, "id" "AnalyzeEntitySentimentRequest", "type" "object"}, "Document" {"description" "################################################################ # Represents the input to API methods.", "properties" {"type" {"enumDescriptions" ["The content type is not specified." "Plain text" "HTML"], "enum" ["TYPE_UNSPECIFIED" "PLAIN_TEXT" "HTML"], "description" "Required. If the type is not set or is `TYPE_UNSPECIFIED`, returns an `INVALID_ARGUMENT` error.", "type" "string"}, "gcsContentUri" {"description" "The Google Cloud Storage URI where the file content is located. This URI must be of the form: gs://bucket_name/object_name. For more details, see https://cloud.google.com/storage/docs/reference-uris. NOTE: Cloud Storage object versioning is not supported.", "type" "string"}, "language" {"type" "string", "description" "The language of the document (if not specified, the language is automatically detected). Both ISO and BCP-47 language codes are accepted. [Language Support](https://cloud.google.com/natural-language/docs/languages) lists currently supported languages for each API method. If the language (either specified by the caller or automatically detected) is not supported by the called API method, an `INVALID_ARGUMENT` error is returned."}, "content" {"type" "string", "description" "The content of the input in string format. Cloud audit logging exempt since it is based on user data."}}, "id" "Document", "type" "object"}, "AnnotateTextResponse" {"properties" {"sentences" {"description" "Sentences in the input document. Populated if the user enables AnnotateTextRequest.Features.extract_syntax.", "type" "array", "items" {"$ref" "Sentence"}}, "language" {"description" "The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details.", "type" "string"}, "categories" {"description" "Categories identified in the input document.", "type" "array", "items" {"$ref" "ClassificationCategory"}}, "tokens" {"items" {"$ref" "Token"}, "type" "array", "description" "Tokens, along with their syntactic information, in the input document. Populated if the user enables AnnotateTextRequest.Features.extract_syntax."}, "documentSentiment" {"description" "The overall sentiment for the document. Populated if the user enables AnnotateTextRequest.Features.extract_document_sentiment.", "$ref" "Sentiment"}, "entities" {"items" {"$ref" "Entity"}, "type" "array", "description" "Entities, along with their semantic information, in the input document. Populated if the user enables AnnotateTextRequest.Features.extract_entities."}}, "id" "AnnotateTextResponse", "type" "object", "description" "The text annotations response message."}, "Token" {"id" "Token", "description" "Represents the smallest syntactic building block of the text.", "properties" {"text" {"$ref" "TextSpan", "description" "The token text."}, "lemma" {"description" "[Lemma](https://en.wikipedia.org/wiki/Lemma_%28morphology%29) of the token.", "type" "string"}, "partOfSpeech" {"$ref" "PartOfSpeech", "description" "Parts of speech tag for this token."}, "dependencyEdge" {"$ref" "DependencyEdge", "description" "Dependency tree parse for this token."}}, "type" "object"}, "AnalyzeSentimentRequest" {"type" "object", "description" "The sentiment analysis request message.", "properties" {"document" {"$ref" "Document", "description" "Required. Input document."}, "encodingType" {"description" "The encoding type used by the API to calculate sentence offsets.", "enumDescriptions" ["If `EncodingType` is not specified, encoding-dependent information (such as `begin_offset`) will be set at `-1`." "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-8 encoding of the input. C++ and Go are examples of languages that use this encoding natively." "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-16 encoding of the input. Java and JavaScript are examples of languages that use this encoding natively." "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-32 encoding of the input. Python is an example of a language that uses this encoding natively."], "type" "string", "enum" ["NONE" "UTF8" "UTF16" "UTF32"]}}, "id" "AnalyzeSentimentRequest"}, "Features" {"id" "Features", "properties" {"extractEntitySentiment" {"description" "Extract entities and their associated sentiment.", "type" "boolean"}, "classifyText" {"description" "Classify the full document into categories.", "type" "boolean"}, "extractSyntax" {"description" "Extract syntax information.", "type" "boolean"}, "extractDocumentSentiment" {"type" "boolean", "description" "Extract document-level sentiment."}, "extractEntities" {"description" "Extract entities.", "type" "boolean"}}, "type" "object", "description" "All available features for sentiment, syntax, and semantic analysis. Setting each one to true will enable that specific analysis for the input."}, "AnalyzeSentimentResponse" {"id" "AnalyzeSentimentResponse", "type" "object", "description" "The sentiment analysis response message.", "properties" {"documentSentiment" {"description" "The overall sentiment of the input document.", "$ref" "Sentiment"}, "sentences" {"description" "The sentiment for all the sentences in the document.", "type" "array", "items" {"$ref" "Sentence"}}, "language" {"description" "The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details.", "type" "string"}}}}}