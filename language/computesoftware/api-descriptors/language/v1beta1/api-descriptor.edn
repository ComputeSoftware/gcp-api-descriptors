#:compute.api-descriptor{:endpoint #:compute.gcp.impl.descriptor{:url "https://language.googleapis.com/"}, :op->spec {"language.documents.analyzeEntities" {:operationId "language.documents.analyzeEntities", :description "Finds named entities (currently proper names and common nouns) in the text\nalong with entity types, salience, mentions for each entity, and\nother properties.", :requestBody {:content {"application/json" {:schema {:$ref "#/components/schemas/AnalyzeEntitiesRequest"}}}}, :compute.gcp.impl.descriptor/http-method :post, :compute.gcp.impl.descriptor/http-path "/v1beta1/documents:analyzeEntities"}, "language.documents.analyzeSentiment" {:operationId "language.documents.analyzeSentiment", :description "Analyzes the sentiment of the provided text.", :requestBody {:content {"application/json" {:schema {:$ref "#/components/schemas/AnalyzeSentimentRequest"}}}}, :compute.gcp.impl.descriptor/http-method :post, :compute.gcp.impl.descriptor/http-path "/v1beta1/documents:analyzeSentiment"}, "language.documents.analyzeSyntax" {:operationId "language.documents.analyzeSyntax", :description "Analyzes the syntax of the text and provides sentence boundaries and\ntokenization along with part of speech tags, dependency trees, and other\nproperties.", :requestBody {:content {"application/json" {:schema {:$ref "#/components/schemas/AnalyzeSyntaxRequest"}}}}, :compute.gcp.impl.descriptor/http-method :post, :compute.gcp.impl.descriptor/http-path "/v1beta1/documents:analyzeSyntax"}, "language.documents.annotateText" {:operationId "language.documents.annotateText", :description "A convenience method that provides all the features that analyzeSentiment,\nanalyzeEntities, and analyzeSyntax provide in one call.", :requestBody {:content {"application/json" {:schema {:$ref "#/components/schemas/AnnotateTextRequest"}}}}, :compute.gcp.impl.descriptor/http-method :post, :compute.gcp.impl.descriptor/http-path "/v1beta1/documents:annotateText"}}, :resolve {:components {:parameters {:quotaUser {:description "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.", :in "query", :name "quotaUser", :schema {:type "string"}}, :key {:description "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.", :in "query", :name "key", :schema {:type "string"}}, :alt {:description "Data format for response.", :in "query", :name "alt", :schema {:default "json", :enum ["json" "media" "proto"], :type "string"}}, :access_token {:description "OAuth access token.", :in "query", :name "access_token", :schema {:type "string"}}, :fields {:description "Selector specifying which fields to include in a partial response.", :in "query", :name "fields", :schema {:type "string"}}, :upload_protocol {:description "Upload protocol for media (e.g. \"raw\", \"multipart\").", :in "query", :name "upload_protocol", :schema {:type "string"}}, :uploadType {:description "Legacy upload protocol for media (e.g. \"media\", \"multipart\").", :in "query", :name "uploadType", :schema {:type "string"}}, :oauth_token {:description "OAuth 2.0 token for the current user.", :in "query", :name "oauth_token", :schema {:type "string"}}, "_.xgafv" {:description "V1 error format.", :in "query", :name "$.xgafv", :schema {:enum ["1" "2"], :type "string"}}, :prettyPrint {:description "Returns response with indentations and line breaks.", :in "query", :name "prettyPrint", :schema {:default true, :type "boolean"}}, :callback {:description "JSONP", :in "query", :name "callback", :schema {:type "string"}}}, :schemas {:AnalyzeSyntaxResponse {:description "The syntax analysis response message.", :properties {:language {:description "The language of the text, which will be the same as the language specified\nin the request or, if not specified, the automatically-detected language.\nSee Document.language field for more details.", :type "string"}, :sentences {:description "Sentences in the input document.", :items {:$ref "#/components/schemas/Sentence"}, :type "array"}, :tokens {:description "Tokens, along with their syntactic information, in the input document.", :items {:$ref "#/components/schemas/Token"}, :type "array"}}, :type "object"}, :AnalyzeSyntaxRequest {:description "The syntax analysis request message.", :properties {:document {:$ref "#/components/schemas/Document", :description "Input document."}, :encodingType {:description "The encoding type used by the API to calculate offsets.", :enum ["NONE" "UTF8" "UTF16" "UTF32"], :type "string"}}, :type "object"}, :EntityMention {:description "Represents a mention for an entity in the text. Currently, proper noun\nmentions are supported.", :properties {:text {:$ref "#/components/schemas/TextSpan", :description "The mention text."}, :type {:description "The type of the entity mention.", :enum ["TYPE_UNKNOWN" "PROPER" "COMMON"], :type "string"}}, :type "object"}, :AnalyzeEntitiesResponse {:description "The entity analysis response message.", :properties {:entities {:description "The recognized entities in the input document.", :items {:$ref "#/components/schemas/Entity"}, :type "array"}, :language {:description "The language of the text, which will be the same as the language specified\nin the request or, if not specified, the automatically-detected language.\nSee Document.language field for more details.", :type "string"}}, :type "object"}, :Token {:description "Represents the smallest syntactic building block of the text.", :properties {:dependencyEdge {:$ref "#/components/schemas/DependencyEdge", :description "Dependency tree parse for this token."}, :lemma {:description "[Lemma](https://en.wikipedia.org/wiki/Lemma_%28morphology%29) of the token.", :type "string"}, :partOfSpeech {:$ref "#/components/schemas/PartOfSpeech", :description "Parts of speech tag for this token."}, :text {:$ref "#/components/schemas/TextSpan", :description "The token text."}}, :type "object"}, :DependencyEdge {:description "Represents dependency parse tree information for a token.", :properties {:headTokenIndex {:description "Represents the head of this token in the dependency tree.\nThis is the index of the token which has an arc going to this token.\nThe index is the position of the token in the array of tokens returned\nby the API method. If this token is a root token, then the\n`head_token_index` is its own index.", :format "int32", :type "integer"}, :label {:description "The parse label for the token.", :enum ["UNKNOWN" "ABBREV" "ACOMP" "ADVCL" "ADVMOD" "AMOD" "APPOS" "ATTR" "AUX" "AUXPASS" "CC" "CCOMP" "CONJ" "CSUBJ" "CSUBJPASS" "DEP" "DET" "DISCOURSE" "DOBJ" "EXPL" "GOESWITH" "IOBJ" "MARK" "MWE" "MWV" "NEG" "NN" "NPADVMOD" "NSUBJ" "NSUBJPASS" "NUM" "NUMBER" "P" "PARATAXIS" "PARTMOD" "PCOMP" "POBJ" "POSS" "POSTNEG" "PRECOMP" "PRECONJ" "PREDET" "PREF" "PREP" "PRONL" "PRT" "PS" "QUANTMOD" "RCMOD" "RCMODREL" "RDROP" "REF" "REMNANT" "REPARANDUM" "ROOT" "SNUM" "SUFF" "TMOD" "TOPIC" "VMOD" "VOCATIVE" "XCOMP" "SUFFIX" "TITLE" "ADVPHMOD" "AUXCAUS" "AUXVV" "DTMOD" "FOREIGN" "KW" "LIST" "NOMC" "NOMCSUBJ" "NOMCSUBJPASS" "NUMC" "COP" "DISLOCATED" "ASP" "GMOD" "GOBJ" "INFMOD" "MES" "NCOMP"], :type "string"}}, :type "object"}, :Sentence {:description "Represents a sentence in the input document.", :properties {:sentiment {:$ref "#/components/schemas/Sentiment", :description "For calls to AnalyzeSentiment or if\nAnnotateTextRequest.Features.extract_document_sentiment is set to\ntrue, this field will contain the sentiment for the sentence."}, :text {:$ref "#/components/schemas/TextSpan", :description "The sentence text."}}, :type "object"}, :AnnotateTextResponse {:description "The text annotations response message.", :properties {:documentSentiment {:$ref "#/components/schemas/Sentiment", :description "The overall sentiment for the document. Populated if the user enables\nAnnotateTextRequest.Features.extract_document_sentiment."}, :entities {:description "Entities, along with their semantic information, in the input document.\nPopulated if the user enables\nAnnotateTextRequest.Features.extract_entities.", :items {:$ref "#/components/schemas/Entity"}, :type "array"}, :language {:description "The language of the text, which will be the same as the language specified\nin the request or, if not specified, the automatically-detected language.\nSee Document.language field for more details.", :type "string"}, :sentences {:description "Sentences in the input document. Populated if the user enables\nAnnotateTextRequest.Features.extract_syntax.", :items {:$ref "#/components/schemas/Sentence"}, :type "array"}, :tokens {:description "Tokens, along with their syntactic information, in the input document.\nPopulated if the user enables\nAnnotateTextRequest.Features.extract_syntax.", :items {:$ref "#/components/schemas/Token"}, :type "array"}}, :type "object"}, :PartOfSpeech {:description "Represents part of speech information for a token.", :properties {:tense {:description "The grammatical tense.", :enum ["TENSE_UNKNOWN" "CONDITIONAL_TENSE" "FUTURE" "PAST" "PRESENT" "IMPERFECT" "PLUPERFECT"], :type "string"}, :aspect {:description "The grammatical aspect.", :enum ["ASPECT_UNKNOWN" "PERFECTIVE" "IMPERFECTIVE" "PROGRESSIVE"], :type "string"}, :person {:description "The grammatical person.", :enum ["PERSON_UNKNOWN" "FIRST" "SECOND" "THIRD" "REFLEXIVE_PERSON"], :type "string"}, :number {:description "The grammatical number.", :enum ["NUMBER_UNKNOWN" "SINGULAR" "PLURAL" "DUAL"], :type "string"}, :voice {:description "The grammatical voice.", :enum ["VOICE_UNKNOWN" "ACTIVE" "CAUSATIVE" "PASSIVE"], :type "string"}, :mood {:description "The grammatical mood.", :enum ["MOOD_UNKNOWN" "CONDITIONAL_MOOD" "IMPERATIVE" "INDICATIVE" "INTERROGATIVE" "JUSSIVE" "SUBJUNCTIVE"], :type "string"}, :proper {:description "The grammatical properness.", :enum ["PROPER_UNKNOWN" "PROPER" "NOT_PROPER"], :type "string"}, :case {:description "The grammatical case.", :enum ["CASE_UNKNOWN" "ACCUSATIVE" "ADVERBIAL" "COMPLEMENTIVE" "DATIVE" "GENITIVE" "INSTRUMENTAL" "LOCATIVE" "NOMINATIVE" "OBLIQUE" "PARTITIVE" "PREPOSITIONAL" "REFLEXIVE_CASE" "RELATIVE_CASE" "VOCATIVE"], :type "string"}, :form {:description "The grammatical form.", :enum ["FORM_UNKNOWN" "ADNOMIAL" "AUXILIARY" "COMPLEMENTIZER" "FINAL_ENDING" "GERUND" "REALIS" "IRREALIS" "SHORT" "LONG" "ORDER" "SPECIFIC"], :type "string"}, :tag {:description "The part of speech tag.", :enum ["UNKNOWN" "ADJ" "ADP" "ADV" "CONJ" "DET" "NOUN" "NUM" "PRON" "PRT" "PUNCT" "VERB" "X" "AFFIX"], :type "string"}, :gender {:description "The grammatical gender.", :enum ["GENDER_UNKNOWN" "FEMININE" "MASCULINE" "NEUTER"], :type "string"}, :reciprocity {:description "The grammatical reciprocity.", :enum ["RECIPROCITY_UNKNOWN" "RECIPROCAL" "NON_RECIPROCAL"], :type "string"}}, :type "object"}, :AnalyzeSentimentResponse {:description "The sentiment analysis response message.", :properties {:documentSentiment {:$ref "#/components/schemas/Sentiment", :description "The overall sentiment of the input document."}, :language {:description "The language of the text, which will be the same as the language specified\nin the request or, if not specified, the automatically-detected language.\nSee Document.language field for more details.", :type "string"}, :sentences {:description "The sentiment for all the sentences in the document.", :items {:$ref "#/components/schemas/Sentence"}, :type "array"}}, :type "object"}, :AnalyzeSentimentRequest {:description "The sentiment analysis request message.", :properties {:document {:$ref "#/components/schemas/Document", :description "Input document."}, :encodingType {:description "The encoding type used by the API to calculate sentence offsets for the\nsentence sentiment.", :enum ["NONE" "UTF8" "UTF16" "UTF32"], :type "string"}}, :type "object"}, :Sentiment {:description "Represents the feeling associated with the entire text or entities in\nthe text.", :properties {:magnitude {:description "A non-negative number in the [0, +inf) range, which represents\nthe absolute magnitude of sentiment regardless of score (positive or\nnegative).", :format "float", :type "number"}, :polarity {:description "DEPRECATED FIELD - This field is being deprecated in\nfavor of score. Please refer to our documentation at\nhttps://cloud.google.com/natural-language/docs for more information.", :format "float", :type "number"}, :score {:description "Sentiment score between -1.0 (negative sentiment) and 1.0\n(positive sentiment).", :format "float", :type "number"}}, :type "object"}, :AnnotateTextRequest {:description "The request message for the text annotation API, which can perform multiple\nanalysis types (sentiment, entities, and syntax) in one call.", :properties {:document {:$ref "#/components/schemas/Document", :description "Input document."}, :encodingType {:description "The encoding type used by the API to calculate offsets.", :enum ["NONE" "UTF8" "UTF16" "UTF32"], :type "string"}, :features {:$ref "#/components/schemas/Features", :description "The enabled features."}}, :type "object"}, :AnalyzeEntitiesRequest {:description "The entity analysis request message.", :properties {:document {:$ref "#/components/schemas/Document", :description "Input document."}, :encodingType {:description "The encoding type used by the API to calculate offsets.", :enum ["NONE" "UTF8" "UTF16" "UTF32"], :type "string"}}, :type "object"}, :Features {:description "All available features for sentiment, syntax, and semantic analysis.\nSetting each one to true will enable that specific analysis for the input.", :properties {:extractDocumentSentiment {:description "Extract document-level sentiment.", :type "boolean"}, :extractEntities {:description "Extract entities.", :type "boolean"}, :extractSyntax {:description "Extract syntax information.", :type "boolean"}}, :type "object"}, :Document {:description "################################################################ #\n\nRepresents the input to API methods.", :properties {:content {:description "The content of the input in string format.\nCloud audit logging exempt since it is based on user data.", :type "string"}, :gcsContentUri {:description "The Google Cloud Storage URI where the file content is located.\nThis URI must be of the form: gs://bucket_name/object_name. For more\ndetails, see https://cloud.google.com/storage/docs/reference-uris.\nNOTE: Cloud Storage object versioning is not supported.", :type "string"}, :language {:description "The language of the document (if not specified, the language is\nautomatically detected). Both ISO and BCP-47 language codes are\naccepted.<br>\n[Language Support](/natural-language/docs/languages)\nlists currently supported languages for each API method.\nIf the language (either specified by the caller or automatically detected)\nis not supported by the called API method, an `INVALID_ARGUMENT` error\nis returned.", :type "string"}, :type {:description "Required. If the type is not set or is `TYPE_UNSPECIFIED`,\nreturns an `INVALID_ARGUMENT` error.", :enum ["TYPE_UNSPECIFIED" "PLAIN_TEXT" "HTML"], :type "string"}}, :type "object"}, :Entity {:description "Represents a phrase in the text that is a known entity, such as\na person, an organization, or location. The API associates information, such\nas salience and mentions, with entities.", :properties {:mentions {:description "The mentions of this entity in the input document. The API currently\nsupports proper noun mentions.", :items {:$ref "#/components/schemas/EntityMention"}, :type "array"}, :metadata {:additionalProperties {:type "string"}, :description "Metadata associated with the entity.\n\nCurrently, Wikipedia URLs and Knowledge Graph MIDs are provided, if\navailable. The associated keys are \"wikipedia_url\" and \"mid\", respectively.", :type "object"}, :name {:description "The representative name for the entity.", :type "string"}, :salience {:description "The salience score associated with the entity in the [0, 1.0] range.\n\nThe salience score for an entity provides information about the\nimportance or centrality of that entity to the entire document text.\nScores closer to 0 are less salient, while scores closer to 1.0 are highly\nsalient.", :format "float", :type "number"}, :type {:description "The entity type.", :enum ["UNKNOWN" "PERSON" "LOCATION" "ORGANIZATION" "EVENT" "WORK_OF_ART" "CONSUMER_GOOD" "OTHER"], :type "string"}}, :type "object"}, :TextSpan {:description "Represents an output piece of text.", :properties {:beginOffset {:description "The API calculates the beginning offset of the content in the original\ndocument according to the EncodingType specified in the API request.", :format "int32", :type "integer"}, :content {:description "The content of the output text.", :type "string"}}, :type "object"}, :Status {:description "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors).", :properties {:code {:description "The status code, which should be an enum value of google.rpc.Code.", :format "int32", :type "integer"}, :details {:description "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use.", :items {:additionalProperties {:description "Properties of the object. Contains field @type with type URL."}, :type "object"}, :type "array"}, :message {:description "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.", :type "string"}}, :type "object"}}, :securitySchemes {:Oauth2 {:description "Oauth 2.0 implicit authentication", :flows {:implicit {:authorizationUrl "https://accounts.google.com/o/oauth2/auth", :scopes {"https://www.googleapis.com/auth/cloud-language" "Apply machine learning models to reveal the structure and meaning of text", "https://www.googleapis.com/auth/cloud-platform" "View and manage your data across Google Cloud Platform services"}}}, :type "oauth2"}, :Oauth2c {:description "Oauth 2.0 accessCode authentication", :flows {:authorizationCode {:authorizationUrl "https://accounts.google.com/o/oauth2/auth", :scopes {"https://www.googleapis.com/auth/cloud-language" "Apply machine learning models to reveal the structure and meaning of text", "https://www.googleapis.com/auth/cloud-platform" "View and manage your data across Google Cloud Platform services"}, :tokenUrl "https://accounts.google.com/o/oauth2/token"}}, :type "oauth2"}}}}}