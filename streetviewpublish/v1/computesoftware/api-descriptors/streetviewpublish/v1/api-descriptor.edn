#:compute.gcp.descriptor{:name "streetviewpublish", :title "Street View Publish API", :api-version "v1", :revision "20200426", :endpoint #:compute.gcp.descriptor{:url "https://streetviewpublish.googleapis.com/", :batch-path "batch", :service-path ""}, :parameters {"callback" {"location" "query", "description" "JSONP", "type" "string"}, "uploadType" {"description" "Legacy upload protocol for media (e.g. \"media\", \"multipart\").", "type" "string", "location" "query"}, "key" {"description" "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.", "type" "string", "location" "query"}, "access_token" {"type" "string", "location" "query", "description" "OAuth access token."}, "oauth_token" {"description" "OAuth 2.0 token for the current user.", "type" "string", "location" "query"}, "prettyPrint" {"description" "Returns response with indentations and line breaks.", "default" "true", "type" "boolean", "location" "query"}, "alt" {"enumDescriptions" ["Responses with Content-Type of application/json" "Media download with context-dependent Content-Type" "Responses with Content-Type of application/x-protobuf"], "location" "query", "description" "Data format for response.", "default" "json", "enum" ["json" "media" "proto"], "type" "string"}, "$.xgafv" {"description" "V1 error format.", "type" "string", "enumDescriptions" ["v1 error format" "v2 error format"], "location" "query", "enum" ["1" "2"]}, "fields" {"type" "string", "location" "query", "description" "Selector specifying which fields to include in a partial response."}, "upload_protocol" {"type" "string", "location" "query", "description" "Upload protocol for media (e.g. \"raw\", \"multipart\")."}, "quotaUser" {"description" "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.", "type" "string", "location" "query"}}, :op->info {"streetviewpublish.photo.update" #:compute.gcp.descriptor{:http-method :put, :path "v1/photo/{id}", :request {"$ref" "Photo"}, :response {"$ref" "Photo"}, :parameters {"id" {"location" "path", "description" "Required. A unique identifier for a photo.", "type" "string", "required" true}, "updateMask" {"location" "query", "format" "google-fieldmask", "description" "Required. Mask that identifies fields on the photo metadata to update.\nIf not present, the old Photo\nmetadata is entirely replaced with the\nnew Photo metadata in this request.\nThe update fails if invalid fields are specified. Multiple fields can be\nspecified in a comma-delimited list.\n\nThe following fields are valid:\n\n* `pose.heading`\n* `pose.latLngPair`\n* `pose.pitch`\n* `pose.roll`\n* `pose.level`\n* `pose.altitude`\n* `connections`\n* `places`\n\n\n<aside class=\"note\"><b>Note:</b> When\nupdateMask\ncontains repeated fields, the entire set of repeated values get replaced\nwith the new contents. For example, if\nupdateMask\ncontains `connections` and `UpdatePhotoRequest.photo.connections` is empty,\nall connections are removed.</aside>", "type" "string"}}, :description "Updates the metadata of a Photo, such\nas pose, place association, connections, etc. Changing the pixels of a\nphoto is not supported.\n\nOnly the fields specified in the\nupdateMask\nfield are used. If `updateMask` is not present, the update applies to all\nfields.\n\nThis method returns the following error codes:\n\n* google.rpc.Code.PERMISSION_DENIED if the requesting user did not\ncreate the requested photo.\n* google.rpc.Code.INVALID_ARGUMENT if the request is malformed.\n* google.rpc.Code.NOT_FOUND if the requested photo does not exist.\n* google.rpc.Code.UNAVAILABLE if the requested\nPhoto is still being indexed."}, "streetviewpublish.photo.create" #:compute.gcp.descriptor{:http-method :post, :path "v1/photo", :request {"$ref" "Photo"}, :response {"$ref" "Photo"}, :parameters {}, :description "After the client finishes uploading the photo with the returned\nUploadRef,\nCreatePhoto\npublishes the uploaded Photo to\nStreet View on Google Maps.\n\nCurrently, the only way to set heading, pitch, and roll in CreatePhoto is\nthrough the [Photo Sphere XMP\nmetadata](https://developers.google.com/streetview/spherical-metadata) in\nthe photo bytes. CreatePhoto ignores the  `pose.heading`, `pose.pitch`,\n`pose.roll`, `pose.altitude`, and `pose.level` fields in Pose.\n\nThis method returns the following error codes:\n\n* google.rpc.Code.INVALID_ARGUMENT if the request is malformed or if\nthe uploaded photo is not a 360 photo.\n* google.rpc.Code.NOT_FOUND if the upload reference does not exist.\n* google.rpc.Code.RESOURCE_EXHAUSTED if the account has reached the\nstorage limit."}, "streetviewpublish.photos.list" #:compute.gcp.descriptor{:http-method :get, :path "v1/photos", :response {"$ref" "ListPhotosResponse"}, :parameters {"view" {"location" "query", "enum" ["BASIC" "INCLUDE_DOWNLOAD_URL"], "description" "Required. Specifies if a download URL for the photos bytes should be returned in the\nPhotos response.", "type" "string"}, "languageCode" {"type" "string", "location" "query", "description" "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more\ninformation, see\nhttp://www.unicode.org/reports/tr35/#Unicode_locale_identifier.\nIf language_code is unspecified, the user's language preference for Google\nservices is used."}, "filter" {"location" "query", "description" "Required. The filter expression. For example: `placeId=ChIJj61dQgK6j4AR4GeTYWZsKWw`.\n\nThe only filter supported at the moment is `placeId`.", "type" "string"}, "pageToken" {"description" "The\nnextPageToken\nvalue returned from a previous\nListPhotos\nrequest, if any.", "type" "string", "location" "query"}, "pageSize" {"format" "int32", "description" "The maximum number of photos to return.\n`pageSize` must be non-negative. If `pageSize` is zero or is not provided,\nthe default page size of 100 is used.\nThe number of photos returned in the response may be less than `pageSize`\nif the number of photos that belong to the user is less than `pageSize`.", "type" "integer", "location" "query"}}, :description "Lists all the Photos that belong to\nthe user.\n\n<aside class=\"note\"><b>Note:</b> Recently created photos that are still\nbeing indexed are not returned in the response.</aside>"}, "streetviewpublish.photos.batchDelete" #:compute.gcp.descriptor{:http-method :post, :path "v1/photos:batchDelete", :request {"$ref" "BatchDeletePhotosRequest"}, :response {"$ref" "BatchDeletePhotosResponse"}, :parameters {}, :description "Deletes a list of Photos and their\nmetadata.\n\nNote that if\nBatchDeletePhotos\nfails, either critical fields are missing or there is an authentication\nerror. Even if\nBatchDeletePhotos\nsucceeds, individual photos in the batch may have failures.\nThese failures are specified in each\nPhotoResponse.status\nin\nBatchDeletePhotosResponse.results.\nSee\nDeletePhoto\nfor specific failures that can occur per photo."}, "streetviewpublish.photos.batchUpdate" #:compute.gcp.descriptor{:http-method :post, :path "v1/photos:batchUpdate", :request {"$ref" "BatchUpdatePhotosRequest"}, :response {"$ref" "BatchUpdatePhotosResponse"}, :parameters {}, :description "Updates the metadata of Photos, such\nas pose, place association, connections, etc. Changing the pixels of photos\nis not supported.\n\nNote that if\nBatchUpdatePhotos\nfails, either critical fields are missing or there is an authentication\nerror. Even if\nBatchUpdatePhotos\nsucceeds, individual photos in the batch may have failures.\nThese failures are specified in each\nPhotoResponse.status\nin\nBatchUpdatePhotosResponse.results.\nSee\nUpdatePhoto\nfor specific failures that can occur per photo.\n\nOnly the fields specified in\nupdateMask\nfield are used. If `updateMask` is not present, the update applies to all\nfields.\n\nThe number of\nUpdatePhotoRequest\nmessages in a\nBatchUpdatePhotosRequest\nmust not exceed 20.\n\n<aside class=\"note\"><b>Note:</b> To update\nPose.altitude,\nPose.latLngPair has to be\nfilled as well. Otherwise, the request will fail.</aside>"}, "streetviewpublish.photo.get" #:compute.gcp.descriptor{:http-method :get, :path "v1/photo/{photoId}", :response {"$ref" "Photo"}, :parameters {"languageCode" {"description" "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more\ninformation, see\nhttp://www.unicode.org/reports/tr35/#Unicode_locale_identifier.\nIf language_code is unspecified, the user's language preference for Google\nservices is used.", "type" "string", "location" "query"}, "view" {"location" "query", "enum" ["BASIC" "INCLUDE_DOWNLOAD_URL"], "description" "Required. Specifies if a download URL for the photo bytes should be returned in the\nPhoto response.", "type" "string"}, "photoId" {"description" "Required. ID of the Photo.", "type" "string", "required" true, "location" "path"}}, :description "Gets the metadata of the specified\nPhoto.\n\nThis method returns the following error codes:\n\n* google.rpc.Code.PERMISSION_DENIED if the requesting user did not\ncreate the requested Photo.\n* google.rpc.Code.NOT_FOUND if the requested\nPhoto does not exist.\n* google.rpc.Code.UNAVAILABLE if the requested\nPhoto is still being indexed."}, "streetviewpublish.photo.delete" #:compute.gcp.descriptor{:http-method :delete, :path "v1/photo/{photoId}", :response {"$ref" "Empty"}, :parameters {"photoId" {"description" "Required. ID of the Photo.", "type" "string", "required" true, "location" "path"}}, :description "Deletes a Photo and its metadata.\n\nThis method returns the following error codes:\n\n* google.rpc.Code.PERMISSION_DENIED if the requesting user did not\ncreate the requested photo.\n* google.rpc.Code.NOT_FOUND if the photo ID does not exist."}, "streetviewpublish.photo.startUpload" #:compute.gcp.descriptor{:http-method :post, :path "v1/photo:startUpload", :request {"$ref" "Empty"}, :response {"$ref" "UploadRef"}, :parameters {}, :description "Creates an upload session to start uploading photo bytes.  The method uses\nthe upload URL of the returned\nUploadRef to upload the bytes for\nthe Photo.\n\nIn addition to the photo requirements shown in\nhttps://support.google.com/maps/answer/7012050?hl=en&ref_topic=6275604,\nthe photo must meet the following requirements:\n\n* Photo Sphere XMP metadata must be included in the photo metadata. See\nhttps://developers.google.com/streetview/spherical-metadata for the\nrequired fields.\n* The pixel size of the photo must meet the size requirements listed in\nhttps://support.google.com/maps/answer/7012050?hl=en&ref_topic=6275604, and\nthe photo must be a full 360 horizontally.\n\nAfter the upload completes, the method uses\nUploadRef with\nCreatePhoto\nto create the Photo object entry."}, "streetviewpublish.photos.batchGet" #:compute.gcp.descriptor{:http-method :get, :path "v1/photos:batchGet", :response {"$ref" "BatchGetPhotosResponse"}, :parameters {"view" {"location" "query", "enum" ["BASIC" "INCLUDE_DOWNLOAD_URL"], "description" "Required. Specifies if a download URL for the photo bytes should be returned in the\nPhoto response.", "type" "string"}, "languageCode" {"location" "query", "description" "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more\ninformation, see\nhttp://www.unicode.org/reports/tr35/#Unicode_locale_identifier.\nIf language_code is unspecified, the user's language preference for Google\nservices is used.", "type" "string"}, "photoIds" {"type" "string", "repeated" true, "location" "query", "description" "Required. IDs of the Photos. For HTTP\nGET requests, the URL query parameter should be\n`photoIds=<id1>&photoIds=<id2>&...`."}}, :description "Gets the metadata of the specified\nPhoto batch.\n\nNote that if\nBatchGetPhotos\nfails, either critical fields are missing or there is an authentication\nerror. Even if\nBatchGetPhotos\nsucceeds, individual photos in the batch may have failures.\nThese failures are specified in each\nPhotoResponse.status\nin\nBatchGetPhotosResponse.results.\nSee\nGetPhoto\nfor specific failures that can occur per photo."}}, :schemas {"Level" {"properties" {"number" {"format" "double", "description" "Floor number, used for ordering. 0 indicates the ground level, 1 indicates\nthe first level above ground level, -1 indicates the first level under\nground level. Non-integer values are OK.", "type" "number"}, "name" {"description" "Required. A name assigned to this Level, restricted to 3 characters.\nConsider how the elevator buttons would be labeled for this level if there\nwas an elevator.", "type" "string"}}, "id" "Level", "description" "Level information containing level number and its corresponding name.", "type" "object"}, "Photo" {"description" "Photo is used to store 360 photos along with photo metadata.", "type" "object", "properties" {"mapsPublishStatus" {"enumDescriptions" ["The status of the photo is unknown." "The photo is published to the public through Google Maps." "The photo has been rejected for an unknown reason."], "enum" ["UNSPECIFIED_MAPS_PUBLISH_STATUS" "PUBLISHED" "REJECTED_UNKNOWN"], "description" "Output only. Status in Google Maps, whether this photo was published or\nrejected. Not currently populated.", "type" "string"}, "uploadReference" {"$ref" "UploadRef", "description" "Required when creating a photo. Input only. The resource URL where the\nphoto bytes are uploaded to."}, "viewCount" {"format" "int64", "description" "Output only. View count of the photo.", "type" "string"}, "pose" {"$ref" "Pose", "description" "Pose of the photo."}, "photoId" {"$ref" "PhotoId", "description" "Required when updating a photo. Output only when creating a photo.\nIdentifier for the photo, which is unique among all photos in\nGoogle."}, "thumbnailUrl" {"description" "Output only. The thumbnail URL for showing a preview of the given photo.", "type" "string"}, "shareLink" {"description" "Output only. The share link for the photo.", "type" "string"}, "captureTime" {"type" "string", "format" "google-datetime", "description" "Absolute time when the photo was captured.\nWhen the photo has no exif timestamp, this is used to set a timestamp in\nthe photo metadata."}, "places" {"description" "Places where this photo belongs.", "items" {"$ref" "Place"}, "type" "array"}, "downloadUrl" {"description" "Output only. The download URL for the photo bytes. This field is set only\nwhen\nGetPhotoRequest.view\nis set to\nPhotoView.INCLUDE_DOWNLOAD_URL.", "type" "string"}, "transferStatus" {"description" "Output only. Status of rights transfer on this photo.", "type" "string", "enumDescriptions" ["The status of this transfer is unspecified." "This photo has never been in a transfer." "This photo transfer has been initiated, but the receiver has not yet\nresponded." "The photo transfer has been completed, and this photo has been\ntransferred to the recipient." "The recipient rejected this photo transfer." "The photo transfer expired before the recipient took any action." "The sender cancelled this photo transfer." "The recipient owns this photo due to a rights transfer."], "enum" ["TRANSFER_STATUS_UNKNOWN" "NEVER_TRANSFERRED" "PENDING" "COMPLETED" "REJECTED" "EXPIRED" "CANCELLED" "RECEIVED_VIA_TRANSFER"]}, "connections" {"description" "Connections to other photos. A connection represents the link from this\nphoto to another photo.", "items" {"$ref" "Connection"}, "type" "array"}}, "id" "Photo"}, "BatchUpdatePhotosRequest" {"id" "BatchUpdatePhotosRequest", "description" "Request to update the metadata of photos.\nUpdating the pixels of photos is not supported.", "type" "object", "properties" {"updatePhotoRequests" {"description" "Required. List of\nUpdatePhotoRequests.", "items" {"$ref" "UpdatePhotoRequest"}, "type" "array"}}}, "Empty" {"description" "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.", "type" "object", "properties" {}, "id" "Empty"}, "BatchDeletePhotosResponse" {"description" "Response to batch delete of one or more\nPhotos.", "type" "object", "properties" {"status" {"description" "The status for the operation to delete a single\nPhoto in the batch request.", "items" {"$ref" "Status"}, "type" "array"}}, "id" "BatchDeletePhotosResponse"}, "ListPhotosResponse" {"description" "Response to list all photos that belong to a user.", "type" "object", "properties" {"nextPageToken" {"type" "string", "description" "Token to retrieve the next page of results, or empty if there are no more\nresults in the list."}, "photos" {"description" "List of photos. The\npageSize field\nin the request determines the number of items returned.", "items" {"$ref" "Photo"}, "type" "array"}}, "id" "ListPhotosResponse"}, "Operation" {"id" "Operation", "description" "This resource represents a long-running operation that is the result of a\nnetwork API call.", "type" "object", "properties" {"done" {"type" "boolean", "description" "If the value is `false`, it means the operation is still in progress.\nIf `true`, the operation is completed, and either `error` or `response` is\navailable."}, "response" {"additionalProperties" {"description" "Properties of the object. Contains field @type with type URL.", "type" "any"}, "description" "The normal response of the operation in case of success.  If the original\nmethod returns no data on success, such as `Delete`, the response is\n`google.protobuf.Empty`.  If the original method is standard\n`Get`/`Create`/`Update`, the response should be the resource.  For other\nmethods, the response should have the type `XxxResponse`, where `Xxx`\nis the original method name.  For example, if the original method name\nis `TakeSnapshot()`, the inferred response type is\n`TakeSnapshotResponse`.", "type" "object"}, "name" {"description" "The server-assigned name, which is only unique within the same service that\noriginally returns it. If you use the default HTTP mapping, the\n`name` should be a resource name ending with `operations/{unique_id}`.", "type" "string"}, "error" {"$ref" "Status", "description" "The error result of the operation in case of failure or cancellation."}, "metadata" {"additionalProperties" {"type" "any", "description" "Properties of the object. Contains field @type with type URL."}, "description" "Service-specific metadata associated with the operation.  It typically\ncontains progress information and common metadata such as create time.\nSome services might not provide such metadata.  Any method that returns a\nlong-running operation should document the metadata type, if any.", "type" "object"}}}, "PhotoId" {"type" "object", "properties" {"id" {"description" "Required. A unique identifier for a photo.", "type" "string"}}, "id" "PhotoId", "description" "Identifier for a Photo."}, "Status" {"description" "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors).", "type" "object", "properties" {"message" {"type" "string", "description" "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client."}, "details" {"description" "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use.", "items" {"additionalProperties" {"description" "Properties of the object. Contains field @type with type URL.", "type" "any"}, "type" "object"}, "type" "array"}, "code" {"format" "int32", "description" "The status code, which should be an enum value of google.rpc.Code.", "type" "integer"}}, "id" "Status"}, "BatchUpdatePhotosResponse" {"description" "Response to batch update of metadata of one or more\nPhotos.", "type" "object", "properties" {"results" {"description" "List of results for each individual\nPhoto updated, in the same order as\nthe request.", "items" {"$ref" "PhotoResponse"}, "type" "array"}}, "id" "BatchUpdatePhotosResponse"}, "Pose" {"properties" {"latLngPair" {"description" "Latitude and longitude pair of the pose, as explained here:\nhttps://cloud.google.com/datastore/docs/reference/rest/Shared.Types/LatLng\nWhen creating a Photo, if the\nlatitude and longitude pair are not provided, the geolocation from the\nexif header is used. A latitude and longitude pair not provided in the\nphoto or exif header causes the photo process to fail.", "$ref" "LatLng"}, "roll" {"format" "double", "description" "Roll, measured in degrees. Value must be >= 0 and <360. A value of 0\nmeans level with the horizon.\nNaN indicates an unmeasured quantity.", "type" "number"}, "accuracyMeters" {"format" "float", "description" "The estimated horizontal accuracy of this pose in meters with 68%\nconfidence (one standard deviation). For example, on Android, this value is\navailable from this method:\nhttps://developer.android.com/reference/android/location/Location#getAccuracy().\nOther platforms have different methods of obtaining similar accuracy\nestimations.", "type" "number"}, "level" {"$ref" "Level", "description" "Level (the floor in a building) used to configure vertical navigation."}, "heading" {"format" "double", "description" "Compass heading, measured at the center of the photo in degrees clockwise\nfrom North. Value must be >=0 and <360.\nNaN indicates an unmeasured quantity.", "type" "number"}, "altitude" {"format" "double", "description" "Altitude of the pose in meters above WGS84 ellipsoid.\nNaN indicates an unmeasured quantity.", "type" "number"}, "pitch" {"format" "double", "description" "Pitch, measured at the center of the photo in degrees. Value must be >=-90\nand <= 90. A value of -90 means looking directly down, and a value of 90\nmeans looking directly up.\nNaN indicates an unmeasured quantity.", "type" "number"}}, "id" "Pose", "description" "Raw pose measurement for an entity.", "type" "object"}, "UploadRef" {"description" "Upload reference for media files.", "type" "object", "properties" {"uploadUrl" {"description" "Required. An upload reference should be unique for each user. It follows\nthe form:\n\"https://streetviewpublish.googleapis.com/media/user/{account_id}/photo/{upload_reference}\"", "type" "string"}}, "id" "UploadRef"}, "Place" {"description" "Place metadata for an entity.", "type" "object", "properties" {"languageCode" {"description" "Output-only. The language_code that the name is localized with. This should\nbe the language_code specified in the request, but may be a fallback.", "type" "string"}, "name" {"description" "Output-only. The name of the place, localized to the language_code.", "type" "string"}, "placeId" {"description" "Place identifier, as described in\nhttps://developers.google.com/places/place-id.", "type" "string"}}, "id" "Place"}, "BatchDeletePhotosRequest" {"description" "Request to delete multiple Photos.", "type" "object", "properties" {"photoIds" {"description" "Required. IDs of the Photos. HTTP\nGET requests require the following syntax for the URL query parameter:\n`photoIds=<id1>&photoIds=<id2>&...`.", "items" {"type" "string"}, "type" "array"}}, "id" "BatchDeletePhotosRequest"}, "Connection" {"description" "A connection is the link from a source photo to a destination photo.", "type" "object", "properties" {"target" {"$ref" "PhotoId", "description" "Required. The destination of the connection from the containing photo to\nanother photo."}}, "id" "Connection"}, "UpdatePhotoRequest" {"properties" {"updateMask" {"type" "string", "format" "google-fieldmask", "description" "Required. Mask that identifies fields on the photo metadata to update.\nIf not present, the old Photo\nmetadata is entirely replaced with the\nnew Photo metadata in this request.\nThe update fails if invalid fields are specified. Multiple fields can be\nspecified in a comma-delimited list.\n\nThe following fields are valid:\n\n* `pose.heading`\n* `pose.latLngPair`\n* `pose.pitch`\n* `pose.roll`\n* `pose.level`\n* `pose.altitude`\n* `connections`\n* `places`\n\n\n<aside class=\"note\"><b>Note:</b> When\nupdateMask\ncontains repeated fields, the entire set of repeated values get replaced\nwith the new contents. For example, if\nupdateMask\ncontains `connections` and `UpdatePhotoRequest.photo.connections` is empty,\nall connections are removed.</aside>"}, "photo" {"$ref" "Photo", "description" "Required. Photo object containing the\nnew metadata."}}, "id" "UpdatePhotoRequest", "description" "Request to update the metadata of a\nPhoto. Updating the pixels of a photo\nis not supported.", "type" "object"}, "BatchGetPhotosResponse" {"description" "Response to batch get of Photos.", "type" "object", "properties" {"results" {"description" "List of results for each individual\nPhoto requested, in the same order as\nthe requests in\nBatchGetPhotos.", "items" {"$ref" "PhotoResponse"}, "type" "array"}}, "id" "BatchGetPhotosResponse"}, "PhotoResponse" {"description" "Response payload for a single\nPhoto\nin batch operations including\nBatchGetPhotos\nand\nBatchUpdatePhotos.", "type" "object", "properties" {"status" {"$ref" "Status", "description" "The status for the operation to get or update a single photo in the batch\nrequest."}, "photo" {"$ref" "Photo", "description" "The Photo resource, if the request\nwas successful."}}, "id" "PhotoResponse"}, "LatLng" {"type" "object", "properties" {"latitude" {"format" "double", "description" "The latitude in degrees. It must be in the range [-90.0, +90.0].", "type" "number"}, "longitude" {"format" "double", "description" "The longitude in degrees. It must be in the range [-180.0, +180.0].", "type" "number"}}, "id" "LatLng", "description" "An object representing a latitude/longitude pair. This is expressed as a pair\nof doubles representing degrees latitude and degrees longitude. Unless\nspecified otherwise, this must conform to the\n<a href=\"http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf\">WGS84\nstandard</a>. Values must be within normalized ranges."}}}