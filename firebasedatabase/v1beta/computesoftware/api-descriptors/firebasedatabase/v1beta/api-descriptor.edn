#:compute.gcp.descriptor{:name "firebasedatabase", :title "Firebase Realtime Database Management API", :api-version "v1beta", :revision "20220324", :endpoint #:compute.gcp.descriptor{:url "https://firebasedatabase.googleapis.com/", :batch-path "batch", :service-path ""}, :parameters {"callback" {"description" "JSONP", "type" "string", "location" "query"}, "uploadType" {"type" "string", "location" "query", "description" "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."}, "key" {"type" "string", "description" "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.", "location" "query"}, "access_token" {"type" "string", "description" "OAuth access token.", "location" "query"}, "oauth_token" {"location" "query", "type" "string", "description" "OAuth 2.0 token for the current user."}, "prettyPrint" {"default" "true", "location" "query", "type" "boolean", "description" "Returns response with indentations and line breaks."}, "alt" {"location" "query", "enum" ["json" "media" "proto"], "description" "Data format for response.", "enumDescriptions" ["Responses with Content-Type of application/json" "Media download with context-dependent Content-Type" "Responses with Content-Type of application/x-protobuf"], "type" "string", "default" "json"}, "$.xgafv" {"enum" ["1" "2"], "location" "query", "enumDescriptions" ["v1 error format" "v2 error format"], "type" "string", "description" "V1 error format."}, "fields" {"location" "query", "type" "string", "description" "Selector specifying which fields to include in a partial response."}, "upload_protocol" {"type" "string", "description" "Upload protocol for media (e.g. \"raw\", \"multipart\").", "location" "query"}, "quotaUser" {"type" "string", "description" "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.", "location" "query"}}, :op->info {"firebasedatabase.projects.locations.instances.get" #:compute.gcp.descriptor{:http-method :get, :path "v1beta/{+name}", :response {"$ref" "DatabaseInstance"}, :parameters {"name" {"location" "path", "pattern" "^projects/[^/]+/locations/[^/]+/instances/[^/]+$", "description" "The fully qualified resource name of the database instance, in the form: `projects/{project-number}/locations/{location-id}/instances/{database-id}`. `database-id` is a globally unique identifier across all parent collections. For convenience, this method allows you to supply `-` as a wildcard character in place of specific collections under `projects` and `locations`. The resulting wildcarding form of the method is: `projects/-/locations/-/instances/{database-id}`.", "type" "string", "required" true}}, :description "Gets the DatabaseInstance identified by the specified resource name."}, "firebasedatabase.projects.locations.instances.create" #:compute.gcp.descriptor{:http-method :post, :path "v1beta/{+parent}/instances", :request {"$ref" "DatabaseInstance"}, :response {"$ref" "DatabaseInstance"}, :parameters {"databaseId" {"location" "query", "description" "The globally unique identifier of the database instance.", "type" "string"}, "parent" {"location" "path", "type" "string", "description" "The parent project for which to create a database instance, in the form: `projects/{project-number}/locations/{location-id}`.", "required" true, "pattern" "^projects/[^/]+/locations/[^/]+$"}, "validateOnly" {"type" "boolean", "description" "When set to true, the request will be validated but not submitted.", "location" "query"}}, :description "Requests that a new DatabaseInstance be created. The state of a successfully created DatabaseInstance is ACTIVE. Only available for projects on the Blaze plan. Projects can be upgraded using the Cloud Billing API https://cloud.google.com/billing/reference/rest/v1/projects/updateBillingInfo. Note that it might take a few minutes for billing enablement state to propagate to Firebase systems."}, "firebasedatabase.projects.locations.instances.list" #:compute.gcp.descriptor{:http-method :get, :path "v1beta/{+parent}/instances", :response {"$ref" "ListDatabaseInstancesResponse"}, :parameters {"pageToken" {"location" "query", "type" "string", "description" "Token returned from a previous call to `ListDatabaseInstances` indicating where in the set of database instances to resume listing."}, "pageSize" {"format" "int32", "description" "The maximum number of database instances to return in the response. The server may return fewer than this at its discretion. If no value is specified (or too large a value is specified), then the server will impose its own limit.", "type" "integer", "location" "query"}, "parent" {"pattern" "^projects/[^/]+/locations/[^/]+$", "location" "path", "required" true, "description" "The parent project for which to list database instances, in the form: `projects/{project-number}/locations/{location-id}` To list across all locations, use a parent in the form: `projects/{project-number}/locations/-`", "type" "string"}}, :description "Lists each DatabaseInstance associated with the specified parent project. The list items are returned in no particular order, but will be a consistent view of the database instances when additional requests are made with a `pageToken`. The resulting list contains instances in any STATE. The list results may be stale by a few seconds. Use GetDatabaseInstance for consistent reads."}, "firebasedatabase.projects.locations.instances.delete" #:compute.gcp.descriptor{:http-method :delete, :path "v1beta/{+name}", :response {"$ref" "DatabaseInstance"}, :parameters {"name" {"type" "string", "pattern" "^projects/[^/]+/locations/[^/]+/instances/[^/]+$", "required" true, "description" "The fully qualified resource name of the database instance, in the form: `projects/{project-number}/locations/{location-id}/instances/{database-id}`", "location" "path"}}, :description "Marks a DatabaseInstance to be deleted. The DatabaseInstance will be purged within 30 days. The default database cannot be deleted. IDs for deleted database instances may never be recovered or re-used. The Database may only be deleted if it is already in a DISABLED state."}, "firebasedatabase.projects.locations.instances.reenable" #:compute.gcp.descriptor{:http-method :post, :path "v1beta/{+name}:reenable", :request {"$ref" "ReenableDatabaseInstanceRequest"}, :response {"$ref" "DatabaseInstance"}, :parameters {"name" {"description" "The fully qualified resource name of the database instance, in the form: `projects/{project-number}/locations/{location-id}/instances/{database-id}`", "type" "string", "location" "path", "pattern" "^projects/[^/]+/locations/[^/]+/instances/[^/]+$", "required" true}}, :description "Enables a DatabaseInstance. The database must have been disabled previously using DisableDatabaseInstance. The state of a successfully reenabled DatabaseInstance is ACTIVE."}, "firebasedatabase.projects.locations.instances.disable" #:compute.gcp.descriptor{:http-method :post, :path "v1beta/{+name}:disable", :request {"$ref" "DisableDatabaseInstanceRequest"}, :response {"$ref" "DatabaseInstance"}, :parameters {"name" {"type" "string", "pattern" "^projects/[^/]+/locations/[^/]+/instances/[^/]+$", "required" true, "description" "The fully qualified resource name of the database instance, in the form: `projects/{project-number}/locations/{location-id}/instances/{database-id}`", "location" "path"}}, :description "Disables a DatabaseInstance. The database can be re-enabled later using ReenableDatabaseInstance. When a database is disabled, all reads and writes are denied, including view access in the Firebase console."}}, :schemas {"ReenableDatabaseInstanceRequest" {"type" "object", "properties" {}, "description" "The request sent to the ReenableDatabaseInstance method.", "id" "ReenableDatabaseInstanceRequest"}, "ListDatabaseInstancesResponse" {"id" "ListDatabaseInstancesResponse", "properties" {"instances" {"items" {"$ref" "DatabaseInstance"}, "description" "List of each DatabaseInstance that is in the parent Firebase project.", "type" "array"}, "nextPageToken" {"description" "If the result list is too large to fit in a single response, then a token is returned. If the string is empty, then this response is the last page of results. This token can be used in a subsequent call to `ListDatabaseInstances` to find the next group of database instances. Page tokens are short-lived and should not be persisted.", "type" "string"}}, "description" "The response from the ListDatabaseInstances method.", "type" "object"}, "DatabaseInstance" {"type" "object", "properties" {"type" {"enum" ["DATABASE_INSTANCE_TYPE_UNSPECIFIED" "DEFAULT_DATABASE" "USER_DATABASE"], "description" "The database instance type. On creation only USER_DATABASE is allowed, which is also the default when omitted.", "enumDescriptions" ["Unknown state, likely the result of an error on the backend. This is only used for distinguishing unset values." "The default database that is provisioned when a project is created." "A database that the user created."], "type" "string"}, "name" {"description" "The fully qualified resource name of the database instance, in the form: `projects/{project-number}/locations/{location-id}/instances/{database-id}`.", "type" "string"}, "databaseUrl" {"type" "string", "description" "Immutable. The globally unique hostname of the database."}, "project" {"description" "The resource name of the project this instance belongs to. For example: `projects/{project-number}`.", "type" "string"}, "state" {"type" "string", "description" "The database's lifecycle state. Read-only.", "enumDescriptions" ["Unspecified state, likely the result of an error on the backend. This is only used for distinguishing unset values." "The normal and active state." "The database is in a disabled state. It can be re-enabled later." "The database is in a deleted state."], "enum" ["LIFECYCLE_STATE_UNSPECIFIED" "ACTIVE" "DISABLED" "DELETED"]}}, "description" "Representation of a Realtime Database instance. Details on interacting with contents of a DatabaseInstance can be found at: https://firebase.google.com/docs/database/rest/start.", "id" "DatabaseInstance"}, "DisableDatabaseInstanceRequest" {"properties" {}, "type" "object", "description" "The request sent to the DisableDatabaseInstance method.", "id" "DisableDatabaseInstanceRequest"}}}