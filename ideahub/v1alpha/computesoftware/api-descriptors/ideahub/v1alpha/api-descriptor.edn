#:compute.gcp.descriptor{:name "ideahub", :title "Idea Hub API", :api-version "v1alpha", :revision "20220324", :endpoint #:compute.gcp.descriptor{:url "https://ideahub.googleapis.com/", :batch-path "batch", :service-path ""}, :parameters {"callback" {"type" "string", "location" "query", "description" "JSONP"}, "uploadType" {"location" "query", "description" "Legacy upload protocol for media (e.g. \"media\", \"multipart\").", "type" "string"}, "key" {"location" "query", "type" "string", "description" "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."}, "access_token" {"location" "query", "description" "OAuth access token.", "type" "string"}, "oauth_token" {"location" "query", "type" "string", "description" "OAuth 2.0 token for the current user."}, "prettyPrint" {"type" "boolean", "default" "true", "location" "query", "description" "Returns response with indentations and line breaks."}, "alt" {"description" "Data format for response.", "type" "string", "enumDescriptions" ["Responses with Content-Type of application/json" "Media download with context-dependent Content-Type" "Responses with Content-Type of application/x-protobuf"], "enum" ["json" "media" "proto"], "default" "json", "location" "query"}, "$.xgafv" {"enum" ["1" "2"], "type" "string", "description" "V1 error format.", "enumDescriptions" ["v1 error format" "v2 error format"], "location" "query"}, "fields" {"location" "query", "description" "Selector specifying which fields to include in a partial response.", "type" "string"}, "upload_protocol" {"description" "Upload protocol for media (e.g. \"raw\", \"multipart\").", "location" "query", "type" "string"}, "quotaUser" {"type" "string", "location" "query", "description" "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."}}, :op->info {"ideahub.ideas.list" #:compute.gcp.descriptor{:http-method :get, :path "v1alpha/ideas", :response {"$ref" "GoogleSearchIdeahubV1alphaListIdeasResponse"}, :parameters {"pageToken" {"location" "query", "type" "string", "description" "Used to fetch next page."}, "parent" {"description" "If defined, specifies the creator for which to filter by. Format: publishers/{publisher}/properties/{property}", "location" "query", "type" "string"}, "filter" {"location" "query", "description" "Allows filtering. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions are implicitly combined, as if the `AND` operator was always used. The `OR` operator is currently unsupported. * Supported functions: - `saved(bool)`: If set to true, fetches only saved ideas. If set to false, fetches all except saved ideas. Can't be simultaneously used with `dismissed(bool)`. - `dismissed(bool)`: If set to true, fetches only dismissed ideas. Can't be simultaneously used with `saved(bool)`. The `false` value is currently unsupported. Examples: * `saved(true)` * `saved(false)` * `dismissed(true)` The length of this field should be no more than 500 characters.", "type" "string"}, "pageSize" {"description" "The maximum number of ideas per page. If unspecified, at most 10 ideas will be returned. The maximum value is 2000; values above 2000 will be coerced to 2000.", "type" "integer", "location" "query", "format" "int32"}, "orderBy" {"description" "Order semantics described below.", "type" "string", "location" "query"}}, :description "List ideas for a given Creator and filter and sort options."}, "ideahub.platforms.properties.locales.list" #:compute.gcp.descriptor{:http-method :get, :path "v1alpha/{+parent}/locales", :response {"$ref" "GoogleSearchIdeahubV1alphaListAvailableLocalesResponse"}, :parameters {"pageSize" {"location" "query", "type" "integer", "description" "The maximum number of locales to return. The service may return fewer than this value. If unspecified, at most 100 locales will be returned. The maximum value is 100; values above 100 will be coerced to 100.", "format" "int32"}, "parent" {"location" "path", "pattern" "^platforms/[^/]+/properties/[^/]+$", "required" true, "description" "Required. The web property to check idea availability for Format: platforms/{platform}/property/{property}", "type" "string"}, "pageToken" {"location" "query", "type" "string", "description" "A page token, received from a previous `ListAvailableLocales` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListAvailableLocales` must match the call that provided the page token."}}, :description "Returns which locales ideas are available in for a given Creator."}, "ideahub.platforms.properties.topicStates.patch" #:compute.gcp.descriptor{:http-method :patch, :path "v1alpha/{+name}", :request {"$ref" "GoogleSearchIdeahubV1alphaTopicState"}, :response {"$ref" "GoogleSearchIdeahubV1alphaTopicState"}, :parameters {"updateMask" {"description" "The list of fields to be updated.", "format" "google-fieldmask", "location" "query", "type" "string"}, "name" {"description" "Unique identifier for the topic state. Format: platforms/{platform}/properties/{property}/topicStates/{topic_state}", "required" true, "location" "path", "type" "string", "pattern" "^platforms/[^/]+/properties/[^/]+/topicStates/[^/]+$"}}, :description "Update a topic state resource."}, "ideahub.platforms.properties.ideas.list" #:compute.gcp.descriptor{:http-method :get, :path "v1alpha/{+parent}/ideas", :response {"$ref" "GoogleSearchIdeahubV1alphaListIdeasResponse"}, :parameters {"pageSize" {"type" "integer", "location" "query", "description" "The maximum number of ideas per page. If unspecified, at most 10 ideas will be returned. The maximum value is 2000; values above 2000 will be coerced to 2000.", "format" "int32"}, "pageToken" {"location" "query", "type" "string", "description" "Used to fetch next page."}, "orderBy" {"description" "Order semantics described below.", "location" "query", "type" "string"}, "parent" {"description" "If defined, specifies the creator for which to filter by. Format: publishers/{publisher}/properties/{property}", "required" true, "type" "string", "pattern" "^platforms/[^/]+/properties/[^/]+$", "location" "path"}, "filter" {"location" "query", "type" "string", "description" "Allows filtering. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions are implicitly combined, as if the `AND` operator was always used. The `OR` operator is currently unsupported. * Supported functions: - `saved(bool)`: If set to true, fetches only saved ideas. If set to false, fetches all except saved ideas. Can't be simultaneously used with `dismissed(bool)`. - `dismissed(bool)`: If set to true, fetches only dismissed ideas. Can't be simultaneously used with `saved(bool)`. The `false` value is currently unsupported. Examples: * `saved(true)` * `saved(false)` * `dismissed(true)` The length of this field should be no more than 500 characters."}}, :description "List ideas for a given Creator and filter and sort options."}, "ideahub.platforms.properties.ideaActivities.create" #:compute.gcp.descriptor{:http-method :post, :path "v1alpha/{+parent}/ideaActivities", :request {"$ref" "GoogleSearchIdeahubV1alphaIdeaActivity"}, :response {"$ref" "GoogleSearchIdeahubV1alphaIdeaActivity"}, :parameters {"parent" {"location" "path", "description" "Required. The parent resource where this idea activity will be created. Format: platforms/{platform}/property/{property}", "required" true, "type" "string", "pattern" "^platforms/[^/]+/properties/[^/]+$"}}, :description "Creates an idea activity entry."}, "ideahub.platforms.properties.ideaStates.patch" #:compute.gcp.descriptor{:http-method :patch, :path "v1alpha/{+name}", :request {"$ref" "GoogleSearchIdeahubV1alphaIdeaState"}, :response {"$ref" "GoogleSearchIdeahubV1alphaIdeaState"}, :parameters {"name" {"type" "string", "required" true, "pattern" "^platforms/[^/]+/properties/[^/]+/ideaStates/[^/]+$", "location" "path", "description" "Unique identifier for the idea state. Format: platforms/{platform}/properties/{property}/ideaStates/{idea_state}"}, "updateMask" {"format" "google-fieldmask", "type" "string", "description" "The list of fields to be updated.", "location" "query"}}, :description "Update an idea state resource."}}, :schemas {"GoogleSearchIdeahubV1alphaListIdeasResponse" {"properties" {"ideas" {"items" {"$ref" "GoogleSearchIdeahubV1alphaIdea"}, "description" "Results for the ListIdeasRequest.", "type" "array"}, "nextPageToken" {"type" "string", "description" "Used to fetch the next page in a subsequent request."}}, "type" "object", "id" "GoogleSearchIdeahubV1alphaListIdeasResponse"}, "GoogleSearchIdeahubV1alphaIdeaState" {"properties" {"name" {"type" "string", "description" "Unique identifier for the idea state. Format: platforms/{platform}/properties/{property}/ideaStates/{idea_state}"}, "saved" {"type" "boolean", "description" "Whether the idea is saved."}, "dismissed" {"description" "Whether the idea is dismissed.", "type" "boolean"}}, "id" "GoogleSearchIdeahubV1alphaIdeaState", "type" "object", "description" "Represents idea state specific to a web property."}, "GoogleSearchIdeahubV1alphaTopic" {"description" "Represents a Topic umbrella for a list of questions that a Creator may want to respond to.", "id" "GoogleSearchIdeahubV1alphaTopic", "properties" {"name" {"type" "string", "description" "Unique identifier for the topic. Format: topics/{topic}"}, "displayName" {"description" "String displayed to the creator indicating the name of the Topic.", "type" "string"}, "mid" {"description" "The mID of the topic.", "type" "string"}}, "type" "object"}, "GoogleSearchIdeahubV1alphaAvailableLocale" {"type" "object", "id" "GoogleSearchIdeahubV1alphaAvailableLocale", "description" "Represents locales that are available for a web property.", "properties" {"name" {"type" "string", "description" "A string in BCP 47 format, prefixed with the platform and property name, and \"locales/\". Format: platforms/{platform}/properties/{property}/locales/{locale}"}, "locale" {"description" "A string in BCP 47 format, without a resource prefix.", "type" "string"}}}, "GoogleSearchIdeahubV1alphaListAvailableLocalesResponse" {"id" "GoogleSearchIdeahubV1alphaListAvailableLocalesResponse", "type" "object", "properties" {"nextPageToken" {"description" "A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.", "type" "string"}, "availableLocales" {"type" "array", "description" "Locales for which ideas are available for the given Creator.", "items" {"$ref" "GoogleSearchIdeahubV1alphaAvailableLocale"}}}, "description" "Response for whether ideas are available for a given web property on a platform, for the currently logged-in user."}, "GoogleSearchIdeahubV1alphaIdeaActivity" {"type" "object", "description" "An idea activity entry.", "properties" {"name" {"type" "string", "description" "Unique identifier for the idea activity. The name is ignored when creating an idea activity. Format: platforms/{platform}/properties/{property}/ideaActivities/{idea_activity}"}, "topics" {"description" "The Topic IDs for this entry. If empty, ideas should be set.", "type" "array", "items" {"type" "string"}}, "type" {"enum" ["TYPE_UNSPECIFIED" "POST_DRAFTED" "POST_PUBLISHED" "POST_DELETED" "POST_UNPUBLISHED"], "enumDescriptions" ["An unspecified, unknown type of idea activity." "An idea activity type indicating a post has been drafted." "An idea activity type indicating a post has been published." "An idea activity type indicating a post has been deleted." "An idea activity type indicating a post has been unpublished."], "description" "The type of activity performed.", "type" "string"}, "ideas" {"description" "The Idea IDs for this entry. If empty, topics should be set.", "type" "array", "items" {"type" "string"}}, "uri" {"type" "string", "description" "The uri the activity relates to."}}, "id" "GoogleSearchIdeahubV1alphaIdeaActivity"}, "GoogleSearchIdeahubV1alphaIdea" {"description" "A single Idea that we want to show the end user.", "properties" {"topics" {"description" "The Topics that match the idea.", "type" "array", "items" {"$ref" "GoogleSearchIdeahubV1alphaTopic"}}, "name" {"type" "string", "description" "Unique identifier for the idea. Format: ideas/{ideaId}"}, "text" {"type" "string", "description" "The idea’s text."}}, "type" "object", "id" "GoogleSearchIdeahubV1alphaIdea"}, "GoogleSearchIdeahubV1alphaTopicState" {"id" "GoogleSearchIdeahubV1alphaTopicState", "type" "object", "description" "Represents topic state specific to a web property.", "properties" {"saved" {"type" "boolean", "description" "Whether the topic is saved."}, "name" {"description" "Unique identifier for the topic state. Format: platforms/{platform}/properties/{property}/topicStates/{topic_state}", "type" "string"}, "dismissed" {"description" "Whether the topic is dismissed.", "type" "boolean"}}}}}